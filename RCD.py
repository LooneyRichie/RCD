import os
import sys
import time

# RCD is a work in progress, it also acts as a coding dungeon for learning various programming languages.
# Yes I am aware this is a bit of a mess, but I am trying to make it work.
# The slow_print function prints the details of the coding dungeon with a delay between each character.

def slow_print(text, delay=0.01):
    """Prints text with a delay between each character."""
    for char in text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(delay)
    print()  # Move to the next line after printing
    
# The display_menu function displays the main menu of the coding dungeon.    
        
def display_menu():
    languages = [
        "1.  AI Programming",
        "Learn the basics of AI developement programming, including algorithms and tokenizers, in Python, Java, and C++.",
        "2.  Python Programming",
        "Learn the fundamentals of Python, an object-oriented programming language.",
        "3.  Fortran Programming",
        "Learn the basics of Fortran, a high-level programming language.",
        "4.  COBOL Programming",
        "Learn the basics of COBOL, a high-level programming language.",
        "5.  Lisp Programming",
        "Learn the basics of Lisp, a family of programming languages with a long history.",
        "6.  Mojo Programming",
        "Learn the basics of Mojo, a programming language designed for high-performance computing.",
        "7.  R Programming",
        "Learn the basics of R, a programming language for statistical computing and graphics.",
        "8.  Julia Programming",
        "Learn the basics of Julia, a high-level, high-performance programming language.",
        "9.  Haskell Programming",
        "Learn the basics of Haskell, a purely functional programming language.",
        "10. Scala Programming",
        "Learn the basics of Scala, a general-purpose programming language that supports both object-oriented and functional programming.",
        "11. Elixir Programming",
        "Learn the basics of Elixir, a functional programming language designed for building scalable and maintainable applications.",
        "12. Erlang Programming",
        "Learn the basics of Erlang, a functional programming language used for building concurrent and distributed systems.",
        "13. F# Programming",
        "Learn the basics of F#, a functional-first programming language that runs on the .NET platform.",
        "14. Kotlin Programming",
        "Learn the basics of Kotlin, a statically typed (OOP) language.",
        "15. Rust Programming",
        "Learn the basics of Rust, a systems programming language.",
        "16. Java Programming",
        "Learn the basics of Java, a high-level, multi-platform, (OOP) language.",
        "17. C++ Programming",
        "Learn the basics of C++, a multi-paradigm language, supporting both procedural and object-oriented programming.",
        "18. C# Programming",
        "Learn the basics of C#, a modern, general-purpose (OOP) language.",
        "19. C Programming",
        "Learn the basics of C programming, a general-purpose procedural programming language.",
        "20. Assembly Language",
        "Learn the basics of Assembly language, a low-level programming language.",
        "21. JavaScript Programming",
        "Learn the basics of JavaScript, a high-level, multi-paradigm, interpreted, and dynamically typed programming language.",
        "22. HTML Fundamentals",
        "Learn the basics of HTML, a hypertext markup declarative programming language.",
        "23. XML Basics",
        "Learn the basics of XML, an extensible markup declarative programming language.",
        "24. CSS Styling",
        "Learn the basics of CSS, a cascading style sheets declarative programming language.",
        "25. Ruby Programming",
        "Learn the basics of Ruby, a general-purpose, object-oriented, interpreted programming language.",
        "26. Lua Programming",
        "Learn the basics of Lua, a lightweight, high-level, multi-paradigm scripting language.",
        "27. Shell Scripting",
        "Learn the basics of shell scripting, including commands and scripting techniques.",
        "28. Dart Programming",
        "Learn the basics of Dart, an object-oriented client-optimized programming language.",
        "29. Flutter Development",
        "Learn the basics of Flutter development, including widgets and state management.",
        "30. Go Programming",
        "Learn the basics of Go, a general-purpose, statically typed, compiled programming language.",
        "31. Perl Programming",
        "Learn the basics of Perl, a general-purpose, high-level, interpreted, and dynamic programming language.",
        "32. SQL Databases",
        "Learn the basics of SQL, including queries, joins, and database design.",
        "33. PHP Programming",
        "Learn the basics of PHP, a server-side scripting language.",
        "34. Swift Programming",
        "Learn the basics of Swift, a general-purpose, multi-paradigm programming language.",
        "35. Typescript Programming",
        "Learn the basics of Typescript, a high-level programming language.",
        "36. MATLAB Programming",
        "Learn the basics of MATLAB, a high-level programming language.",
        "37. Carbon Programming",
        "Learn the basics of Carbon, a programming language designed for system programming.",
        "38. Nim Programming",
        "Learn the basics of Nim, a statically typed, compiled programming language.",
        "39. Crystal Programming",
        "Learn the basics of Crystal, a programming language with Ruby-like syntax.",
        "40. Terminal Commands",
        "Learn the basics of terminal commands, including file management and process management.",
    ]
    
    # Display the main menu with a title and creator information
    
    print("Magnum Opus Coding Dungeon:\n")
    print("Created by Satan with Love\n")
    print("Choose Your Destiny:\n\n\n")
    for language in languages:
        print(language)
        
# Display the menu and wait for user input        

def display_submenu(language):
    topics = {
        "AI Programming": ["Basics", "Machine Learning", "Deep Learning", "Natural Language Processing", "Go Back"],
        "Python": ["Basics", "OOP", "Web Development", "Data Science", "Advanced", "Go Back"],
        "Fortran": ["Basics", "Numerical Methods", "Scientific Computing", "Go Back"],
        "COBOL": ["Basics", "Business Applications", "Data Processing", "Go Back"],
        "Lisp": ["Basics", "Functional Programming", "Artificial Intelligence", "Macros", "Go Back"],
        "Mojo": ["Basics", "High-Performance Computing", "Machine Learning", "Computer Vision", "Go Back"],
        "R": ["Basics", "Data Analysis", "Visualization", "Machine Learning", "Go Back"],
        "Julia": ["Basics", "Data Science", "Machine Learning", "Go Back"],
        "Haskell": ["Basics", "Functional Programming", "Type Classes", "Go Back"],
        "Scala": ["Basics", "Functional Programming", "Akka", "Go Back"],
        "Elixir": ["Basics", "Concurrency", "Phoenix Framework", "Go Back"],
        "Erlang": ["Basics", "Concurrency", "Distributed Systems", "Go Back"],
        "F#": ["Basics", "Functional Programming", "Data Science", "Go Back"],
        "Kotlin": ["Basics", "Android Development", "Coroutines", "Go Back"],
        "Rust": ["Basics", "Memory Safety", "Concurrency", "Go Back"],
        "Java": ["Basics", "OOP", "Spring Framework", "Android Development", "Go Back"],
        "C++": ["Basics", "OOP", "STL", "Game Development", "Go Back"],
        "C#": ["Basics", "OOP", "Unity Development", "ASP.NET", "Go Back"],
        "C": ["Basics", "Pointers", "Data Structures", "Embedded Systems", "Go Back"],
        "Assembly": ["Basics", "Registers", "Memory Management", "Go Back"],
        "JavaScript": ["Basics", "DOM Manipulation", "Node.js", "React.js", "Go Back"],
        "HTML": ["Basics", "Forms", "SEO", "Canvas", "Go Back"],
        "XML": ["Basics", "Schemas", "XPath", "XSLT", "Go Back"],
        "CSS": ["Basics", "Flexbox", "Grid", "Animations", "Go Back"],
        "Ruby": ["Basics", "Rails", "Metaprogramming", "Go Back"],
        "Lua": ["Basics", "Game Development", "Scripting", "Go Back"],
        "Shell Scripting": ["Basics", "File Management", "Process Management", "Go Back"],
        "Dart": ["Basics", "Flutter Development", "Asynchronous Programming", "Go Back"],
        "Flutter": ["Basics", "Widgets", "State Management", "Go Back"],
        "Go": ["Basics", "Concurrency", "Web Development", "Go Back"],
        "Perl": ["Basics", "Text Processing", "Web Development", "Go Back"],
        "SQL": ["Basics", "Joins", "Stored Procedures", "Database Design", "Go Back"],
        "PHP": ["Basics", "Web Development", "Laravel", "Go Back"],
        "Swift": ["Basics", "iOS Development", "SwiftUI", "Go Back"],
        "Typescript": ["Basics", "Angular", "Node.js", "Go Back"],
        "MATLAB": ["Basics", "Data Analysis", "Simulink", "Go Back"],
        "Carbon": ["Basics", "System Programming", "Concurrency", "Go Back"],
        "Nim": ["Basics", "Web Development", "Concurrency", "Go Back"],
        "Crystal": ["Basics", "Web Development", "Concurrency", "Go Back"],
        "Terminal": ["Commands", "Scripting", "Go Back"]
    }
    
    print(f"\nTopics for {language}:\n")
    for i, topic in enumerate(topics.get(language, ["Go Back"]), start=1):
        print(f"{i}. {topic}")
        
# Display the topic details based on user selection        

def display_topic_details(language, topic):
    details = {
        "AI Programming": {
            "Basics": (
                "Learn the fundamentals of AI programming, including algorithms and data structures.\n\n"
                "AI programming involves using algorithms to solve problems and make decisions based on data.\n\n"
                "AI programming can be done using various programming languages, including Python, Java, and C++.\n\n"
                "Many AI libraries and frameworks are available, such as TensorFlow, PyTorch, and scikit-learn.\n\n"
                "Models are available for download from Hugging Face, TensorFlow Hub, and other repositories.\n\n"
                "Example:\n"
                "```python\n\n"
                "def binary_search(arr, target):\n"
                "    left, right = 0, len(arr) - 1\n"
                "    while left <= right:\n"
                "        mid = (left + right) // 2\n"
                "        if arr[mid] == target:\n"
                "            return mid\n"
                "        elif arr[mid] < target:\n"
                "            left = mid + 1\n"
                "        else:\n"
                "            right = mid - 1\n"
                "    return -1\n\n"
                "# This function performs a binary search on a sorted array.\n"
                "```\n\n"
                "Example:\n"
                "'''java\n\n"
                "public class BinarySearch {\n"
                "    public static int binarySearch(int[] arr, int target) {\n"
                "        int left = 0, right = arr.length - 1;\n"
                "        while (left <= right) {\n"
                "            int mid = (left + right) / 2;\n"
                "            if (arr[mid] == target) {\n"
                "                return mid;\n"
                "            } else if (arr[mid] < target) {\n"
                "                left = mid + 1;\n"
                "            } else {\n"
                "                right = mid - 1;\n"
                "            }\n"
                "        }\n"
                "        return -1;\n"
                "    }\n"
                "}\n\n"
                "# This function performs a binary search on a sorted array.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "def quicksort(arr):\n"
                "    if len(arr) <= 1:\n"
                "        return arr\n"
                "    pivot = arr[len(arr) // 2]\n"
                "    left = [x for x in arr if x < pivot]\n"
                "    middle = [x for x in arr if x == pivot]\n"
                "    right = [x for x in arr if x > pivot]\n"
                "    return quicksort(left) + middle + quicksort(right)\n\n"
                "# This function sorts an array using the quicksort algorithm.\n"
                "```\n\n"
                "Example:\n"
                "'''c++\n\n"
                "#include <iostream>\n"
                "#include <vector>\n\n"
                "using namespace std;\n\n"
                "vector<int> quicksort(vector<int> arr) {\n"
                "    if (arr.size() <= 1) {\n"
                "        return arr;\n"
                "    }\n"
                "    int pivot = arr[arr.size() / 2];\n"
                "    vector<int> left, middle, right;\n"
                "    for (int x : arr) {\n"
                "        if (x < pivot) {\n"
                "            left.push_back(x);\n"
                "        } else if (x == pivot) {\n"
                "            middle.push_back(x);\n"
                "        } else {\n"
                "            right.push_back(x);\n"
                "        }\n"
                "    }\n"
                "    vector<int> result;\n"
                "    result.reserve(left.size() + middle.size() + right.size());\n"
                "    result.insert(result.end(), left.begin(), left.end());\n"
                "    result.insert(result.end(), middle.begin(), middle.end());\n"
                "    result.insert(result.end(), right.begin(), right.end());\n"
                "    return result;\n"
                "}\n\n"
                "# This function sorts an array using the quicksort algorithm.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "def factorial(n):\n"
                "    if n == 0:\n"
                "        return 1\n"
                "    else:\n"
                "        return n * factorial(n - 1)\n\n"
                "# This function calculates the factorial of a number recursively.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "def fibonacci(n):\n"
                "    if n <= 0:\n"
                "        return 0\n"
                "    elif n == 1:\n"
                "        return 1\n"
                "    else:\n"
                "        return fibonacci(n - 1) + fibonacci(n - 2)\n\n"
                "# This function calculates the nth Fibonacci number recursively.\n"
                "```\n"
            ),
            "Machine Learning": (
                "Explore machine learning concepts, including supervised and unsupervised learning.\n\n"
                "Machine learning is a subset of AI that focuses on building systems that learn from data.\n\n"
                "Supervised learning involves training a model on labeled data, while unsupervised learning involves finding patterns in unlabeled data.\n\n"
                "Common algorithms include linear regression, decision trees, and clustering algorithms.\n\n"
                "Example:\n"
                "'''java\n\n"
                "import weka.classifiers.Classifier;\n"
                "import weka.classifiers.trees.J48;\n"
                "import weka.core.Instances;\n"
                "import weka.core.converters.ConverterUtils.DataSource;\n\n"
                "public class DecisionTreeExample {\n"
                "    public static void main(String[] args) throws Exception {\n"
                "        // Load dataset\n"
                "        DataSource source = new DataSource(\"data.arff\");\n"
                "        Instances data = source.getDataSet();\n"
                "        if (data.classIndex() == -1) {\n"
                "            data.setClassIndex(data.numAttributes() - 1);\n"
                "        }\n\n"
                "        // Create a decision tree classifier\n"
                "        Classifier classifier = new J48();\n"
                "        classifier.buildClassifier(data);\n\n"
                "        // Print the model\n"
                "        System.out.println(classifier);\n"
                "    }\n"
                "}\n\n"
                "# This code builds a decision tree classifier using Weka library.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "from sklearn.linear_model import LinearRegression\n\n"
                "# Create a linear regression model\n"
                "model = LinearRegression()\n"
                "# Fit the model to the data\n"
                "# model.fit(X_train, y_train)\n"
                "# Make predictions\n"
                "# predictions = model.predict(X_test)\n"
                "# This code performs linear regression using scikit-learn library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from sklearn.cluster import KMeans\n\n"
                "# Create a KMeans clustering model\n"
                "model = KMeans(n_clusters=3)\n"
                "# Fit the model to the data\n"
                "# model.fit(X)\n"
                "# Get cluster labels\n"
                "# labels = model.labels_\n"
                "# This code performs KMeans clustering using scikit-learn library.\n"
                "```\n\n"
                "Example:\n"
                "'''java\n\n"
                "import org.apache.commons.math3.stat.regression.SimpleRegression;\n\n"
                "public class LinearRegressionExample {\n"
                "    public static void main(String[] args) {\n"
                "        SimpleRegression regression = new SimpleRegression();\n"
                "        double[][] data = {{1, 2}, {2, 3}, {3, 5}};\n"
                "        for (double[] point : data) {\n"
                "            regression.addData(point[0], point[1]);\n"
                "        }\n"
                "        double slope = regression.getSlope();\n"
                "        double intercept = regression.getIntercept();\n"
                "        System.out.println(\"Slope: \" + slope);\n"
                "        System.out.println(\"Intercept: \" + intercept);\n"
                "    }\n"
                "}\n\n"
                "# This code performs linear regression using Apache Commons Math library.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "from sklearn.ensemble import RandomForestClassifier\n\n"
                "# Create a random forest classifier\n"
                "model = RandomForestClassifier(n_estimators=100)\n"
                "# Fit the model to the data\n"
                "# model.fit(X_train, y_train)\n"
                "# Make predictions\n"
                "# predictions = model.predict(X_test)\n"
                "# This code performs random forest classification using scikit-learn library.\n"
                "```\n\n"
                "Example:\n"
                "'''c++\n\n"
                "#include <iostream>\n"
                "#include <vector>\n"
                "#include <mlpack/core.hpp>\n"
                "#include <mlpack/methods/linear_regression/linear_regression.hpp>\n\n"
                "using namespace std;\n"
                "using namespace mlpack;\n"
                "using namespace mlpack::regression;\n\n"
                "int main() {\n"
                "    // Load data\n"
                "    arma::mat X;\n"
                "    arma::rowvec y;\n"
                "    data::Load(\"data.csv\", X);\n"
                "    data::Load(\"labels.csv\", y);\n\n"
                "    // Create a linear regression model\n"
                "    LinearRegression lr(X, y);\n\n"
                "    // Make predictions\n"
                "    arma::rowvec predictions;\n"
                "    lr.Predict(X, predictions);\n\n"
                "    // Print predictions\n"
                "    cout << \"Predictions: \" << predictions << endl;\n"
                "    return 0;\n"
                "}\n\n"
                "# This code performs linear regression using mlpack library.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "from sklearn.svm import SVC\n\n"
                "# Create a support vector classifier\n"
                "model = SVC(kernel='linear')\n"
                "# Fit the model to the data\n"
                "# model.fit(X_train, y_train)\n"
                "# Make predictions\n"
                "# predictions = model.predict(X_test)\n"
                "# This code performs support vector classification using scikit-learn library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from sklearn.tree import DecisionTreeClassifier\n\n"
                "# Create a decision tree classifier\n"
                "model = DecisionTreeClassifier()\n"
                "# Fit the model to the data\n"
                "# model.fit(X_train, y_train)\n"
                "# Make predictions\n"
                "# predictions = model.predict(X_test)\n"
                "# This code performs decision tree classification using scikit-learn library.\n"
                "```\n\n"
                "Example:\n"
                "'''c++\n\n"
                "#include <iostream>\n"
                "#include <vector>\n"
                "#include <mlpack/core.hpp>\n"
                "#include <mlpack/methods/kmeans/kmeans.hpp>\n\n"
                "using namespace std;\n"
                "using namespace mlpack;\n"
                "using namespace mlpack::kmeans;\n\n"
                "int main() {\n"
                "    // Load data\n"
                "    arma::mat data;\n"
                "    data::Load(\"data.csv\", data);\n\n"
                "    // Create KMeans model\n"
                "    KMeans kmeans;\n"
                "    arma::Row<size_t> assignments;\n"
                "    arma::mat centroids;\n\n"
                "    // Fit the model to the data\n"
                "    kmeans.Cluster(data, 3, assignments, centroids);\n\n"
                "    // Print cluster assignments\n"
                "    cout << \"Cluster assignments: \" << assignments << endl;\n"
                "    cout << \"Centroids: \" << centroids << endl;\n"
                "    return 0;\n"
                "}\n\n"
                "# This code performs KMeans clustering using mlpack library.\n"
                "'''\n"
            ),
            "Deep Learning": (
                "Understand deep learning concepts, including neural networks and frameworks like TensorFlow and PyTorch.\n\n"
                "Deep learning is a subset of machine learning that uses neural networks with many layers.\n\n"
                "Neural networks are composed of layers of interconnected nodes (neurons) that process data.\n\n"
                "Common deep learning frameworks include TensorFlow, PyTorch, and Keras.\n\n"
                "Example:\n"
                "'''java\n\n"
                "import org.tensorflow.*;\n"
                "import org.tensorflow.op.*;\n"
                "import org.tensorflow.op.core.*;\n\n"
                "public class SimpleNN {\n"
                "    public static void main(String[] args) {\n"
                "        try (Graph graph = new Graph()) {\n"
                "            Session session = new Session(graph);\n"
                "            // Define the model\n"
                "            Output<Float> x = Constant.create(graph, 0.0f);\n"
                "            Output<Float> y = Constant.create(graph, 0.0f);\n"
                "            Output<Float> z = graph.opBuilder(\"Add\", \"z\")\n"
                "                    .addInput(x)\n"
                "                    .addInput(y)\n"
                "                    .build()\n"
                "                    .output(0);\n"
                "            // Run the model\n"
                "            Tensor<Float> result = session.runner()\n"
                "                    .fetch(z)\n"
                "                    .run().get(0);\n"
                "            System.out.println(\"Result: \" + result.floatValue());\n"
                "        }\n"
                "    }\n"
                "}\n\n"
                "# This code defines a simple neural network model using TensorFlow Java API.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "import tensorflow as tf\n\n"
                "# Create a simple neural network model\n"
                "model = tf.keras.models.Sequential([\n"
                "    tf.keras.layers.Dense(64, activation='relu'),\n"
                "    tf.keras.layers.Dense(10, activation='softmax')\n"
                "])\n\n"
                "# Compile the model\n"
                "# model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n"
                "# Train the model\n"
                "# model.fit(X_train, y_train, epochs=5)\n"
                "# This code defines a simple neural network model using TensorFlow.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import torch\n"
                "import torch.nn as nn\n\n"
                "# Create a simple neural network model\n"
                "class SimpleNN(nn.Module):\n"
                "    def __init__(self):\n"
                "        super(SimpleNN, self).__init__()\n"
                "        self.fc1 = nn.Linear(10, 64)\n"
                "        self.fc2 = nn.Linear(64, 10)\n\n"
                "    def forward(self, x):\n"
                "        x = torch.relu(self.fc1(x))\n"
                "        x = self.fc2(x)\n"
                "        return x\n\n"
                "# Create an instance of the model\n"
                "model = SimpleNN()\n\n"
                "# Define a loss function and optimizer\n"
                "# criterion = nn.CrossEntropyLoss()\n"
                "# optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\n"
                "# Train the model\n"
                "# for epoch in range(5):\n"
                "#     optimizer.zero_grad()\n"
                "#     outputs = model(X_train)\n"
                "#     loss = criterion(outputs, y_train)\n"
                "#     loss.backward()\n"
                "#     optimizer.step()\n"
                "# This code defines a simple neural network model using PyTorch.\n"
                "```\n\n"
                "Example:\n"
                "'''c++\n\n"
                "#include <torch/torch.h>\n\n"
                "struct SimpleNN : torch::nn::Module {\n"
                "    SimpleNN() {\n"
                "        fc1 = register_module(\"fc1\", torch::nn::Linear(10, 64));\n"
                "        fc2 = register_module(\"fc2\", torch::nn::Linear(64, 10));\n"
                "    }\n\n"
                "    torch::Tensor forward(torch::Tensor x) {\n"
                "        x = torch::relu(fc1->forward(x));\n"
                "        x = fc2->forward(x);\n"
                "        return x;\n"
                "    }\n\n"
                "    torch::nn::Linear fc1, fc2;\n"
                "};\n\n"
                "int main() {\n"
                "    // Create an instance of the model\n"
                "    SimpleNN model;\n\n"
                "    // Define a loss function and optimizer\n"
                "    torch::nn::CrossEntropyLoss criterion;\n"
                "    torch::optim::Adam optimizer(model.parameters(), torch::optim::AdamOptions(0.001));\n\n"
                "    // Train the model\n"
                "    for (int epoch = 0; epoch < 5; ++epoch) {\n"
                "        optimizer.zero_grad();\n"
                "        auto outputs = model.forward(X_train);\n"
                "        auto loss = criterion(outputs, y_train);\n"
                "        loss.backward();\n"
                "        optimizer.step();\n"
                "    }\n"
                "    return 0;\n"
                "}\n\n"
                "# This code defines a simple neural network model using LibTorch (C++ API for PyTorch).\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "import torch\n"
                "import torch.nn as nn\n\n"
                "# Create a simple convolutional neural network model\n"
                "class SimpleCNN(nn.Module):\n"
                "    def __init__(self):\n"
                "        super(SimpleCNN, self).__init__()\n"
                "        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)\n"
                "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)\n"
                "        self.fc1 = nn.Linear(32 * 14 * 14, 128)\n"
                "        self.fc2 = nn.Linear(128, 10)\n\n"
                "    def forward(self, x):\n"
                "        x = self.pool(torch.relu(self.conv1(x)))\n"
                "        x = x.view(-1, 32 * 14 * 14)\n"
                "        x = torch.relu(self.fc1(x))\n"
                "        x = self.fc2(x)\n"
                "        return x\n\n"
                "# Create an instance of the model\n"
                "model = SimpleCNN()\n\n"
                "# Define a loss function and optimizer\n"
                "# criterion = nn.CrossEntropyLoss()\n"
                "# optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\n"
                "# Train the model\n"
                "# for epoch in range(5):\n"
                "#     optimizer.zero_grad()\n"
                "#     outputs = model(X_train)\n"
                "#     loss = criterion(outputs, y_train)\n"
                "#     loss.backward()\n"
                "#     optimizer.step()\n"
                "# This code defines a simple convolutional neural network model using PyTorch.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import torch\n"
                "import torch.nn as nn\n\n"
                "# Create a simple recurrent neural network model\n"
                "class SimpleRNN(nn.Module):\n"
                "    def __init__(self):\n"
                "        super(SimpleRNN, self).__init__()\n"
                "        self.rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=1)\n"
                "        self.fc = nn.Linear(20, 1)\n\n"
                "    def forward(self, x):\n"
                "        x, _ = self.rnn(x)\n"
                "        x = self.fc(x)\n"
                "        return x\n\n"
                "# Create an instance of the model\n"
                "model = SimpleRNN()\n\n"
                "# Define a loss function and optimizer\n"
                "# criterion = nn.MSELoss()\n"
                "# optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\n"
                "# Train the model\n"
                "# for epoch in range(5):\n"
                "#     optimizer.zero_grad()\n"
                "#     outputs = model(X_train)\n"
                "#     loss = criterion(outputs, y_train)\n"
                "#     loss.backward()\n"
                "#     optimizer.step()\n"
                "# This code defines a simple recurrent neural network model using PyTorch.\n"
                "```\n"
            ),
            "Natural Language Processing": (
                "Learn about NLP techniques, including text processing and sentiment analysis.\n\n"
                "Natural Language Processing (NLP) is a field of AI that focuses on the interaction between computers and human language.\n\n"
                "Models like BERT and GPT-3 are used for various NLP tasks.\n\n"
                "Usage of libraries like NLTK, spaCy, and Hugging Face Transformers is common in NLP.\n\n"
                "Example:\n"
                "```python\n\n"
                "import spacy\n\n"
                "# Load the English NLP model\n"
                "nlp = spacy.load('en_core_web_sm')\n\n"
                "# Process a text\n"
                "text = \"Hello, world!\"\n"
                "doc = nlp(text)\n\n"
                "# Print the tokens\n"
                "for token in doc:\n"
                "    print(token.text)\n"
                "# Output: Hello, world!\n"
                "# This code processes a text using spaCy library.\n"
                "```\n\n"
                "Example:\n"
                "'''java\n\n"
                "import opennlp.tools.sentdetect.*;\n"
                "import opennlp.tools.tokenize.*;\n\n"
                "public class NLPExample {\n"
                "    public static void main(String[] args) throws Exception {\n"
                "        // Load the sentence detector model\n"
                "        InputStream modelIn = new FileInputStream(\"en-sent.bin\");\n"
                "        SentenceModel model = new SentenceModel(modelIn);\n"
                "        SentenceDetectorME sentenceDetector = new SentenceDetectorME(model);\n\n"
                "        // Detect sentences\n"
                "        String text = \"Hello, world! This is a test.\";\n"
                "        String[] sentences = sentenceDetector.sentDetect(text);\n\n"
                "        // Print the sentences\n"
                "        for (String sentence : sentences) {\n"
                "            System.out.println(sentence);\n"
                "        }\n"
                "    }\n"
                "}\n\n"
                "# This code detects sentences in a text using OpenNLP library.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "from nltk.tokenize import word_tokenize\n\n"
                "# Tokenize a sentence into words\n"
                "sentence = \"Hello, world!\"\n"
                "tokens = word_tokenize(sentence)\n"
                "print(tokens)\n"
                "# Output: ['Hello', ',', 'world', '!']\n"
                "# This code tokenizes a sentence into words using NLTK library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from textblob import TextBlob\n\n"
                "# Perform sentiment analysis\n"
                "text = \"I love programming!\"\n"
                "blob = TextBlob(text)\n"
                "print(blob.sentiment)\n"
                "# Output: Sentiment(polarity=0.5, subjectivity=0.6)\n"
                "# This code performs sentiment analysis using TextBlob library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from transformers import pipeline\n\n"
                "# Load a pre-trained model for sentiment analysis\n"
                "classifier = pipeline('sentiment-analysis')\n\n"
                "# Perform sentiment analysis\n"
                "result = classifier(\"I love programming!\")\n"
                "print(result)\n"
                "# Output: [{'label': 'POSITIVE', 'score': 0.9998}]\n"
                "# This code performs sentiment analysis using Hugging Face Transformers library.\n"
                "```\n\n"
                "Example:\n"
                "'''java\n\n"
                "import opennlp.tools.sentdetect.*;\n"
                "import opennlp.tools.tokenize.*;\n\n"
                "public class NLPExample {\n"
                "    public static void main(String[] args) throws Exception {\n"
                "        // Load the tokenizer model\n"
                "        InputStream modelIn = new FileInputStream(\"en-token.bin\");\n"
                "        TokenizerModel model = new TokenizerModel(modelIn);\n"
                "        Tokenizer tokenizer = new TokenizerME(model);\n\n"
                "        // Tokenize a sentence\n"
                "        String sentence = \"Hello, world!\";\n"
                "        String[] tokens = tokenizer.tokenize(sentence);\n\n"
                "        // Print the tokens\n"
                "        for (String token : tokens) {\n"
                "            System.out.println(token);\n"
                "        }\n"
                "    }\n"
                "}\n\n"
                "# This code tokenizes a sentence into words using OpenNLP library.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "from transformers import GPT2LMHeadModel, GPT2Tokenizer\n\n"
                "# Load pre-trained model and tokenizer\n"
                "tokenizer = GPT2Tokenizer.from_pretrained('gpt2')\n"
                "model = GPT2LMHeadModel.from_pretrained('gpt2')\n\n"
                "# Encode input text\n"
                "input_text = \"Once upon a time\"\n"
                "input_ids = tokenizer.encode(input_text, return_tensors='pt')\n\n"
                "# Generate text\n"
                "output = model.generate(input_ids, max_length=50, num_return_sequences=1)\n\n"
                "# Decode generated text\n"
                "output_text = tokenizer.decode(output[0], skip_special_tokens=True)\n"
                "print(output_text)\n"
                "# Output: Generated text based on the input prompt\n"
                "# This code generates text using GPT-2 model from Hugging Face Transformers library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from nltk.corpus import stopwords\n"
                "from nltk.tokenize import word_tokenize\n\n"
                "# Remove stop words from a sentence\n"
                "sentence = \"This is a sample sentence.\"\n"
                "stop_words = set(stopwords.words('english'))\n"
                "tokens = word_tokenize(sentence)\n"
                "filtered_tokens = [word for word in tokens if word.lower() not in stop_words]\n"
                "print(filtered_tokens)\n"
                "# Output: ['sample', 'sentence', '.']\n"
                "# This code removes stop words from a sentence using NLTK library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from nltk.stem import PorterStemmer\n\n"
                "# Perform stemming on a list of words\n"
                "words = [\"running\", \"jumps\", \"easily\"]\n"
                "stemmer = PorterStemmer()\n"
                "stemmed_words = [stemmer.stem(word) for word in words]\n"
                "print(stemmed_words)\n"
                "# Output: ['run', 'jump', 'easili']\n"
                "# This code performs stemming on a list of words using NLTK library.\n"
                "```\n\n"
                "Example:\n"
                "'''c++\n\n"
                "#include <iostream>\n"
                "#include <string>\n"
                "#include <vector>\n"
                "#include <algorithm>\n\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    // Tokenize a sentence into words\n"
                "    string sentence = \"Hello, world!\";\n"
                "    vector<string> tokens;\n"
                "    string delimiter = \" \";\n"
                "    size_t pos = 0;\n"
                "    while ((pos = sentence.find(delimiter)) != string::npos) {\n"
                "        tokens.push_back(sentence.substr(0, pos));\n"
                "        sentence.erase(0, pos + delimiter.length());\n"
                "    }\n"
                "    tokens.push_back(sentence);\n\n"
                "    // Print the tokens\n"
                "    for (const string& token : tokens) {\n"
                "        cout << token << endl;\n"
                "    }\n"
                "    return 0;\n"
                "}\n\n"
                "# This code tokenizes a sentence into words using C++.\n"
                "'''\n\n"
                "Example:\n"
                "```python\n\n"
                "from nltk import pos_tag\n"
                "from nltk.tokenize import word_tokenize\n\n"
                "# Perform part-of-speech tagging\n"
                "sentence = \"The quick brown fox jumps over the lazy dog.\"\n"
                "tokens = word_tokenize(sentence)\n"
                "tagged_tokens = pos_tag(tokens)\n"
                "print(tagged_tokens)\n"
                "# Output: [('The', 'DT'), ('quick', 'JJ'), ('brown', 'NN'), ('fox', 'NN'), ('jumps', 'VBZ'), ('over', 'IN'), ('the', 'DT'), ('lazy', 'JJ'), ('dog', 'NN')]\n"
                "# This code performs part-of-speech tagging using NLTK library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from nltk import ne_chunk\n"
                "from nltk.tokenize import word_tokenize\n"
                "from nltk import pos_tag\n\n"
                "# Perform named entity recognition\n"
                "sentence = \"Barack Obama was the 44th President of the United States.\"\n"
                "tokens = word_tokenize(sentence)\n"
                "tagged_tokens = pos_tag(tokens)\n"
                "named_entities = ne_chunk(tagged_tokens)\n"
                "print(named_entities)\n"
                "# Output: (S (PERSON Barack/NNP Obama/NNP) was/VBD the/DT 44th/JJ President/NNP of/IN the/DT United/NNP States/NNPS ./.)\n"
                "# This code performs named entity recognition using NLTK library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from nltk import ngrams\n\n"
                "# Generate n-grams from a sentence\n"
                "sentence = \"I love programming.\"\n"
                "tokens = word_tokenize(sentence)\n"
                "bigrams = list(ngrams(tokens, 2))\n"
                "print(bigrams)\n"
                "# Output: [('I', 'love'), ('love', 'programming'), ('programming', '.')] \n"
                "# This code generates bigrams from a sentence using NLTK library.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "from transformers import AutoModelForCasualLM, AutoTokenizer\n\n"
                "# Load pre-trained model and tokenizer\n"
                "tokenizer = AutoTokenizer.from_pretrained('gpt2')\n"
                "model = AutoModelForCasualLM.from_pretrained('gpt2')\n\n"
                "# Encode input text\n"
                "input_text = \"Once upon a time\"\n"
                "input_ids = tokenizer.encode(input_text, return_tensors='pt')\n\n"
                "# Generate text\n"
                "output = model.generate(input_ids, max_length=50, num_return_sequences=1)\n\n"
                "# Decode generated text\n"
                "output_text = tokenizer.decode(output[0], skip_special_tokens=True)\n"
                "print(output_text)\n"
                "# Output: Generated text based on the input prompt\n"
                "# This code generates text using GPT-2 model from Hugging Face Transformers library.\n"
                "```\n"
            )
        },
        "Python": {
            "Basics": (
                "Learn about Python syntax, variables, data types, and basic operations.\n\n"
                "Variable declaration and basic operations:\n\n"
                "In Python, you can declare variables and perform operations like addition, subtraction, etc.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the equals sign (=).\n\n"
                "There are no explicit data types in Python, as it is dynamically typed.\n\n"
                "Comments in Python start with a # symbol and continue to the end of the line.\n\n"
                "To begin coding in Python, first, you need to install Python on your system.\n\n"
                "You can download Python from the official website: https://www.python.org/downloads/\n\n"
                "Once installed, you can write Python code in a text editor or an Integrated Development Environment (IDE) like PyCharm, Visual Studio Code, or Jupyter Notebook.\n\n"
                "Example:\n"
                "```python\n\n"
                "x = 10\n"
                "y = 20\n"
                "print(f'The sum is: {x + y}')\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "name = 'Satan'\n"
                "print(f'Hello, {name}!')\n"
                "# Output: Hello, Satan!\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "input_value = input('Enter a number: ')\n"
                "print(f'You entered: {input_value}')\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "To print a variable, you can use the print() function. You can also use f-strings (formatted string literals) to include variables in strings.\n\n"
                "In Python, you can use the input() function to read user input from the console.\n\n"
                "The input() function returns the input as a string, so you may need to convert it to the desired type (e.g., int, float) using type conversion functions like int() or float().\n\n"
                "Example:\n"
                "```python\n\n"
                "player_name = input('Enter your name: ')\n"
                "print(f'Welcome, {player_name}!')\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "age = int(input('Enter your age: '))\n"
                "print(f'You are {age} years old.')\n"
                "# Output: You are <user_input> years old.\n"
                "```\n"
            ),
            "OOP": (
                "Understand Object-Oriented Programming in Python, including classes, objects, inheritance, and polymorphism.\n\n"
                "In Python, you can define a class using the 'class' keyword. A class is a blueprint for creating objects.\n\n"
                "An object is an instance of a class. You can create an object by calling the class as if it were a function.\n\n"
                "Inheritance allows you to create a new class that is based on an existing class. The new class inherits attributes and methods from the existing class.\n\n"
                "Polymorphism allows you to define methods in the child class with the same name as those in the parent class.\n\n"
                "Example:\n"
                "```python\n\n"
                "class Animal:\n"
                "    def __init__(self, name):\n"
                "        self.name = name\n"
                "    def speak(self):\n"
                "        return f'{self.name} makes a sound.'\n\n"
                "class Dog(Animal):\n"
                "    def speak(self):\n"
                "        return f'{self.name} barks.'\n\n"
                "dog = Dog('Buddy')\n"
                "print(dog.speak())\n"
                "# Output: Buddy barks.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "class Richie:\n"
                "    def __init__(self, name):\n"
                "        self.name = name\n"
                "    def greet(self):\n"
                "        return f'Hello, {self.name}!'\n\n"
                "class Sigma(Richie):\n"
                "    def greet(self):\n"
                "        return f'Sigma {self.name} is here!'\n\n"
                "hero = Sigma('Richie')\n"
                "print(sigma.greet())\n"
                "# Output: Sigma Richie is here!\n"
                "```\n"
                "Example:\n"
                "```python\n\n"
                "class First:\n"
                "    def __init__(self, name):\n"
                "        self.name = name\n"
                "    def display(self):\n"
                "        return f'Hello, {self.name}!'\n\n"
                "class Second(First):\n"
                "    def display(self):\n"
                "        return f'Second class says: Hello, {self.name}!'\n\n"
                "obj = Second('Python')\n"
                "print(obj.display())\n"
                "# Output: Second class says: Hello, Python!\n"
                "```\n"
            ),
            "Web Development": (
                "Explore frameworks like Kivy, Django and Flask for building web applications.\n\n"
                "Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design.\n\n"
                "Flask is a lightweight WSGI web application framework in Python. It is designed with simplicity and flexibility in mind.\n\n"
                "Kivy is an open-source Python library for developing multitouch applications.\n\n"
                "Example (Flask):\n"
                "```python\n\n"
                "from flask import Flask\n"
                "app = Flask(__name__)\n\n"
                "@app.route('/')\n"
                "def home():\n"
                "    return 'Welcome to Flask!'\n\n"
                "if __name__ == '__main__':\n"
                "    app.run(debug=True)\n"
                "# Run this script and visit http://127.0.0.1:5000/ in your browser.\n"
                "```\n\n"
                "Example (Django):\n"
                "```python\n\n"
                "from django.http import HttpResponse\n\n"
                "def home(request):\n"
                "    return HttpResponse('Welcome to Django!')\n\n"
                "# In your Django project, add this view to your views.py file and map it to a URL in urls.py.\n"
                "```\n\n"
                "Example (Kivy):\n"
                "```python\n\n"
                "from kivy.app import App\n"
                "from kivy.uix.label import Label\n\n"
                "class MyApp(App):\n"
                "    def build(self):\n"
                "        return Label(text='Hello, Kivy!')\n\n"
                "if __name__ == '__main__':\n"
                "    MyApp().run()\n"
                "# This will create a simple Kivy application with a label.\n"
                "```\n\n"
                "Example (Django):\n"
                "```python\n\n"
                "from django.shortcuts import render\n\n"
                "def home(request):\n"
                "    return render(request, 'home.html')\n\n"
                "# In your Django project, create a home.html template and map this view to a URL in urls.py.\n"
                "```\n\n"
                "Example (Dash):\n"
                "```python\n\n"
                "import dash\n"
                "import dash_core_components as dcc\n"
                "import dash_html_components as html\n\n"
                "app = dash.Dash(__name__)\n\n"
                "app.layout = html.Div(children=[\n"
                "    html.H1(children='Hello Dash'),\n"
                "    dcc.Graph(\n"
                "        id='example-graph',\n"
                "        figure={\n"
                "            'data': [\n"
                "                {'x': [1, 2, 3], 'y': [4, 5, 6], 'type': 'bar', 'name': 'SF'},\n"
                "                {'x': [1, 2, 3], 'y': [7, 8, 9], 'type': 'bar', 'name': 'Montréal'},\n"
                "            ],\n"
                "            'layout': {\n"
                "                'title': 'Dash Data Visualization'\n"
                "            }\n"
                "        }\n"
                "    )\n"
                "])\n\n"
                "if __name__ == '__main__':\n"
                "    app.run_server(debug=True)\n"
                "# This will create a simple Dash application with a bar chart.\n"
                "```\n\n"
                "Example (Pyramid):\n"
                "```python\n\n"
                "from pyramid.config import Configurator\n"
                "from pyramid.response import Response\n\n"
                "def hello_world(request):\n"
                "    return Response('Hello, Pyramid!')\n\n"
                "if __name__ == '__main__':\n"
                "    with Configurator() as config:\n"
                "        config.add_route('hello', '/')\n"
                "        config.scan()\n"
                "        app = config.make_wsgi_app()\n"
                "    from wsgiref.simple_server import make_server\n"
                "    server = make_server('host', 6543, app)\n"
                "    server.serve_forever()\n"
                "# This will create a simple Pyramid application that returns 'Hello, Pyramid!' when accessed.\n"
                "```\n\n"
                "Example (FastAPI):\n"
                "```python\n\n"
                "from fastapi import FastAPI\n\n"
                "app = FastAPI()\n\n"
                "@app.get('/')\n"
                "def read_root():\n"
                "    return {'Hello': 'World'}\n\n"
                "if __name__ == '__main__':\n"
                "    import uvicorn\n"
                "    uvicorn.run(app, host='host', port=8000)\n"
                "# This will create a simple FastAPI application that returns 'Hello, World' when accessed.\n"
                "```\n\n"
                "Example (Tornado):\n"
                "```python\n\n"
                "import tornado.ioloop\n"
                "import tornado.web\n\n"
                "class MainHandler(tornado.web.RequestHandler):\n"
                "    def get(self):\n"
                "        self.write('Hello, Tornado!')\n\n"
                "def make_app():\n"
                "    return tornado.web.Application([\n"
                "        (r'/', MainHandler),\n"
                "    ])\n\n"
                "if __name__ == '__main__':\n"
                "    app = make_app()\n"
                "    app.listen(8888)\n"
                "    tornado.ioloop.IOLoop.current().start()\n"
                "# This will create a simple Tornado application that returns 'Hello, Tornado!' when accessed.\n"
                "```\n\n"
                "Example (Bottle):\n"
                "```python\n\n"
                "from bottle import Bottle, run\n\n"
                "app = Bottle()\n\n"
                "@app.route('/')\n"
                "def home():\n"
                "    return 'Hello, Bottle!'\n\n"
                "if __name__ == '__main__':\n"
                "    run(app, host='host', port=8080)\n"
                "# This will create a simple Bottle application that returns 'Hello, Bottle!' when accessed.\n"
                "```\n\n"
                "Example (Falcon):\n"
                "```python\n\n"
                "import falcon\n\n"
                "class HelloWorld:\n"
                "    def on_get(self, req, resp):\n"
                "        resp.media = {'Hello': 'World'}\n\n"
                "app = falcon.App()\n"
                "app.add_route('/', HelloWorld())\n\n"
                "if __name__ == '__main__':\n"
                "    from wsgiref.simple_server import make_server\n"
                "    httpd = make_server('host', 8000, app)\n"
                "    httpd.serve_forever()\n"
                "# This will create a simple Falcon application that returns 'Hello, World' when accessed.\n"
                "```\n\n"
                "Example (CherryPy):\n"
                "```python\n\n"
                "import cherrypy\n\n"
                "class HelloWorld:\n"
                "    @cherrypy.expose\n"
                "    def index(self):\n"
                "        return 'Hello, CherryPy!'\n\n"
                "if __name__ == '__main__':\n"
                "    cherrypy.quickstart(HelloWorld())\n"
                "# This will create a simple CherryPy application that returns 'Hello, CherryPy!' when accessed.\n"
                "```\n\n"
                "Example (Sanic):\n"
                "```python\n\n"
                "from sanic import Sanic\n"
                "from sanic.response import json\n\n"
                "app = Sanic(__name__)\n\n"
                "@app.route('/')\n"
                "async def hello(request):\n"
                "    return json({'Hello': 'World'})\n\n"
                "if __name__ == '__main__':\n"
                "    app.run(host='host', port=8000)\n"
                "# This will create a simple Sanic application that returns 'Hello, World' when accessed.\n"
                "```\n\n"
                "Example (Tornado):\n"
                "```python\n\n"
                "import tornado.ioloop\n"
                "import tornado.web\n\n"
                "class MainHandler(tornado.web.RequestHandler):\n"
                "    def get(self):\n"
                "        self.write('Hello, Tornado!')\n\n"
                "def make_app():\n"
                "    return tornado.web.Application([\n"
                "        (r'/', MainHandler),\n"
                "    ])\n\n"
                "if __name__ == '__main__':\n"
                "    app = make_app()\n"
                "    app.listen(8888)\n"
                "    tornado.ioloop.IOLoop.current().start()\n"
                "# This will create a simple Tornado application that returns 'Hello, Tornado!' when accessed.\n"
                "```\n"
            ),
            "Data Science": (
                "Dive into libraries like NumPy, pandas, and matplotlib for data analysis and visualization.\n\n"
                "NumPy is a library for the Python programming language that supports large, multi-dimensional arrays and matrices.\n\n"
                "pandas is a fast, powerful, flexible, and easy-to-use open-source data analysis and manipulation tool.\n\n"
                "matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy.\n\n"
                "Example:\n"
                "```python\n\n"
                "import pandas as pd\n"
                "import matplotlib.pyplot as plt\n\n"
                "# Create a DataFrame\n"
                "data = {'Year': [2020, 2021, 2022], 'Sales': [100, 150, 200]}\n"
                "df = pd.DataFrame(data)\n\n"
                "# Plot the data\n"
                "plt.plot(df['Year'], df['Sales'], marker='o')\n"
                "plt.title('Yearly Sales')\n"
                "plt.xlabel('Year')\n"
                "plt.ylabel('Sales')\n"
                "plt.show()\n"
                "# This will display a line plot of the sales data.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import numpy as np\n"
                "import matplotlib.pyplot as plt\n\n"
                "# Create an array of x values\n"
                "x = np.linspace(0, 10, 100)\n"
                "# Create an array of y values\n"
                "y = np.sin(x)\n\n"
                "# Plot the data\n"
                "plt.plot(x, y)\n"
                "plt.title('Sine Wave')\n"
                "plt.xlabel('x')\n"
                "plt.ylabel('sin(x)')\n"
                "plt.grid()\n"
                "plt.show()\n"
                "# This will display a sine wave plot.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import pandas as pd\n"
                "import numpy as np\n\n"
                "# Create a DataFrame\n"
                "data = {'A': [1, 2, 3], 'B': [4, 5, 6]}\n"
                "df = pd.DataFrame(data)\n\n"
                "# Perform basic operations\n"
                "df['C'] = df['A'] + df['B']\n"
                "df['D'] = df['A'] * df['B']\n\n"
                "# Display the DataFrame\n"
                "print(df)\n"
                "# Output:\n"
                "#    A  B  C  D\n"
                "# 0  1  4  5  4\n"
                "# 1  2  5  7 10\n"
                "# 2  3  6  9 18\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import matplotlib.pyplot as plt\n"
                "import numpy as np\n\n"
                "# Create data\n"
                "x = np.linspace(0, 10, 100)\n"
                "y = np.sin(x)\n\n"
                "# Create a scatter plot\n"
                "plt.scatter(x, y, color='blue', marker='o')\n"
                "plt.title('Scatter Plot of Sine Function')\n"
                "plt.xlabel('x')\n"
                "plt.ylabel('sin(x)')\n"
                "plt.grid()\n"
                "plt.show()\n"
                "# This will display a scatter plot of the sine function.\n"
                "```\n"
            ),
            "Advanced": (
                "Learn about advanced topics like decorators, generators, and context managers.\n\n"
                "Decorators are a way to modify or enhance functions or methods without changing their code.\n\n"
                "Generators are a special type of iterator that allow you to iterate over a sequence of values without storing them in memory.\n\n"
                "Context managers are used to manage resources, such as file handling, in a clean and efficient way.\n\n"
                "Module and package management is essential for organizing your code and reusing it across different projects.\n\n"
                "Every Python file is a module, and you can create packages by organizing modules into directories.\n\n"
                "Behind every function is a magic method called __call__ that allows you to call the function as if it were an object.\n\n"
                "Example:\n"
                "```python\n\n"
                "def decorator_function(original_function):\n"
                "    def wrapper_function():\n"
                "        print('Wrapper executed before {}'.format(original_function.__name__))\n"
                "        return original_function()\n"
                "    return wrapper_function\n\n"
                "@decorator_function\n"
                "def display():\n"
                "    print('Display function executed')\n\n"
                "display()\n"
                "# Output: Wrapper executed before display\n"
                "#         Display function executed\n"
                "# This code demonstrates the use of decorators in Python.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "def generator_function():\n"
                "    yield 'Hello'\n"
                "    yield 'World'\n\n"
                "gen = generator_function()\n"
                "for value in gen:\n"
                "    print(value)\n"
                "# Output: Hello\n"
                "#         World\n"
                "# This code demonstrates the use of generators in Python.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "with open('file.txt', 'w') as file:\n"
                "    file.write('Hello, World!')\n\n"
                "# The file is automatically closed after the with block.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import os\n\n"
                "# Create a directory\n"
                "os.mkdir('my_directory')\n\n"
                "# List files in the directory\n"
                "files = os.listdir('my_directory')\n"
                "print(files)\n"
                "# Output: ['my_directory']\n"
                "# This code creates a directory and lists files in it using os module.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "class MyClass:\n"
                "    def __init__(self, name):\n"
                "        self.name = name\n"
                "    def __call__(self):\n"
                "        print(f'Hello, {self.name}!')\n\n"
                "obj = MyClass('Python')\n"
                "obj()\n"
                "# Output: Hello, Python!\n"
                "# This code demonstrates the use of __call__ magic method in a class.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import math\n\n"
                "# Calculate the square root of a number\n"
                "number = 16\n"
                "result = math.sqrt(number)\n"
                "print(f'The square root of {number} is {result}')\n"
                "# Output: The square root of 16 is 4.0\n"
                "# This code calculates the square root of a number using math module.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import random\n\n"
                "# Generate a random number between 1 and 10\n"
                "random_number = random.randint(1, 10)\n"
                "print(f'Random number: {random_number}')\n"
                "# Output: Random number: <random_number>\n"
                "# This code generates a random number using random module.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import multiprocessing\n\n"
                "# Run a function that counts the number of cores in the system\n"
                "def count_cores():\n"
                "    cores = multiprocessing.cpu_count()\n"
                "    print(f'Number of cores: {cores}')\n\n"
                "if __name__ == '__main__':\n"
                "    count_cores()\n"
                "# Output: Number of cores: <number_of_cores>\n"
                "# This code counts the number of CPU cores in the system using multiprocessing module.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import time\n\n"
                "# Measure the execution time of a function\n"
                "def long_running_function():\n"
                "    time.sleep(2)\n\n"
                "start_time = time.time()\n"
                "long_running_function()\n"
                "end_time = time.time()\n"
                "execution_time = end_time - start_time\n"
                "print(f'Execution time: {execution_time} seconds')\n"
                "# Output: Execution time: 2.0 seconds\n"
                "# This code measures the execution time of a function using time module.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import asyncio\n\n"
                "# Define an asynchronous function\n"
                "async def async_function():\n"
                "    await asyncio.sleep(1)\n"
                "    print('Asynchronous function executed')\n\n"
                "# Run the asynchronous function\n"
                "async def main():\n"
                "    await async_function()\n\n"
                "if __name__ == '__main__':\n"
                "    asyncio.run(main())\n"
                "# Output: Asynchronous function executed\n"
                "# This code demonstrates the use of asyncio module for asynchronous programming.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import threading\n\n"
                "# Define a function to run in a separate thread\n"
                "def thread_function():\n"
                "    print('Thread function executed')\n\n"
                "# Create a thread\n"
                "thread = threading.Thread(target=thread_function)\n"
                "# Start the thread\n"
                "thread.start()\n"
                "# Wait for the thread to finish\n"
                "thread.join()\n"
                "# Output: Thread function executed\n"
                "# This code demonstrates the use of threading module for multithreading.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import socket\n\n"
                "print(socket.socket)\n"
                "# Monkey patch example\n"
                "print('After monkey patch')\n"
                "from gevent import monkey\n"
                "monkey.patch_socket()\n"
                "print(socket.socket)\n\n"
                "import select\n"
                "print(select.select)\n"
                "monkey.patch_select()\n"
                "print('After monkey patch')\n"
                "print(select.select)\n"
                "# Output: <class 'socket._socketobject'>\n"
                "#         After monkey patch\n"
                "#         <class 'gevent.socket._socketobject'>\n"
                "#         <class 'select.select'>\n"
                "#         After monkey patch\n"
                "#         <class 'select.select'>\n"
                "# This code demonstrates the use of monkey patching in Python.\n"
                "```\n\n"
                "Example:\n"
                "```python\n\n"
                "import pytest\n\n"
                "# Define a simple function to test\n"
                "def add(a, b):\n"
                "    return a + b\n\n"
                "# Define a test function\n"
                "def test_add():\n"
                "    assert add(2, 3) == 5\n"
                "    assert add(-1, 1) == 0\n\n"
                "# Run the test\n"
                "if __name__ == '__main__':\n"
                "    pytest.main([__file__])\n"
                "# Output: 2 passed in 0.01s\n"
                "# This code demonstrates the use of pytest for testing in Python.\n"
                "```\n"
            )   
        },
        "Fortran": {
            "Basics": (
                "Learn Fortran syntax, variables, and basic programming constructs.\n\n"
                "In Fortran, you can declare variables using the implicit none statement.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by declaring it with a specific type.\n\n"
                "Comments in Fortran start with ! for single-line comments and ! ... for multi-line comments.\n\n"
                "To begin coding in Fortran, first, you need to install a Fortran compiler on your system.\n\n"
                "You can download the GNU Fortran compiler (gfortran) from the official website: https://gcc.gnu.org/wiki/GFortranBinaries\n\n"
                "Once installed, you can write Fortran code in a text editor or an Integrated Development Environment (IDE) like Code::Blocks or Visual Studio.\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program hello\n"
                "    implicit none\n"
                "    integer :: x, y\n"
                "    x = 10\n"
                "    y = 20\n"
                "    print *, 'The sum is:', x + y\n"
                "! Output: The sum is: 30\n"
                "end program hello\n"
                "```\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program greet\n"
                "    implicit none\n"
                "    character(len=20) :: name\n"
                "    name = 'Jesus'\n"
                "    print *, 'Hello, ', name, '!'\n"
                "! Output: Hello, Jesus !\n"
                "end program greet\n"
                "```\n\n"
                "To print a variable, you can use the print statement. You can also use format specifiers to control the output format.\n\n"
                "In Fortran, you can use the read statement to read user input from the console.\n\n"
                "The read statement can be used to read data from the console or from files.\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program input_example\n"
                "    implicit none\n"
                "    integer :: age\n"
                "    print *, 'Enter your age:'\n"
                "    read *, age\n"
                "    print *, 'You are ', age, ' years old.'\n"
                "! Output: You are <user_input> years old.\n"
                "end program input_example\n"
                "```\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program input_example\n"
                "    implicit none\n"
                "    character(len=20) :: name\n"
                "    print *, 'Enter your name:'\n"
                "    read *, name\n"
                "    print *, 'Hello, ', name, '!'\n"
                "! Output: Hello, <user_input> !\n"
                "end program input_example\n"
                "```\n"
            ),
            "Numerical Methods": (
                "Explore numerical methods for solving mathematical problems using Fortran.\n\n"
                "Fortran is widely used in scientific computing and numerical methods.\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program numerical_methods\n"
                "    implicit none\n"
                "    integer :: i, n\n"
                "    real :: x, y\n"
                "    n = 10\n"
                "    do i = 1, n\n"
                "        x = i * 0.1\n"
                "        y = sin(x)\n"
                "        print *, 'sin(', x, ') = ', y\n"
                "! Output: sin(0.1) = 0.0998334 ...\n"
                "    end do\n"
                "end program numerical_methods\n"
                "# This program calculates the sine of x for x = 0.1, 0.2, ..., 1.0.\n"
                "```\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program numerical_integration\n"
                "    implicit none\n"
                "    integer :: i, n\n"
                "    real :: x, y, h, integral\n"
                "    n = 100\n"
                "    h = 1.0 / n\n"
                "    integral = 0.0\n"
                "    do i = 1, n\n"
                "        x = (i - 0.5) * h\n"
                "        y = exp(x)\n"
                "        integral = integral + y * h\n"
                "    end do\n"
                "    print *, 'Integral of exp(x) from 0 to 1 = ', integral\n"
                "! Output: Integral of exp(x) from 0 to 1 = 1.7182818 ...\n"
                "end program numerical_integration\n"
                "# This program calculates the integral of exp(x) from 0 to 1 using the trapezoidal rule.\n"
                "```\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program numerical_differentiation\n"
                "    implicit none\n"
                "    integer :: i, n\n"
                "    real :: x, y, h, derivative\n"
                "    n = 100\n"
                "    h = 1.0 / n\n"
                "    do i = 1, n\n"
                "        x = i * h\n"
                "        y = sin(x)\n"
                "        derivative = (sin(x + h) - sin(x)) / h\n"
                "        print *, 'Derivative of sin(', x, ') = ', derivative\n"
                "! Output: Derivative of sin(0.1) = 0.9950042 ...\n"
                "    end do\n"
                "end program numerical_differentiation\n"
                "# This program calculates the derivative of sin(x) using finite difference method.\n"
                "```\n"
            ),
            "Scientific Computing": (
                "Learn about scientific computing techniques using Fortran, including matrix operations and numerical simulations.\n\n"
                "Fortran is widely used in scientific computing and numerical simulations.\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program matrix_multiplication\n"
                "    implicit none\n"
                "    integer :: i, j, k\n"
                "    real :: A(3, 3), B(3, 3), C(3, 3)\n"
                "    ! Initialize matrices A and B\n"
                "    A = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0], [3, 3])\n"
                "    B = reshape([9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0], [3, 3])\n"
                "    ! Matrix multiplication\n"
                "    C = matmul(A, B)\n"
                "    print *, 'Result of A * B:'\n"
                "    do i = 1, 3\n"
                "        print *, C(i, :)\n"
                "! Output: Result of A * B: ...\n"
                "    end do\n"
                "end program matrix_multiplication\n"
                "# This program multiplies two matrices A and B and prints the result.\n"
                "```\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program numerical_simulation\n"
                "    implicit none\n"
                "    integer :: i, n\n"
                "    real :: x, y, dt\n"
                "    n = 100\n"
                "    dt = 0.01\n"
                "    x = 0.0\n"
                "    y = 0.0\n"
                "    do i = 1, n\n"
                "        x = x + dt * y\n"
                "        y = y - dt * x\n"
                "        print *, 'Time:', i * dt, 'x:', x, 'y:', y\n"
                "! Output: Time: 0.01 x: ... y: ...\n"
                "    end do\n"
                "end program numerical_simulation\n"
                "# This program simulates a simple harmonic oscillator using Euler's method.\n"
                "```\n\n"
                "Example:\n"
                "```fortran\n\n"
                "program numerical_integration\n"
                "    implicit none\n"
                "    integer :: i, n\n"
                "    real :: x, y, h, integral\n"
                "    n = 100\n"
                "    h = 1.0 / n\n"
                "    integral = 0.0\n"
                "    do i = 1, n\n"
                "        x = (i - 0.5) * h\n"
                "        y = exp(x)\n"
                "        integral = integral + y * h\n"
                "    end do\n"
                "    print *, 'Integral of exp(x) from 0 to 1 = ', integral\n"
                "! Output: Integral of exp(x) from 0 to 1 = 1.7182818 ...\n"
                "end program numerical_integration\n"
                "# This program calculates the integral of exp(x) from 0 to 1 using the trapezoidal rule.\n"
                "```\n"
            )
        },
        "COBOL": {
            "Basics": (
                "Learn COBOL syntax, variables, and basic programming constructs.\n\n"
                "In COBOL, you can declare variables using the 01 level number.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by declaring it with a specific level number.\n\n"
                "Comments in COBOL start with * for single-line comments and *> for multi-line comments.\n\n"
                "To begin coding in COBOL, first, you need to install a COBOL compiler on your system.\n\n"
                "You can download the GNU COBOL compiler from the official website: https://gnucobol.sourceforge.io/\n\n"
                "Once installed, you can write COBOL code in a text editor or an Integrated Development Environment (IDE) like Visual Studio Code or Eclipse.\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. HelloWorld.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 x PIC 9(2).\n"
                "01 y PIC 9(2).\n"
                "PROCEDURE DIVISION.\n"
                "    MOVE 10 TO x\n"
                "    MOVE 20 TO y\n"
                "    DISPLAY 'The sum is: ' (x + y)\n"
                "* Output: The sum is: 30\n"
                "END PROGRAM HelloWorld.\n"
                "```\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. Greet.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 name PIC X(20).\n"
                "PROCEDURE DIVISION.\n"
                "    MOVE 'Jesus' TO name\n"
                "    DISPLAY 'Hello, ' name ' !'\n"
                "* Output: Hello, Jesus !\n"
                "END PROGRAM Greet.\n"
                "```\n\n"
                "To print a variable, you can use the DISPLAY statement. You can also use string concatenation to include variables in strings.\n\n"
                "In COBOL, you can use the ACCEPT statement to read user input from the console.\n\n"
                "The ACCEPT statement can be used to read data from the console or from files.\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. InputExample.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 age PIC 9(2).\n"
                "PROCEDURE DIVISION.\n"
                "    DISPLAY 'Enter your age:'\n"
                "    ACCEPT age\n"
                "    DISPLAY 'You are ' age ' years old.'\n"
                "* Output: You are <user_input> years old.\n"
                "END PROGRAM InputExample.\n"
                "```\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. InputExample.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 name PIC X(20).\n"
                "PROCEDURE DIVISION.\n"
                "    DISPLAY 'Enter your name:'\n"
                "    ACCEPT name\n"
                "    DISPLAY 'Hello, ' name ' !'\n"
                "* Output: Hello, <user_input> !\n"
                "END PROGRAM InputExample.\n"
                "```\n"
            ),
            "Business Applications": (
                "Explore COBOL's role in business applications, including file handling and report generation.\n\n"
                "COBOL is widely used in business applications, especially for batch processing and report generation.\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. FileHandling.\n"
                "DATA DIVISION.\n"
                "FILE SECTION.\n"
                "FD input-file.\n"
                "01 input-record PIC X(100).\n"
                "FD output-file.\n"
                "01 output-record PIC X(100).\n"
                "PROCEDURE DIVISION.\n"
                "    OPEN INPUT input-file\n"
                "    OPEN OUTPUT output-file\n"
                "    READ input-file INTO input-record\n"
                "    WRITE output-record FROM input-record\n"
                "    CLOSE input-file\n"
                "    CLOSE output-file\n"
                "* This program reads a record from an input file and writes it to an output file.\n"
                "END PROGRAM FileHandling.\n"
                "# This program demonstrates file handling in COBOL.\n"
                "```\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. ReportGeneration.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 report-record PIC X(100).\n"
                "PROCEDURE DIVISION.\n"
                "    OPEN OUTPUT report-file\n"
                "    MOVE 'Report Header' TO report-record\n"
                "    WRITE report-record\n"
                "    MOVE 'Report Data' TO report-record\n"
                "    WRITE report-record\n"
                "    MOVE 'Report Footer' TO report-record\n"
                "    WRITE report-record\n"
                "    CLOSE report-file\n"
                "* This program generates a simple report with a header, data, and footer.\n"
                "END PROGRAM ReportGeneration.\n"
                "# This program demonstrates report generation in COBOL.\n"
                "```\n\n"
                "Example:\n"
                "```cobol\n\n"
                "COMPUTATIONAL DIVISION.\n"
                "PROGRAM-ID. BusinessApp.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 customer-name PIC X(30).\n"
                "01 customer-balance PIC 9(10)V99.\n"
                "PROCEDURE DIVISION.\n"
                "    MOVE 'John Doe' TO customer-name\n"
                "    MOVE 1000.00 TO customer-balance\n"
                "    DISPLAY 'Customer Name: ' customer-name\n"
                "    DISPLAY 'Customer Balance: ' customer-balance\n"
                "* This program displays customer information.\n"
                "END PROGRAM BusinessApp.\n"
                "# This program demonstrates a simple business application in COBOL.\n"
                "```\n"
            ),
            "Data Processing": (
                "Learn about data processing techniques using COBOL, including file manipulation and data validation.\n\n"
                "COBOL is widely used for data processing tasks, including file manipulation and data validation.\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. DataProcessing.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 record PIC X(100).\n"
                "PROCEDURE DIVISION.\n"
                "    MOVE 'Sample Record' TO record\n"
                "    DISPLAY 'Processing record: ' record\n"
                "* This program processes a sample record.\n"
                "END PROGRAM DataProcessing.\n"
                "# This program demonstrates data processing in COBOL.\n"
                "```\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. DataValidation.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 input-value PIC 9(5).\n"
                "01 valid-value PIC 9(5).\n"
                "PROCEDURE DIVISION.\n"
                "    MOVE 12345 TO input-value\n"
                "    IF input-value > 0 THEN\n"
                "        MOVE input-value TO valid-value\n"
                "        DISPLAY 'Valid value: ' valid-value\n"
                "    ELSE\n"
                "        DISPLAY 'Invalid value!'\n"
                "    END-IF\n"
                "* This program validates an input value and displays it if valid.\n"
                "END PROGRAM DataValidation.\n"
                "# This program demonstrates data validation in COBOL.\n"
                "```\n\n"
                "Example:\n"
                "```cobol\n\n"
                "IDENTIFICATION DIVISION.\n"
                "PROGRAM-ID. DataProcessing.\n"
                "DATA DIVISION.\n"
                "WORKING-STORAGE SECTION.\n"
                "01 input-record PIC X(100).\n"
                "01 output-record PIC X(100).\n"
                "PROCEDURE DIVISION.\n"
                "    MOVE 'Input Record' TO input-record\n"
                "    DISPLAY 'Processing input record: ' input-record\n"
                "    MOVE input-record TO output-record\n"
                "    DISPLAY 'Output record: ' output-record\n"
                "* This program processes an input record and displays the output record.\n"
                "END PROGRAM DataProcessing.\n"
                "# This program demonstrates data processing in COBOL.\n"
                "```\n"
            )
        },
        "Lisp": {
            "Basics": (
                "Learn Lisp syntax, variables, and basic programming constructs.\n\n"
                "In Lisp, you can declare variables using the defvar or defparameter special forms.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the setf function.\n\n"
                "Comments in Lisp start with ; for single-line comments and #| ... |# for multi-line comments.\n\n"
                "To begin coding in Lisp, first, you need to install a Lisp interpreter on your system.\n\n"
                "You can download SBCL (Steel Bank Common Lisp) from the official website: http://www.sbcl.org/\n\n"
                "Once installed, you can write Lisp code in a text editor or an Integrated Development Environment (IDE) like Emacs or SLIME.\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defvar x 10)\n"
                "(defvar y 20)\n"
                "(print (+ x y))\n"
                "; Output: 30\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defvar name 'Jesus)\n"
                "(print (concatenate 'string \"Hello, \" name \"!\"))\n"
                "; Output: Hello, Jesus !\n"
                "```\n\n"
                "To print a variable, you can use the print function. You can also use format for formatted output.\n\n"
                "In Lisp, you can use the read function to read user input from the console.\n\n"
                "The read function returns the input as a Lisp object, so you may need to convert it to the desired type using functions like parse-integer or parse-float.\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(print \"Enter your age:\")\n"
                "(defvar age (read))\n"
                "(print (format nil \"You are ~A years old.\" age))\n"
                "; Output: You are <user_input> years old.\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(print \"Enter your name:\")\n"
                "(defvar name (read))\n"
                "(print (format nil \"Hello, ~A!\" name))\n"
                "; Output: Hello, <user_input> !\n"
                "```\n"
            ),
            "Functional Programming": (
                "Explore functional programming concepts in Lisp, including recursion and higher-order functions.\n\n"
                "Lisp is known for its support of functional programming paradigms.\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defun factorial (n)\n"
                "  (if (= n 0)\n"
                "      1\n"
                "      (* n (factorial (- n 1)))))\n\n"
                "(print (factorial 5))\n"
                "; Output: 120\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defun map (fn lst)\n"
                "  (if (null lst)\n"
                "      nil\n"
                "      (cons (funcall fn (car lst))\n"
                "            (map fn (cdr lst)))))\n\n"
                "(defvar numbers '(1 2 3 4 5))\n"
                "(print (map #'1+ numbers))\n"
                "; Output: (2 3 4 5 6)\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defun filter (pred lst)\n"
                "  (if (null lst)\n"
                "      nil\n"
                "      (if (funcall pred (car lst))\n"
                "          (cons (car lst) (filter pred (cdr lst)))\n"
                "          (filter pred (cdr lst)))))\n\n"
                "(defvar numbers '(1 2 3 4 5))\n"
                "(print (filter #'(lambda (x) (> x 2)) numbers))\n"
                "; Output: (3 4 5)\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defun reduce (fn acc lst)\n"
                "  (if (null lst)\n"
                "      acc\n"
                "      (reduce fn (funcall fn acc (car lst)) (cdr lst))))\n\n"
                "(defvar numbers '(1 2 3 4 5))\n"
                "(print (reduce #'+ 0 numbers))\n"
                "; Output: 15\n"
                "```\n"
            ),
            "Artificial Intelligence": (
                "Learn about AI techniques using Lisp, including symbolic reasoning and knowledge representation.\n\n"
                "Lisp has a long history in AI research and is known for its symbolic processing capabilities.\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defvar knowledge '(\"The sky is blue\" \"The grass is green\"))\n"
                "(print (car knowledge))\n"
                "; Output: The sky is blue\n"
                "# This will print the first element of the knowledge list.\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defun infer (fact)\n"
                "  (if (member fact knowledge)\n"
                "      (print (format nil \"Fact: ~A is known.\" fact))\n"
                "      (print (format nil \"Fact: ~A is unknown.\" fact))))\n\n"
                "(infer \"The sky is blue\")\n"
                "; Output: Fact: The sky is blue is known.\n"
                "(infer \"The sun is yellow\")\n"
                "; Output: Fact: The sun is yellow is unknown.\n"
                "# This will print 'Fact: The sun is yellow is unknown.'.\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defun rule (condition action)\n"
                "  (if (funcall condition)\n"
                "      (funcall action)))\n\n"
                "(defun condition ()\n"
                "  (print \"Condition met!\"))\n\n"
                "(defun action ()\n"
                "  (print \"Action executed!\"))\n\n"
                "(rule #'condition #'action)\n"
                "# Output: Condition met!\n"
                "# Output: Action executed!\n"
                "# This will print 'Condition met!' and 'Action executed!'."
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defun match (pattern string)\n"
                "  (if (string= pattern string)\n"
                "      (print (format nil \"Pattern: ~A matches string: ~A\" pattern string))\n"
                "      (print (format nil \"Pattern: ~A does not match string: ~A\" pattern string))))\n\n"
                "(match \"hello\" \"hello\")\n"
                "; Output: Pattern: hello matches string: hello\n"
                "(match \"hello\" \"world\")\n"
                "# Output: Pattern: hello does not match string: world\n"
                "# This will print 'Pattern: hello does not match string: world'.\n"
                "```\n"
            ),
            "Macros": (
                "Understand Lisp macros and how they can be used to extend the language.\n\n"
                "Lisp macros allow you to define new syntactic constructs in a way that is not possible in most other programming languages.\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defmacro when (condition &body body)\n"
                "  `(if ,condition (progn ,@body)))\n\n"
                "(when (> x 10)\n"
                "  (print \"x is greater than 10\"))\n"
                "# This will print 'x is greater than 10' if x is greater than 10.\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defmacro unless (condition &body body)\n"
                "  `(if (not ,condition) (progn ,@body)))\n\n"
                "(unless (> x 10)\n"
                "  (print \"x is not greater than 10\"))\n"
                "# This will print 'x is not greater than 10' if x is not greater than 10.\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defmacro define-function (name args &body body)\n"
                "  `(defun ,name ,args\n"
                "     ,@body))\n\n"
                "(define-function square (x)\n"
                "  (* x x))\n\n"
                "(print (square 5))\n"
                "# Output: 25\n"
                "# This will print the square of 5.\n"
                "```\n\n"
                "Example:\n"
                "```lisp\n\n"
                "(defmacro let (bindings &body body)\n"
                "  (let ((vars (mapcar #'car bindings))\n"
                "        (values (mapcar #'cadr bindings)))\n"
                "    `(let ,vars\n"
                "       (progn\n"
                "         ,@values\n"
                "         ,@body))))\n\n"
                "(let ((x 10) (y 20))\n"
                "  (print (+ x y)))\n"
                "# Output: 30\n"
                "# This will print the sum of x and y.\n"
                "```\n"
            )
        },
        "Mojo": {
            "Basics": (
                "Learn Mojo syntax, variables, and basic programming constructs.\n\n"
                "In Mojo, you can declare variables using the let keyword.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the equals sign (=).\n\n"
                "Comments in Mojo start with # for single-line comments and # ... for multi-line comments.\n\n"
                "To begin coding in Mojo, first, you need to install a Mojo compiler on your system.\n\n"
                "You can download the Mojo compiler from the official website: https://mojo-lang.org/\n\n"
                "Once installed, you can write Mojo code in a text editor or an Integrated Development Environment (IDE) like Visual Studio Code or JetBrains IDEs.\n\n"
                "Example:\n"
                "```mojo\n\n"
                "let x = 10\n"
                "let y = 20\n"
                "print(f'The sum is: {x + y}')\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "let name = 'Jesus'\n"
                "print(f'Hello, {name} !')\n"
                "# Output: Hello, Jesus !\n"
                "```\n\n"
                "To print a variable, you can use the print function. You can also use f-strings for formatted output.\n\n"
                "In Mojo, you can use the input function to read user input from the console.\n\n"
                "The input function returns the input as a string, so you may need to convert it to the desired type using functions like int() or float().\n\n"
                "Example:\n"
                "```mojo\n\n"
                "let age = int(input('Enter your age: '))\n"
                "print(f'You are {age} years old.')\n"
                "# Output: You are <user_input> years old.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "let name = input('Enter your name: ')\n"
                "print(f'Hello, {name} !')\n"
                "# Output: Hello, <user_input> !\n"
                "```\n"
            ),
            "High-Performance Computing": (
                "Explore high-performance computing techniques using Mojo, including parallel processing and GPU acceleration.\n\n"
                "Mojo is designed for high-performance computing and can leverage GPUs for acceleration.\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of parallel processing in Mojo\n"
                "let data = [1, 2, 3, 4, 5]\n"
                "let result = data.map(x => x * 2)\n"
                "print(result)\n"
                "# Output: [2, 4, 6, 8, 10]\n"
                "# This will perform the operation in parallel.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of GPU acceleration in Mojo\n"
                "let data = [1.0, 2.0, 3.0, 4.0, 5.0]\n"
                "let result = data.map(x => x * 2.0)\n"
                "print(result)\n"
                "# Output: [2.0, 4.0, 6.0, 8.0, 10.0]\n"
                "# This will perform the operation using GPU acceleration.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of using GPU for matrix multiplication in Mojo\n"
                "let A = [[1.0, 2.0], [3.0, 4.0]]\n"
                "let B = [[5.0, 6.0], [7.0, 8.0]]\n"
                "let C = A @ B\n"
                "print(C)\n"
                "# Output: [[19.0, 22.0], [43.0, 50.0]]\n"
                "# This will perform matrix multiplication using GPU acceleration.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of using GPU for image processing in Mojo\n"
                "let image = load_image('image.jpg')\n"
                "let processed_image = image.map(pixel => pixel * 2)\n"
                "save_image('processed_image.jpg', processed_image)\n"
                "# This will load an image, process it, and save the processed image.\n"
                "```\n"
            ),
            "Machine Learning": (
                "Learn about machine learning techniques using Mojo, including model training and evaluation.\n\n"
                "Mojo can be used for machine learning tasks, including model training and evaluation.\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of a simple linear regression model in Mojo\n"
                "let x = [1, 2, 3, 4, 5]\n"
                "let y = [2, 4, 6, 8, 10]\n"
                "# Train a linear regression model\n"
                "# ... (model training code)\n"
                "# Evaluate the model\n"
                "# ... (model evaluation code)\n"
                "# This will train a simple linear regression model and evaluate its performance.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of a simple classification model in Mojo\n"
                "let features = [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
                "let labels = [0, 1, 1, 0]\n"
                "# Train a classification model\n"
                "# ... (model training code)\n"
                "# Evaluate the model\n"
                "# ... (model evaluation code)\n"
                "# This will train a simple classification model and evaluate its performance.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of using a pre-trained model in Mojo\n"
                "let model = load_model('model.mojo')\n"
                "let data = [[1, 2], [3, 4], [5, 6]]\n"
                "# Make predictions using the model\n"
                "# ... (prediction code)\n"
                "# This will load a pre-trained model and make predictions on the data.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of using a neural network in Mojo\n"
                "let model = NeuralNetwork()\n"
                "model.add(Dense(10, activation='relu'))\n"
                "model.add(Dense(1, activation='sigmoid'))\n"
                "# Compile the model\n"
                "model.compile(optimizer='adam', loss='binary_crossentropy')\n"
                "# Train the model\n"
                "model.fit(features, labels, epochs=10)\n"
                "# Evaluate the model\n"
                "# ... (model evaluation code)\n"
                "# This will create a simple neural network, compile it, train it, and evaluate it.\n"
                "```\n"
            ),
            "Computer Vision": (
                "Explore computer vision techniques using Mojo, including image processing and object detection.\n\n"
                "Mojo can be used for computer vision tasks, including image processing and object detection.\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of image processing in Mojo\n"
                "# ... (image processing code)\n"
                "# Display the processed image\n"
                "# ... (display code)\n"
                "# This will load an image, process it, and display the result.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of object detection in Mojo\n"
                "# ... (object detection code)\n"
                "# Display the detected objects\n"
                "# ... (display code)\n"
                "# This will load an image, detect objects, and display the result.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of using a pre-trained model for image classification in Mojo\n"
                "# ... (load pre-trained model code)\n"
                "# Classify the image\n"
                "# ... (classification code)\n"
                "# Display the classification result\n"
                "# ... (display code)\n"
                "# This will load a pre-trained model, classify an image, and display the result.\n"
                "```\n\n"
                "Example:\n"
                "```mojo\n\n"
                "# Example of using a pre-trained model for image generation in Mojo\n"
                "# ... (load pre-trained model code)\n"
                "# Generate an image\n"
                "# ... (image generation code)\n"
                "# Display the generated image\n"
                "# ... (display code)\n"
                "# This will load a pre-trained model, generate an image, and display it.\n"
                "```\n"
            )
        },
        "R": {
            "Basics": (
                "Learn R syntax, variables, and basic programming constructs.\n\n"
                "In R, you can declare variables using the assignment operator <- or =.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the assignment operator.\n\n"
                "Comments in R start with # for single-line comments and # ... for multi-line comments.\n\n"
                "To begin coding in R, first, you need to install R on your system.\n\n"
                "You can download R from the official website: https://cran.r-project.org/\n\n"
                "Once installed, you can write R code in a text editor or an Integrated Development Environment (IDE) like RStudio.\n\n"
                "Example:\n"
                "```r\n\n"
                "x <- 10\n"
                "y <- 20\n"
                "print(paste('The sum is:', x + y))\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "name <- 'Jesus'\n"
                "print(paste('Hello,', name, '!'))\n"
                "# Output: Hello, Jesus !\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "input_value <- readline(prompt='Enter a number: ')\n"
                "print(paste('You entered:', input_value))\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "To print a variable, you can use the print() function. You can also use paste() to concatenate strings and variables.\n\n"
                "In R, you can use the readline() function to read user input from the console.\n\n"
                "The readline() function returns the input as a string.\n\n"
                "Example:\n"
                "```r\n\n"
                "player_name <- readline(prompt='Enter your name: ')\n"
                "print(paste('Welcome,', player_name, '!'))\n"
                "# Output: Welcome, <user_input> !\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "age <- as.integer(readline(prompt='Enter your age: '))\n"
                "print(paste('You are', age, 'years old.'))\n"
                "# Output: You are <user_input> years old.\n"
                "```\n"
            ),
            "Data Analysis": (
                "Explore data analysis techniques using R, including data manipulation and visualization.\n\n"
                "R is widely used for data analysis and statistical computing.\n\n"
                "Example:\n"
                "```r\n\n"
                "data <- data.frame(x = c(1, 2, 3), y = c(4, 5, 6))\n"
                "print(data)\n"
                "# Output:\n"
                "#   x y\n"
                "# 1 1 4\n"
                "# 2 2 5\n"
                "# 3 3 6\n"
                "# This will display the data frame.\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "library(ggplot2)\n\n"
                "# Create a scatter plot\n"
                "ggplot(data, aes(x = x, y = y)) + geom_point() + ggtitle('Scatter Plot')\n"
                "# This will display a scatter plot of the data.\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "library(dplyr)\n\n"
                "# Filter data\n"
                "filtered_data <- data %>% filter(x > 1)\n"
                "print(filtered_data)\n"
                "# Output:\n"
                "#   x y\n"
                "# 1 2 5\n"
                "# 2 3 6\n"
                "# This will display the filtered data.\n"
                "```\n"
            ),
            "Visualization": (
                "Learn about data visualization techniques using R, including ggplot2 and base R graphics.\n\n"
                "R provides powerful libraries for data visualization, such as ggplot2 and base R graphics.\n\n"
                "Example:\n"
                "```r\n\n"
                "library(ggplot2)\n\n"
                "# Create a bar plot\n"
                "ggplot(data, aes(x = factor(x), y = y)) + geom_bar(stat = 'identity') + ggtitle('Bar Plot')\n"
                "# This will display a bar plot of the data.\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "library(ggplot2)\n\n"
                "# Create a line plot\n"
                "ggplot(data, aes(x = x, y = y)) + geom_line() + ggtitle('Line Plot')\n"
                "# This will display a line plot of the data.\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "library(ggplot2)\n\n"
                "# Create a histogram\n"
                "ggplot(data, aes(x = x)) + geom_histogram(binwidth = 1) + ggtitle('Histogram')\n"
                "# This will display a histogram of the data.\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "library(ggplot2)\n\n"
                "# Create a box plot\n"
                "ggplot(data, aes(x = factor(x), y = y)) + geom_boxplot() + ggtitle('Box Plot')\n"
                "# This will display a box plot of the data.\n"
                "```\n"
            ),
            "Machine Learning": (
                "Explore machine learning techniques using R, including linear regression and decision trees.\n\n"
                "R provides various libraries for machine learning, such as caret and randomForest.\n\n"
                "Example:\n"
                "```r\n\n"
                "library(caret)\n\n"
                "# Create a linear regression model\n"
                "model <- lm(y ~ x, data = data)\n"
                "# Print the model summary\n"
                "summary(model)\n"
                "# This will display the model summary.\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "library(randomForest)\n\n"
                "# Create a random forest model\n"
                "model <- randomForest(y ~ x, data = data)\n"
                "# Print the model summary\n"
                "print(model)\n"
                "# This will display the model summary.\n"
                "```\n\n"
                "Example:\n"
                "```r\n\n"
                "library(caret)\n\n"
                "# Create a decision tree model\n"
                "model <- train(y ~ x, data = data, method = 'rpart')\n"
                "# Print the model summary\n"
                "print(model)\n"
                "# This will display the model summary.\n"
                "```\n"
            )
        },
        "Julia": {
            "Basics": (
                "Learn Julia syntax, variables, and basic programming constructs.\n\n"
                "In Julia, you can declare variables using the assignment operator =.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the assignment operator.\n\n"
                "Comments in Julia start with # for single-line comments and # ... for multi-line comments.\n\n"
                "To begin coding in Julia, first, you need to install Julia on your system.\n\n"
                "You can download Julia from the official website: https://julialang.org/\n\n"
                "Once installed, you can write Julia code in a text editor or an Integrated Development Environment (IDE) like Juno or VS Code.\n\n"
                "Example:\n"
                "```julia\n\n"
                "x = 10\n"
                "y = 20\n"
                "println(\"The sum is: $(x + y)\")\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "name = \"Jesus\"\n"
                "println(\"Hello, $name!\")\n"
                "# Output: Hello, Jesus!\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "input_value = readline()\n"
                "println(\"You entered: $input_value\")\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "To print a variable, you can use the println() function. You can also use string interpolation to include variables in strings.\n\n"
                "In Julia, you can use the readline() function to read user input from the console.\n\n"
                "The readline() function returns the input as a string.\n\n"
                "Example:\n"
                "```julia\n\n"
                "player_name = readline()\n"
                "println(\"Welcome, $player_name!\")\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "age = parse(Int, readline())\n"
                "println(\"You are $age years old.\")\n"
                "# Output: You are <user_input> years old.\n"
                "```\n"
            ),
            "Data Science": (
                "Explore data analysis techniques using Julia, including data manipulation and visualization.\n\n"
                "Julia provides powerful libraries for data analysis and visualization, such as DataFrames.jl and Plots.jl.\n\n"
                "Example:\n"
                "```julia\n\n"
                "using DataFrames\n\n"
                "# Create a DataFrame\n"
                "data = DataFrame(x = [1, 2, 3], y = [4, 5, 6])\n"
                "println(data)\n"
                "# Output:\n"
                "# 3×2 DataFrame\n"
                "# Row │ x     y\n"
                "#     │ Int64 Int64\n"
                "# ─────┼───────────────\n"
                "#   1 │     1     4\n"
                "#   2 │     2     5\n"
                "#   3 │     3     6\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "using Plots\n\n"
                "# Create a scatter plot\n"
                "x = [1, 2, 3]\n"
                "y = [4, 5, 6]\n"
                "scatter(x, y, title=\"Scatter Plot\", xlabel=\"x\", ylabel=\"y\")\n"
                "# This will display a scatter plot of the data.\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "using Plots\n\n"
                "# Create a line plot\n"
                "x = [1, 2, 3]\n"
                "y = [4, 5, 6]\n"
                "plot(x, y, title=\"Line Plot\", xlabel=\"x\", ylabel=\"y\")\n"
                "# This will display a line plot of the data.\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "using Plots\n\n"
                "# Create a histogram\n"
                "data = randn(1000)\n"
                "histogram(data, title=\"Histogram\", xlabel=\"Value\", ylabel=\"Frequency\")\n"
                "# This will display a histogram of the data.\n"
                "```\n"
            ),
            "Machine Learning": (
                "Explore machine learning techniques using Julia, including linear regression and decision trees.\n\n"
                "Julia provides various libraries for machine learning, such as MLJ.jl and Flux.jl.\n\n"
                "Example:\n"
                "```julia\n\n"
                "using MLJ\n\n"
                "# Create a linear regression model\n"
                "model = LinearRegression()\n"
                "# Fit the model to the data\n"
                "# fit!(model, X_train, y_train)\n"
                "# Print the model summary\n"
                "# println(model)\n"
                "# This will display the model summary.\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "using MLJ\n\n"
                "# Create a decision tree model\n"
                "model = DecisionTreeClassifier()\n"
                "# Fit the model to the data\n"
                "# fit!(model, X_train, y_train)\n"
                "# Print the model summary\n"
                "# println(model)\n"
                "# This will display the model summary.\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "using Flux\n\n"
                "# Create a simple neural network\n"
                "model = Chain(Dense(10, 5, relu), Dense(5, 1))\n\n"
                "# Define a loss function\n"
                "loss(x, y) = Flux.mse(model(x), y)\n\n"
                "# Define an optimizer\n"
                "optimizer = Descent(0.01)\n\n"
                "# Train the model\n"
                "# for epoch in 1:100\n"
                "#     Flux.train!(loss, params(model), data, optimizer)\n"
                "# end\n"
                "# This will train the model using the specified loss function and optimizer.\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "using MLJ\n\n"
                "# Create a random forest model\n"
                "model = RandomForestClassifier()\n"
                "# Fit the model to the data\n"
                "# fit!(model, X_train, y_train)\n"
                "# Print the model summary\n"
                "# println(model)\n"
                "# This will display the model summary.\n"
                "```\n\n"
                "Example:\n"
                "```julia\n\n"
                "using MLJ\n\n"
                "# Create a support vector machine model\n"
                "model = SVC()\n"
                "# Fit the model to the data\n"
                "# fit!(model, X_train, y_train)\n"
                "# Print the model summary\n"
                "# println(model)\n"
                "# This will display the model summary.\n"
                "```\n"
            )
        },
        "Haskell": {
            "Basics": (
                "Learn Haskell syntax, variables, and basic programming constructs.\n\n"
                "In Haskell, you can declare variables using the let keyword.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the let keyword.\n\n"
                "Comments in Haskell start with -- for single-line comments and {- ... -} for multi-line comments.\n\n"
                "To begin coding in Haskell, first, you need to install GHC (Glasgow Haskell Compiler) on your system.\n\n"
                "You can download GHC from the official website: https://www.haskell.org/ghc/\n\n"
                "Once installed, you can write Haskell code in a text editor or an Integrated Development Environment (IDE) like Visual Studio Code or IntelliJ IDEA.\n\n"
                "Example:\n"
                "```haskell\n\n"
                "x = 10\n"
                "y = 20\n"
                "main = putStrLn $ \"The sum is: \" ++ show (x + y)\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```haskell\n\n"
                "name = \"Jesus\"\n"
                "main = putStrLn $ \"Hello, \" ++ name ++ \"!\"\n"
                "# Output: Hello, Jesus!\n"
                "```\n\n"
                "To print a variable, you can use the putStrLn function. You can also use string concatenation to include variables in strings.\n\n"
                "In Haskell, you can use the getLine function to read user input from the console.\n\n"
                "The getLine function returns the input as a string.\n\n"
                "Example:\n"
                "```haskell\n\n"
                "main = do\n"
                "    putStrLn \"Enter a number:\"\n"
                "    input_value <- getLine\n"
                "    putStrLn $ \"You entered: \" ++ input_value\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```haskell\n\n"
                "main = do\n"
                "    putStrLn \"Enter your name:\"\n"
                "    player_name <- getLine\n"
                "    putStrLn $ \"Welcome, \" ++ player_name ++ \"!\"\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "Functional Programming": (
                "Understand functional programming concepts in Haskell, including higher-order functions and recursion.\n\n"
                "Haskell is a purely functional programming language, which means that functions are first-class citizens.\n\n"
                "Higher-order functions are functions that can take other functions as arguments or return functions as results.\n\n"
                "Recursion is a common technique in functional programming where a function calls itself to solve a problem.\n\n"
                "Example:\n"
                "```haskell\n\n"
                "double x = x * 2\n"
                "main = do\n"
                "    let result = double 5\n"
                "    putStrLn $ \"Double of 5 is: \" ++ show result\n"
                "# Output: Double of 5 is: 10\n"
                "```\n\n"
                "Example:\n"
                "```haskell\n\n"
                "factorial 0 = 1\n"
                "factorial n = n * factorial (n - 1)\n"
                "main = do\n"
                "    let result = factorial 5\n"
                "    putStrLn $ \"Factorial of 5 is: \" ++ show result\n"
                "# Output: Factorial of 5 is: 120\n"
                "```\n\n"
                "Example:\n"
                "```haskell\n\n"
                "map f xs = [f x | x <- xs]\n"
                "main = do\n"
                "    let numbers = [1, 2, 3]\n"
                "    let doubled = map (*2) numbers\n"
                "    putStrLn $ \"Doubled numbers: \" ++ show doubled\n"
                "# Output: Doubled numbers: [2,4,6]\n"
                "```\n"
            ),
            "Type Classes": (
                "Learn about type classes in Haskell, which allow for polymorphism and code reuse.\n\n"
                "Type classes are a way to define a set of functions that can operate on different types.\n\n"
                "You can create your own type classes and implement them for different types.\n\n"
                "Example:\n"
                "```haskell\n\n"
                "class Show a where\n"
                "    show :: a -> String\n\n"
                "instance Show Int where\n"
                "    show x = \"Int: \" ++ show x\n\n"
                "instance Show String where\n"
                "    show x = \"String: \" ++ x\n\n"
                "main = do\n"
                "    let intValue = 5\n"
                "    let stringValue = \"Hello\"\n"
                "    putStrLn $ show intValue\n"
                "    putStrLn $ show stringValue\n"
                "# Output:\n"
                "# Int: 5\n"
                "# String: Hello\n"
                "# This will display the string representation of the int and string values.\n"
                "```\n\n"
                "Example:\n"
                "```haskell\n\n"
                "class Eq a where\n"
                "    (==) :: a -> a -> Bool\n\n"
                "instance Eq Int where\n"
                "    x == y = x Prelude.== y\n\n"
                "instance Eq String where\n"
                "    x == y = x Prelude.== y\n\n"
                "main = do\n"
                "    let intValue1 = 5\n"
                "    let intValue2 = 5\n"
                "    let stringValue1 = \"Hello\"\n"
                "    let stringValue2 = \"World\"\n"
                "    putStrLn $ \"Are int values equal? \" ++ show (intValue1 == intValue2)\n"
                "    putStrLn $ \"Are string values equal? \" ++ show (stringValue1 == stringValue2)\n"
                "# Output:\n"
                "# Are int values equal? True\n"
                "# Are string values equal? False\n"
                "# This will display whether the int and string values are equal.\n"
                "```\n\n"
                "Example:\n"
                "```haskell\n\n"
                "class Num a where\n"
                "    (+) :: a -> a -> a\n"
                "    (*) :: a -> a -> a\n\n"
                "instance Num Int where\n"
                "    x + y = x Prelude.+ y\n"
                "    x * y = x Prelude.* y\n\n"
                "instance Num Float where\n"
                "    x + y = x Prelude.+ y\n"
                "    x * y = x Prelude.* y\n\n"
                "main = do\n"
                "    let intValue1 = 5\n"
                "    let intValue2 = 10\n"
                "    let floatValue1 = 5.0\n"
                "    let floatValue2 = 10.0\n"
                "    putStrLn $ \"Int addition: \" ++ show (intValue1 + intValue2)\n"
                "    putStrLn $ \"Float addition: \" ++ show (floatValue1 + floatValue2)\n"
                "    putStrLn $ \"Int multiplication: \" ++ show (intValue1 * intValue2)\n"
                "    putStrLn $ \"Float multiplication: \" ++ show (floatValue1 * floatValue2)\n"
                "# Output:\n"
                "# Int addition: 15\n"
                "# Float addition: 15.0\n"
                "# Int multiplication: 50\n"
                "# Float multiplication: 50.0\n"
                "# This will display the results of addition and multiplication for both Int and Float types.\n"
                "```\n"
            )
        },
        "Scala": {
            "Basics": (
                "Learn Scala syntax, variables, and basic programming constructs.\n\n"
                "In Scala, you can declare variables using the val keyword for immutable variables and var for mutable variables.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the equals sign (=).\n\n"
                "Comments in Scala start with // for single-line comments and /* ... */ for multi-line comments.\n\n"
                "To begin coding in Scala, first, you need to install Scala on your system.\n\n"
                "You can download Scala from the official website: https://www.scala-lang.org/\n\n"
                "Once installed, you can write Scala code in a text editor or an Integrated Development Environment (IDE) like IntelliJ IDEA or Eclipse.\n\n"
                "Example:\n"
                "```scala\n\n"
                "val x = 10\n"
                "val y = 20\n"
                "println(s'The sum is: ${x + y}')\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```scala\n\n"
                "val name = \"Jesus\"\n"
                "println(s'Hello, $name!')\n"
                "# Output: Hello, Jesus!\n"
                "```\n\n"
                "To print a variable, you can use the println() function. You can also use string interpolation to include variables in strings.\n\n"
                "In Scala, you can use the scala.io.StdIn.readLine() function to read user input from the console.\n\n"
                "The readLine() function returns the input as a string.\n\n"
                "Example:\n"
                "```scala\n\n"
                "val inputValue = scala.io.StdIn.readLine()\n"
                "println(s'You entered: $inputValue')\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```scala\n\n"
                "val playerName = scala.io.StdIn.readLine()\n"
                "println(s'Welcome, $playerName!')\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "Functional Programming": (
                "Understand functional programming concepts in Scala, including higher-order functions and immutability.\n\n"
                "Scala is a hybrid programming language that combines object-oriented and functional programming paradigms.\n\n"
                "Higher-order functions are functions that can take other functions as arguments or return functions as results.\n\n"
                "Immutability is a key concept in functional programming where data cannot be modified after it is created.\n\n"
                "Example:\n"
                "```scala\n\n"
                "val double: Int => Int = x => x * 2\n"
                "println(double(5))\n"
                "# Output: 10\n"
                "```\n\n"
                "Example:\n"
                "```scala\n\n"
                "def factorial(n: Int): Int = {\n"
                "    if (n == 0) 1\n"
                "    else n * factorial(n - 1)\n"
                "}\n\n"
                "println(factorial(5))\n"
                "# Output: 120\n"
                "```\n\n"
                "Example:\n"
                "```scala\n\n"
                "val numbers = List(1, 2, 3)\n"
                "val doubled = numbers.map(_ * 2)\n"
                "println(doubled)\n"
                "# Output: List(2, 4, 6)\n"
                "```\n\n"
                "Example:\n"
                "```scala\n\n"
                "val numbers = List(1, 2, 3)\n"
                "val sum = numbers.foldLeft(0)(_ + _)\n"
                "println(sum)\n"
                "# Output: 6\n"
                "```\n"
            ),
            "Akka": (
                "Learn about Akka, a toolkit for building concurrent and distributed applications in Scala.\n\n"
                "Akka provides a powerful actor model for building concurrent applications.\n\n"
                "Example:\n"
                "```scala\n\n"
                "import akka.actor.{Actor, ActorSystem, Props}\n\n"
                "class HelloActor extends Actor {\n"
                "    def receive = {\n"
                "        case \"hello\" => println(\"Hello, world!\")\n"
                "    }\n"
                "}\n\n"
                "object Main extends App {\n"
                "    val system = ActorSystem(\"HelloSystem\")\n"
                "    val helloActor = system.actorOf(Props[HelloActor], name = \"helloactor\")\n"
                "    helloActor ! \"hello\"\n"
                "}\n"
                "# This will print 'Hello, world!'\n"
                "```\n\n"
                "Example:\n"
                "```scala\n\n"
                "import akka.actor.{Actor, ActorSystem, Props}\n\n"
                "class Counter extends Actor {\n"
                "    var count = 0\n\n"
                "    def receive = {\n"
                "        case \"increment\" => count += 1\n"
                "        case \"get\" => sender() ! count\n"
                "    }\n"
                "}\n\n"
                "object Main extends App {\n"
                "    val system = ActorSystem(\"CounterSystem\")\n"
                "    val counter = system.actorOf(Props[Counter], name = \"counter\")\n\n"
                "    counter ! \"increment\"\n"
                "    counter ! \"increment\"\n\n"
                "    counter ! \"get\"\n"
                "    // This will print '2'\n"
                "}\n"
                "# This will print '2'\n"
                "```\n"
            )
        },
        "Elixir": {
            "Basics": (
                "Learn Elixir syntax, variables, and basic programming constructs.\n\n"
                "In Elixir, you can declare variables using the assignment operator =.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the assignment operator.\n\n"
                "Comments in Elixir start with # for single-line comments and # ... for multi-line comments.\n\n"
                "To begin coding in Elixir, first, you need to install Elixir on your system.\n\n"
                "You can download Elixir from the official website: https://elixir-lang.org/\n\n"
                "Once installed, you can write Elixir code in a text editor or an Integrated Development Environment (IDE) like Visual Studio Code or IntelliJ IDEA.\n\n"
                "Example:\n"
                "```elixir\n\n"
                "x = 10\n"
                "y = 20\n"
                "IO.puts(\"The sum is: #{x + y}\")\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "name = \"Jesus\"\n"
                "IO.puts(\"Hello, #{name}!\")\n"
                "# Output: Hello, Jesus!\n"
                "```\n\n"
                "To print a variable, you can use the IO.puts() function. You can also use string interpolation to include variables in strings.\n\n"
                "In Elixir, you can use the IO.gets() function to read user input from the console.\n\n"
                "The IO.gets() function returns the input as a string.\n\n"
                "Example:\n"
                "```elixir\n\n"
                "input_value = IO.gets(\"Enter a number: \")\n"
                "IO.puts(\"You entered: #{input_value}\")\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "player_name = IO.gets(\"Enter your name: \")\n"
                "IO.puts(\"Welcome, #{player_name}!\")\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "Functional Programming": (
                "Understand functional programming concepts in Elixir, including higher-order functions and immutability.\n\n"
                "Elixir is a functional programming language that runs on the Erlang VM.\n\n"
                "Higher-order functions are functions that can take other functions as arguments or return functions as results.\n\n"
                "Immutability is a key concept in functional programming where data cannot be modified after it is created.\n\n"
                "Example:\n"
                "```elixir\n\n"
                "double = fn x -> x * 2 end\n"
                "IO.puts(double.(5))\n"
                "# Output: 10\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "factorial = fn\n"
                "    0 -> 1\n"
                "    n -> n * factorial.(n - 1)\n"
                "end\n\n"
                "IO.puts(factorial.(5))\n"
                "# Output: 120\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "name = \"Jesus\"\n"
                "IO.puts(\"Hello, #{name}!\")\n"
                "# Output: Hello, Jesus!\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "numbers = [1, 2, 3]\n"
                "doubled = Enum.map(numbers, fn x -> x * 2 end)\n"
                "IO.puts(doubled)\n"
                "# Output: [2, 4, 6]\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "sum = Enum.reduce([1, 2, 3], 0, fn x, acc -> x + acc end)\n"
                "IO.puts(sum)\n"
                "# Output: 6\n"
                "```\n"
            ),
            "Concurrency": (
                "Learn about concurrency in Elixir using processes and the actor model.\n\n"
                "Elixir provides a powerful concurrency model based on the actor model.\n\n"
                "Example:\n"
                "```elixir\n\n"
                "spawn(fn -> IO.puts(\"Hello from a new process!\") end)\n"
                "# This will spawn a new process that prints 'Hello from a new process!'\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "pid = spawn(fn ->\n"
                "    receive do\n"
                "        msg -> IO.puts(\"Received message: #{msg}\")\n"
                "    end\n"
                "end)\n\n"
                "send(pid, \"Hello\")\n"
                "# This will send the message 'Hello' to the spawned process.\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "defmodule Counter do\n"
                "    def start do\n"
                "        spawn(fn -> loop(0) end)\n"
                "    end\n\n"
                "    defp loop(count) do\n"
                "        receive do\n"
                "            :increment -> loop(count + 1)\n"
                "            :get -> IO.puts(\"Count: #{count}\")\n"
                "        end\n"
                "    end\n"
                "end\n\n"
                "counter = Counter.start()\n"
                "send(counter, :increment)\n"
                "send(counter, :increment)\n"
                "send(counter, :get)\n"
                "# This will print 'Count: 2'\n"
                "```\n"
            ),
            "Phoenix Framework": (
                "Learn about Phoenix, a web framework for building scalable and maintainable applications in Elixir.\n\n"
                "Phoenix is a web framework built on top of Elixir that provides a powerful set of tools for building web applications.\n\n"
                "Example:\n"
                "```elixir\n\n"
                "defmodule MyAppWeb.PageController do\n"
                "    use MyAppWeb, :controller\n\n"
                "    def index(conn, _params) do\n"
                "        render(conn, \"index.html\")\n"
                "    end\n"
                "end\n"
                "# This is a basic Phoenix controller.\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "defmodule MyAppWeb.PageView do\n"
                "    use MyAppWeb, :view\n\n"
                "    def render(\"index.html\", _assigns) do\n"
                "        \"<h1>Hello, world!</h1>\"\n"
                "    end\n"
                "# This is a basic Phoenix view.\n"
                "    end\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "defmodule MyAppWeb.Router do\n"
                "    use MyAppWeb, :router\n\n"
                "    pipeline :browser do\n"
                "        plug :accepts, [:html]\n"
                "        plug :fetch_session\n"
                "        plug :fetch_flash\n"
                "        plug :protect_from_forgery\n"
                "        plug :put_secure_browser_headers\n"
                "    end\n\n"
                "    scope \"/\", MyAppWeb do\n"
                "        pipe_through :browser\n\n"
                "        get \"/\", PageController, :index\n"
                "    end\n"
                "# This is a basic Phoenix router.\n"
                "    end\n"
                "```\n\n"
                "Example:\n"
                "```elixir\n\n"
                "defmodule MyAppWeb.Endpoint do\n"
                "    use Phoenix.Endpoint, otp_app: :my_app\n\n"
                "    socket \"/socket\", MyAppWeb.UserSocket,\n"
                "        websocket: true,\n"
                "        longpoll: false\n\n"
                "    plug Plug.Static,\n"
                "        at: \"/\",\n"
                "        from: :my_app,\n"
                "        gzip: false,\n"
                "        only: ~w(css fonts images js favicon.ico robots.txt)\n\n"
                "    plug Plug.RequestId\n"
                "    plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]\n\n"
                "    plug Plug.Parsers,\n"
                "        parsers: [:urlencoded, :multipart, :json],\n"
                "        pass: [\"*/*\"],\n"
                "        json_decoder: Phoenix.json_library()\n\n"
                "    plug Plug.MethodOverride\n"
                "    plug Plug.Head\n\n"
                "    plug Plug.Session,\n"
                "        store: :cookie,\n"
                "        key: \"_my_app_key\",\n"
                "        signing_salt"
                "        # This is a basic Phoenix endpoint.\n"
                "    end\n"
                "```\n"
            )
        },
        "Erlang": {
            "Basics": (
                "Learn Erlang syntax, variables, and basic programming constructs.\n\n"
                "In Erlang, you can declare variables using the assignment operator =.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the assignment operator.\n\n"
                "Comments in Erlang start with % for single-line comments and %% ... %% for multi-line comments.\n\n"
                "To begin coding in Erlang, first, you need to install Erlang on your system.\n\n"
                "You can download Erlang from the official website: https://www.erlang.org/\n\n"
                "Once installed, you can write Erlang code in a text editor or an Integrated Development Environment (IDE) like Visual Studio Code or IntelliJ IDEA.\n\n"
                "Example:\n"
                "```erlang\n\n"
                "X = 10,\n"
                "Y = 20,\n"
                "Sum = X + Y,\n"
                "io:format(\"The sum is: ~p~n\", [Sum]).\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```erlang\n\n"
                "Name = \"Jesus\",\n"
                "io:format(\"Hello, ~s!~n\", [Name]).\n"
                "# Output: Hello, Jesus!\n"
                "```\n\n"
                "To print a variable, you can use the io:format() function. You can also use string interpolation to include variables in strings.\n\n"
                "In Erlang, you can use the io:get_line() function to read user input from the console.\n\n"
                "The io:get_line() function returns the input as a string.\n\n"
                "Example:\n"
                "```erlang\n\n"
                "InputValue = io:get_line(\"Enter a number: \"),\n"
                "io:format(\"You entered: ~s~n\", [InputValue]).\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```erlang\n\n"
                "PlayerName = io:get_line(\"Enter your name: \"),\n"
                "io:format(\"Welcome, ~s!~n\", [PlayerName]).\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "Concurrency": (
                "Learn about concurrency in Erlang using processes and the actor model.\n\n"
                "Erlang provides a powerful concurrency model based on the actor model.\n\n"
                "Example:\n"
                "```erlang\n\n"
                "-module(hello).\n"
                "-export([hello/0]).\n\n"
                "hello() ->\n"
                "    spawn(fun() -> io:format(\"Hello from a new process!~n\") end).\n"
                "# This will spawn a new process that prints 'Hello from a new process!'\n"
                "```\n\n"
                "Example:\n"
                "```erlang\n\n"
                "-module(counter).\n"
                "-export([start/0, increment/1, get/1]).\n\n"
                "start() ->\n"
                "    spawn(fun() -> loop(0) end).\n\n"
                "loop(Count) ->\n"
                "    receive\n"
                "        {increment, Sender} ->\n"
                "            NewCount = Count + 1,\n"
                "            Sender ! {count, NewCount},\n"
                "            loop(NewCount);\n"
                "        {get, Sender} ->\n"
                "            Sender ! {count, Count},\n"
                "            loop(Count)\n"
                "    end.\n\n"
                "increment(Pid) ->\n"
                "    Pid ! {increment, self()}.\n\n"
                "get(Pid) ->\n"
                "    Pid ! {get, self()},\n"
                "    receive\n"
                "        {count, Count} ->\n"
                "            io:format(\"Count: ~p~n\", [Count])\n"
                "    end.\n"
                "# This will send the message 'Hello' to the spawned process.\n"
                "```\n\n"
                "Example:\n"
                "```erlang\n\n"
                "-module(hello).\n"
                "-export([hello/0]).\n\n"
                "hello() ->\n"
                "    Pid = spawn(fun() -> loop() end),\n"
                "    Pid ! {self(), \"Hello\"},\n"
                "    receive\n"
                "        {Pid, Message} ->\n"
                "            io:format(\"Received message: ~s~n\", [Message])\n"
                "    end.\n\n"
                "loop() ->\n"
                "    receive\n"
                "        {Sender, Message} ->\n"
                "            Sender ! {self(), Message}\n"
                "    end.\n"
                "# This will send the message 'Hello' to the spawned process.\n"
                "```\n"
            ),
            "Distributed Systems": (
                "Learn about distributed systems in Erlang using nodes and message passing.\n\n"
                "Erlang provides built-in support for distributed programming.\n\n"
                "Example:\n"
                "```erlang\n\n"
                "-module(distributed).\n"
                "-export([start/0, send_message/2]).\n\n"
                "start() ->\n"
                "    net_adm:ping('node@hostname').\n\n"
                "send_message(Node, Message) ->\n"
                "    Node ! {self(), Message}.\n"
                "# This will send a message to the specified node.\n"
                "```\n\n"
                "Example:\n"
                "```erlang\n\n"
                "-module(distributed).\n"
                "-export([start/0, send_message/2]).\n\n"
                "start() ->\n"
                "    net_adm:ping('node@hostname').\n\n"
                "send_message(Node, Message) ->\n"
                "    Node ! {self(), Message}.\n\n"
                "receive\n"
                "    {Sender, Message} ->\n"
                "        io:format(\"Received message from ~p: ~s~n\", [Sender, Message])\n"
                "end.\n"
                "# This will send a message to the specified node.\n"
                "```\n\n"
                "Example:\n"
                "```erlang\n\n"
                "-module(distributed).\n"
                "-export([start/0, send_message/2]).\n\n"
                "start() ->\n"
                "    net_adm:ping('node@hostname').\n\n"
                "send_message(Node, Message) ->\n"
                "    Node ! {self(), Message}.\n\n"
                "receive\n"
                "    {Sender, Message} ->\n"
                "        io:format(\"Received message from ~p: ~s~n\", [Sender, Message])\n"
                "end.\n\n"
                "loop() ->\n"
                "    receive\n"
                "        {Sender, Message} ->\n"
                "            Sender ! {self(), Message},\n"
                "            loop()\n"
                "    end.\n\n"
                "start() ->\n"
                "    net_adm:ping('node@hostname'),\n"
                "    Pid = spawn(fun loop/0),\n"
                "    Pid ! {self(), \"Hello\"},\n"
                "    receive\n"
                "        {Pid, Message} ->\n"
                "            io:format(\"Received message: ~s~n\", [Message])\n"
                "    end.\n"
                "# This will send the message 'Hello' to the specified node.\n"
                "```\n"
            )
        },
        "F#": {
            "Basics": (
                "Learn F# syntax, variables, and basic programming constructs.\n\n"
                "In F#, you can declare variables using the let keyword.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the let keyword.\n\n"
                "Comments in F# start with // for single-line comments and (* ... *) for multi-line comments.\n\n"
                "To begin coding in F#, first, you need to install F# on your system.\n\n"
                "You can download F# from the official website: https://fsharp.org/\n\n"
                "Once installed, you can write F# code in a text editor or an Integrated Development Environment (IDE) like Visual Studio or JetBrains Rider.\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "let x = 10\n"
                "let y = 20\n"
                "printfn \"The sum is: %d\" (x + y)\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "let name = \"Jesus\"\n"
                "printfn \"Hello, %s!\" name\n"
                "# Output: Hello, Jesus!\n"
                "```\n\n"
                "To print a variable, you can use the printfn function. You can also use string interpolation to include variables in strings.\n\n"
                "In F#, you can use the System.Console.ReadLine() function to read user input from the console.\n\n"
                "The ReadLine() function returns the input as a string.\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "let inputValue = System.Console.ReadLine()\n"
                "printfn \"You entered: %s\" inputValue\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "let playerName = System.Console.ReadLine()\n"
                "printfn \"Welcome, %s!\" playerName\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "Functional Programming": (
                "Understand functional programming concepts in F#, including higher-order functions and immutability.\n\n"
                "F# is a functional-first programming language that runs on the .NET platform.\n\n"
                "Higher-order functions are functions that can take other functions as arguments or return functions as results.\n\n"
                "Immutability is a key concept in functional programming where data cannot be modified after it is created.\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "let double x = x * 2\n"
                "printfn \"%d\" (double 5)\n"
                "# Output: 10\n"
                "# This will print the double of 5.\n"
                "```\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "let rec factorial n =\n"
                "    if n = 0 then 1\n"
                "    else n * factorial (n - 1)\n\n"
                "printfn \"%d\" (factorial 5)\n"
                "# Output: 120\n"
                "# This will print the factorial of 5.\n"
                "```\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "let numbers = [1; 2; 3]\n"
                "let doubled = List.map (fun x -> x * 2) numbers\n"
                "printfn \"%A\" doubled\n"
                "# Output: [2; 4; 6]\n"
                "# This will print the doubled list.\n"
                "```\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "let numbers = [1; 2; 3]\n"
                "let sum = List.fold (fun acc x -> acc + x) 0 numbers\n"
                "printfn \"%d\" sum\n"
                "# Output: 6\n"
                "# This will print the sum of the list.\n"
                "```\n"
            ),
            "Data Science": (
                "Learn about data science libraries in F# for data manipulation and analysis.\n\n"
                "F# provides libraries like Deedle and Math.NET Numerics for data manipulation and numerical computations.\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "open Deedle\n\n"
                "let df = Frame.ofColumns [ \"A\" => [1; 2; 3]; \"B\" => [4; 5; 6] ]\n"
                "printfn \"%A\" df\n"
                "# This will print the DataFrame.\n"
                "```\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "open MathNet.Numerics.LinearAlgebra\n\n"
                "let matrix = DenseMatrix.ofArray2 [[|1.0; 2.0|]; [|3.0; 4.0|]]\n"
                "printfn \"%A\" matrix\n"
                "# This will print the matrix.\n"
                "```\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "open MathNet.Numerics\n\n"
                "let x = [|1.0; 2.0; 3.0|]\n"
                "let y = [|4.0; 5.0; 6.0|]\n"
                "let correlation = Statistics.Correlation.Pearson(x, y)\n"
                "printfn \"Correlation: %f\" correlation\n"
                "# This will print the correlation coefficient.\n"
                "```\n\n"
                "Example:\n"
                "```fsharp\n\n"
                "open MathNet.Numerics\n\n"
                "let x = [|1.0; 2.0; 3.0|]\n"
                "let y = [|4.0; 5.0; 6.0|]\n"
                "let regression = Statistics.LinearRegression(x, y)\n"
                "printfn \"Slope: %f, Intercept: %f\" regression.Slope regression.Intercept\n"
                "# This will print the slope and intercept of the regression line.\n"
                "```\n\n"
            )
        },
        "Kotlin": {
            "Basics": (
                "Learn Kotlin syntax, variables, and basic programming constructs.\n\n"
                "In Kotlin, you can declare variables using 'val' for immutable variables and 'var' for mutable variables.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "A variable is a name that refers to a value. You can create a variable by assigning a value to it using the equals sign (=).\n\n"
                "Comments in Kotlin start with // for single-line comments and /* ... */ for multi-line comments.\n\n"
                "To begin coding in Kotlin, first, you need to install Kotlin on your system.\n\n"
                "You can download Kotlin from the official website: https://kotlinlang.org/\n\n"
                "Once installed, you can write Kotlin code in a text editor or an Integrated Development Environment (IDE) like IntelliJ IDEA or Android Studio.\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "fun main() {\n"
                "    val name = \"Jesus\"\n"
                "    println(\"Hello, $name!\")\n"
                "}\n"
                "# Output: Hello, Jesus!\n"
                "```\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "fun main() {\n"
                "    val x = 10\n"
                "    val y = 20\n"
                "    println(\"The sum is: ${x + y}\")\n"
                "}\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "fun main() {\n"
                "    val input = readLine()\n"
                "    println(\"You entered: $input\")\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "To print a variable, you can use the println() function. You can also use string templates to include variables in strings.\n\n"
                "In Kotlin, you can use the readLine() function to read user input from the console.\n\n"
                "The readLine() function returns the input as a string, so you may need to convert it to the desired type (e.g., Int, Double) using type conversion functions like toInt() or toDouble().\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "fun main() {\n"
                "    println(\"Enter a number:\")\n"
                "    val input = readLine()?.toIntOrNull()\n"
                "    if (input != null) {\n"
                "        println(\"You entered: $input\")\n"
                "    } else {\n"
                "        println(\"Invalid input!\")\n"
                "    }\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "fun main() {\n"
                "    println(\"Enter your name:\")\n"
                "    val name = readLine()\n"
                "    println(\"Welcome, $name!\")\n"
                "}\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "Android Development": (
                "Build Android apps using Kotlin and Android Studio.\n\n"
                "Kotlin is the preferred language for Android development.\n\n"
                "You can create Android applications using Android Studio, which provides a rich development environment.\n\n"
                "Example (Activity):\n"
                "```kotlin\n\n"
                "import android.os.Bundle\n"
                "import androidx.appcompat.app.AppCompatActivity\n\n"
                "class MainActivity : AppCompatActivity() {\n"
                "    override fun onCreate(savedInstanceState: Bundle?) {\n"
                "        super.onCreate(savedInstanceState)\n"
                "        setContentView(R.layout.activity_main)\n"
                "    }\n"
                "}\n"
                "# This is a basic Android activity.\n"
                "```\n\n"
                "Example (Fragment):\n"
                "```kotlin\n\n"
                "import android.os.Bundle\n"
                "import androidx.fragment.app.Fragment\n\n"
                "class MyFragment : Fragment() {\n"
                "    override fun onCreateView(\n"
                "        inflater: LayoutInflater, container: ViewGroup?,\n"
                "        savedInstanceState: Bundle?\n"
                "    ): View? {\n"
                "        return inflater.inflate(R.layout.fragment_my, container, false)\n"
                "    }\n"
                "}\n"
                "# This is a basic Android fragment.\n"
                "```\n\n"
                "Example (ViewModel):\n"
                "```kotlin\n\n"
                "import androidx.lifecycle.LiveData\n"
                "import androidx.lifecycle.MutableLiveData\n"
                "import androidx.lifecycle.ViewModel\n\n"
                "class MyViewModel : ViewModel() {\n"
                "    private val _text = MutableLiveData<String>()\n"
                "    val text: LiveData<String> get() = _text\n\n"
                "    fun setText(value: String) {\n"
                "        _text.value = value\n"
                "    }\n"
                "}\n"
                "# This is a basic Android ViewModel.\n"
                "```\n\n"
                "Example (RecyclerView):\n"
                "```kotlin\n\n"
                "import android.view.LayoutInflater\n"
                "import android.view.View\n"
                "import android.view.ViewGroup\n"
                "import android.widget.TextView\n"
                "import androidx.recyclerview.widget.RecyclerView\n\n"
                "class MyAdapter(private val data: List<String>) : RecyclerView.Adapter<MyAdapter.ViewHolder>() {\n"
                "    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n"
                "        val textView: TextView = view.findViewById(R.id.text_view)\n"
                "    }\n\n"
                "    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n"
                "        val view = LayoutInflater.from(parent.context)\n"
                "            .inflate(R.layout.item_view, parent, false)\n"
                "        return ViewHolder(view)\n"
                "    }\n\n"
                "    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n"
                "        holder.textView.text = data[position]\n"
                "    }\n\n"
                "    override fun getItemCount(): Int {\n"
                "        return data.size\n"
                "    }\n"
                "}\n"
                "# This is a basic Android RecyclerView adapter.\n"
                "```\n"
            ),
            "Coroutines": (
                "Understand asynchronous programming with Kotlin coroutines.\n\n"
                "Coroutines are a way to write asynchronous code in a sequential manner.\n\n"
                "They help manage background tasks without blocking the main thread.\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "import kotlinx.coroutines.*\n\n"
                "fun main() = runBlocking {\n"
                "    launch {\n"
                "        delay(1000L)\n"
                "        println(\"World!\")\n"
                "    }\n"
                "    println(\"Hello,\")\n"
                "}\n"
                "# Output:\n"
                "# Hello,\n"
                "# World!\n"
                "# This demonstrates the use of coroutines in Kotlin.\n"
                "```\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "import kotlinx.coroutines.*\n\n"
                "fun main() = runBlocking {\n"
                "    val job = launch {\n"
                "        repeat(5) { i ->\n"
                "            println(\"Coroutine: $i\")\n"
                "            delay(500L)\n"
                "        }\n"
                "    }\n"
                "    println(\"Main thread is waiting...\")\n"
                "    job.join()\n"
                "    println(\"Coroutine completed!\")\n"
                "}\n"
                "# Output:\n"
                "# Main thread is waiting...\n"
                "# Coroutine: 0\n"
                "# Coroutine: 1\n"
                "# Coroutine: 2\n"
                "# Coroutine: 3\n"
                "# Coroutine: 4\n"
                "# Coroutine completed!\n"
                "# This demonstrates the use of coroutines in Kotlin.\n"
                "```\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "import kotlinx.coroutines.*\n\n"
                "fun main() = runBlocking {\n"
                "    val deferred = async {\n"
                "        delay(1000L)\n"
                "        \"Result from async\"\n"
                "    }\n"
                "    println(\"Waiting for result...\")\n"
                "    val result = deferred.await()\n"
                "    println(\"Received: $result\")\n"
                "}\n"
                "# Output:\n"
                "# Waiting for result...\n"
                "# Received: Result from async\n"
                "# This demonstrates the use of async and await in coroutines.\n"
                "```\n\n"
                "Example:\n"
                "```kotlin\n\n"
                "import kotlinx.coroutines.*\n\n"
                "fun main() = runBlocking {\n"
                "    val job = launch(Dispatchers.IO) {\n"
                "        println(\"Running in IO thread\")\n"
                "        delay(1000L)\n"
                "        println(\"Finished IO task\")\n"
                "    }\n"
                "    val job2 = launch(Dispatchers.Main) {\n"
                "        println(\"Running in Main thread\")\n"
                "        delay(500L)\n"
                "        println(\"Finished Main task\")\n"
                "    }\n"
                "    job.join()\n"
                "    job2.join()\n"
                "    println(\"All tasks completed!\")\n"
                "}\n"
                "# Output:\n"
                "# Running in IO thread\n"
                "# Running in Main thread\n"
                "# Finished Main task\n"
                "# Finished IO task\n"
                "# All tasks completed!\n"
                "# This demonstrates the use of different dispatchers for coroutines.\n"
                "```\n"
            )
        },
        "Rust": {
            "Basics": (
                "Learn Rust syntax, ownership, and borrowing.\n\n"
                "Rust is a systems programming language that focuses on safety and performance.\n\n"
                "It uses a unique ownership model to manage memory without a garbage collector.\n\n"
                "You can declare variables using 'let', and mutable variables using 'let mut'.\n\n"
                "Pointers are used to reference memory locations, and Rust has a strong emphasis on memory safety.\n\n"
                "Comments in Rust start with // for single-line comments and /* ... */ for multi-line comments.\n\n"
                "To begin coding in Rust, first, you need to install Rust on your system.\n\n"
                "You can download Rust from the official website: https://www.rust-lang.org/\n\n"
                "Once installed, you can write Rust code in a text editor or an Integrated Development Environment (IDE) like Visual Studio Code or IntelliJ IDEA.\n\n"
                "Example:\n"
                "```rust\n\n"
                "fn main() {\n"
                "    let x = 5;\n"
                "    let y = 10;\n"
                "    println!(\"The sum is: {}\", x + y);\n"
                "}\n"
                "# Output: The sum is: 15\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "fn main() {\n"
                "    let name = \"Buddha\";\n"
                "    println!(\"Hello, {}!\", name);\n"
                "}\n"
                "# Output: Hello, Buddha!\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::io;\n\n"
                "fn main() {\n"
                "    let mut input = String::new();\n"
                "    println!(\"Enter a number:\");\n"
                "    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n"
                "    let input: i32 = input.trim().parse().expect(\"Please enter a number\");\n"
                "    println!(\"You entered: {}\", input);\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "To print a variable, you can use the println!() macro. You can also use format strings to include variables in strings.\n\n"
                "In Rust, you can use the 'std::io' module to read user input from the console.\n\n"
                "The 'read_line()' method reads a line of input and stores it in a mutable string variable.\n\n"
                "You can then convert the string to the desired type (e.g., i32) using the 'parse()' method.\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::io;\n\n"
                "fn main() {\n"
                "    let mut input = String::new();\n"
                "    println!(\"Enter your name:\");\n"
                "    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n"
                "    let name = input.trim();\n"
                "    println!(\"Welcome, {}!\", name);\n"
                "}\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::io;\n\n"
                "fn main() {\n"
                "    let mut input = String::new();\n"
                "    println!(\"Enter your age:\");\n"
                "    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n"
                "    let age: i32 = input.trim().parse().expect(\"Please enter a number\");\n"
                "    println!(\"You are {} years old.\", age);\n"
                "}\n"
                "# Output: You are <user_input> years old.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::io::result::Result;\n\n"
                "fn main() -> Result<()> {\n"
                "    let mut input = String::new();\n"
                "    println!(\"Enter your favorite color:\");\n"
                "    std::io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n"
                "    let color = input.trim();\n"
                "    println!(\"Your favorite color is {}!\", color);\n"
                "    Ok(())\n"
                "}\n"
                "# Output: Your favorite color is <user_input>!\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::io::{self, Write};\n\n"
                "fn main() {\n"
                "    let mut input = String::new();\n"
                "    print!(\"Enter your favorite programming language: \");\n"
                "    io::stdout().flush().unwrap(); // Ensure the prompt is printed before reading input\n"
                "    io::stdin().read_line(&mut input).expect(\"Failed to read line\");\n"
                "    let language = input.trim();\n"
                "    println!(\"Your favorite programming language is {}!\", language);\n"
                "}\n"
                "# Output: Your favorite programming language is <user_input>!\n"
                "```\n"
            ),
            "Memory Safety": (
                "Understand how Rust ensures memory safety without garbage collection.\n\n"
                "Rust's ownership system ensures that there are no dangling pointers and that memory is freed when it is no longer needed.\n\n"
                "Threads can be used for concurrent programming, and Rust's ownership model"
                "This is achieved through the concepts of ownership, borrowing, and lifetimes.\n\n"
                "Rust can be used for other programming languages, such as C and C++, to ensure memory safety.\n\n"
                "Polar is a Rust-based DataFrame library that provides a safe and efficient way to handle data.\n\n"
                "Example:\n"
                "```rust\n\n"
                "fn main() {\n"
                "    let s1 = String::from(\"hello\");\n"
                "    let s2 = s1; // Ownership is moved to s2\n"
                "    // println!(\"{}\", s1); // This would cause a compile-time error\n"
                "    println!(\"{}\", s2);\n"
                "# Output: hello\n"
                "# This demonstrates ownership in Rust.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "fn main() {\n"
                "    let s1 = String::from(\"hello\");\n"
                "    let len = calculate_length(&s1); // Borrowing s1\n"
                "    println!(\"The length of '{}' is {}.\", s1, len);\n"
                "}\n\n"
                "fn calculate_length(s: &String) -> usize {\n"
                "    s.len() // s is a reference to the String\n"
                "}\n"
                "# Output: The length of 'hello' is 5.\n"
                "# This demonstrates borrowing in Rust.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "fn main() {\n"
                "    let s1 = String::from(\"hello\");\n"
                "    let r1 = &s1; // Immutable borrow\n"
                "    let r2 = &s1; // Another immutable borrow\n"
                "    println!(\"{} and {}\", r1, r2);\n"
                "    // let r3 = &mut s1; // This would cause a compile-time error\n"
                "    // println!(\"{}\", r3);\n"
                "}\n"
                "# Output: hello and hello\n"
                "# This demonstrates borrowing in Rust.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use polar::prelude::*;\n\n"
                "fn main() {\n"
                "    let df = DataFrame::new(vec![\n"
                "        Series::new(\"A\", vec![1, 2, 3]),\n"
                "        Series::new(\"B\", vec![4, 5, 6]),\n"
                "    ]).unwrap();\n\n"
                "    let filtered_df = df.filter(&df.column(\"A\").unwrap().gt(1)).unwrap();\n"
                "    println!(\"Filtered DataFrame:\");\n"
                "    println!(\"{:?}\", filtered_df);\n"
                "# Output: Filtered DataFrame:\n"
                "# shape: (2, 2)\n"
                "# ┌─────┬─────┐\n"
                "# │ A   ┆ B   │\n"
                "# │ --- ┆ --- │\n"
                "# │ i64 ┆ i64 │\n"
                "# ╞═════╪═════╡\n"
                "# │ --- ┆ --- │\n"
                "# │ --- ┆ --- │\n"
                "# ├─────┼─────┤\n"
                "# │ 2   ┆ 5   │\n"
                "# │ 3   ┆ 6   │\n"
                "# └─────┴─────┘\n"
                "}\n"
                "# This demonstrates how to use Polar for data manipulation in Rust.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::sync::{Arc, Mutex};\n"
                "use std::thread;\n\n"
                "fn main() {\n"
                "    let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n"
                "    let mut handles = vec![];\n\n"
                "    for i in 0..10 {\n"
                "        let data = Arc::clone(&data);\n"
                "        let handle = thread::spawn(move || {\n"
                "            let mut data = data.lock().unwrap();\n"
                "            data.push(i);\n"
                "            println!(\'Thread {}: {:?}', i, *data);\n"
                "        });\n"
                "        handles.push(handle);\n"
                "    }\n\n"
                "    for handle in handles {\n"
                "        handle.join().unwrap();\n"
                "    }\n\n"
                "    println!(\"Final data: {:?}\", *data.lock().unwrap());\n"
                "# Output: Final data: [1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
                "}\n"
                "# This demonstrates safe concurrent access to a shared variable using Arc and Mutex.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::thread;\n\n"
                "fn main() {\n"
                "    let handle = thread::spawn(|| {\n"
                "        for i in 1..5 {\n"
                "            println!(\"Thread: {}\", i);\n"
                "        }\n"
                "    });\n\n"
                "    for i in 1..5 {\n"
                "        println!(\"Main: {}\", i);\n"
                "    }\n\n"
                "    handle.join().unwrap();\n"
                "}\n"
                "# Output:\n"
                "# Main: 1\n"
                "# Thread: 1\n"
                "# Main: 2\n"
                "# Thread: 2\n"
                "# ... (order may vary)\n"
                "# This demonstrates creating a thread and joining it.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use polar::prelude::*;\n\n"
                "fn main() -> Result<()> {\n"
                "    Let df = CsvReader::new(\"data.csv\")\n"
                "        .has_header(true)\n"
                "        .finish()?\n"
                "        .unwrap();\n\n"
                "    let filtered_df = df.filter(&df.column(\"A\").unwrap().gt(1))?\n"
                "        .unwrap();\n\n"
                "    println!(\"Filtered DataFrame:\");\n"
                "    println!(\"{:?}\", filtered_df);\n"
                "# Output: Filtered DataFrame:\n"
                "# shape: (2, 2)\n"
                "# ┌─────┬─────┐\n"
                "# │ A   ┆ B   │\n"
                "# │ --- ┆ --- │\n"
                "# │ i64 ┆ i64 │\n"
                "# ╞═════╪═════╡\n"
                "# │ --- ┆ --- │\n"
                "# │ --- ┆ --- │\n"
                "# ├─────┼─────┤\n"
                "# │ 2   ┆ 5   │\n"
                "# │ 3   ┆ 6   │\n"
                "# └─────┴─────┘\n"
                "}\n"
                "# This demonstrates how to use Polar for data manipulation in Rust.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::env;\n\n"
                "use std::fs::File;\n"
                "use std::io::{self, BufRead};\n\n"
                "fn main() -> io::Result<()> {\n"
                "    let args: Vec<String> = env::args().collect();\n"
                "    if args.len() < 2 {\n"
                "        eprintln!(\"Usage: {} <filename>\", args[0]);\n"
                "        return Ok(());\n"
                "    }\n\n"
                "    let file = File::open(&args[1])?;\n"
                "    let reader = io::BufReader::new(file);\n\n"
                "    for line in reader.lines() {\n"
                "        let line = line?;\n"
                "        println!(\"{}\", line);\n"
                "    }\n\n"
                "    Ok(())\n"
                "# This demonstrates reading a file line by line in Rust.\n"
                "}\n"
                "```\n"
                
            ),
            "Concurrency": (
                "Explore Rust's concurrency model and how to write safe concurrent code.\n\n"
                "Rust provides built-in support for concurrency through threads and message passing.\n\n"
                "You can create threads using the 'std::thread' module.\n\n"
                "Threads can be spawned to run concurrently, allowing for parallel execution of tasks.\n\n"
                "You can manually dereference a pointer using the '*' operator.\n\n"
                "Rust's ownership system ensures that data is safely shared between threads.\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::thread;\n\n"
                "fn main() {\n"
                "    const NUM_THREADS: usize = 5;\n"
                "    let mut handles = vec![];\n\n"
                "    for i in 0..NUM_THREADS {\n"
                "        let handle = thread::spawn(move || {\n"
                "            println!(\"Thread {} is running!\", i);\n"
                "        });\n"
                "        handles.push(handle);\n"
                "    }\n\n"
                "    for handle in handles {\n"
                "        handle.join().unwrap();\n"
                "    }\n\n"
                "    println!(\"All threads have completed!\");\n"
                "# Output: All threads have completed!\n"
                "}\n"
                "# This demonstrates creating multiple threads in Rust.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::thread;\n"
                "fn main() {\n"
                "    let handle = thread::spawn(|| {\n"
                "        for i in 1..5 {\n"
                "            println!(\"Thread: {}\", i);\n"
                "        }\n"
                "    });\n\n"
                "    for i in 1..5 {\n"
                "        println!(\"Main: {}\", i);\n"
                "    }\n\n"
                "    handle.join().unwrap();\n"
                "}\n"
                "# Output:\n"
                "# Main: 1\n"
                "# Thread: 1\n"
                "# Main: 2\n"
                "# Thread: 2\n"
                "# ... (order may vary)\n"
                "# This demonstrates creating a thread and joining it.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::sync::{Arc, Mutex};\n"
                "use std::thread;\n\n"
                "fn main() {\n"
                "    let counter = Arc::new(Mutex::new(0));\n"
                "    let mut handles = vec![];\n\n"
                "    for _ in 0..10 {\n"
                "        let counter = Arc::clone(&counter);\n"
                "        let handle = thread::spawn(move || {\n"
                "            let mut num = counter.lock().unwrap();\n"
                "            *num += 1;\n"
                "        });\n"
                "        handles.push(handle);\n"
                "    }\n\n"
                "    for handle in handles {\n"
                "        handle.join().unwrap();\n"
                "    }\n\n"
                "    println!(\"Result: {}\", *counter.lock().unwrap());\n"
                "# Output: Result: 10\n"
                "}\n"
                "# This demonstrates safe concurrent access to a shared variable using Arc and Mutex.\n"
                "```\n\n"
                "Example:\n"
                "```rust\n\n"
                "use std::sync::{Arc, Mutex};\n"
                "use std::ops::Deref;\n"
                "use std::thread;\n\n"
                "fn main() {\n"
                "    let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n"
                "    let mut handles = vec![];\n\n"
                "    for i in 0..10 {\n"
                "        let data = Arc::clone(&data);\n"
                "        let handle = thread::spawn(move || {\n"
                "            let mut data = data.lock().unwrap();\n"
                "            data.push(i);\n"
                "            println!(\"Thread {}: {:?}\", i, data.deref());\n"
                "        });\n"
                "        handles.push(handle);\n"
                "    }\n\n"
                "    for handle in handles {\n"
                "        handle.join().unwrap();\n"
                "    }\n\n"
                "    println!(\"Final data: {:?}\", *data.lock().unwrap());\n"
                "# Output: Final data: [1, 2, 3, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
                "}\n"
                "# This demonstrates safe concurrent access to a shared variable using Arc and Mutex.\n"
                "```\n"
            )
        },
        "Java": {
            "Basics": (
                "Learn Java syntax, variables, and basic programming constructs.\n\n"
                "In Java, you can declare variables with specific data types like int, double, String, etc.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "Comments in Java start with // for single-line comments and /* ... */ for multi-line comments.\n\n"
                "To begin coding in Java, first, you need to install Java Development Kit (JDK) on your system.\n\n"
                "You can download JDK from the official website: https://www.oracle.com/java/technologies/javase-jdk11-downloads.html\n\n"
                "Once installed, you can write Java code in a text editor or an Integrated Development Environment (IDE) like IntelliJ IDEA or Eclipse.\n\n"
                "Example:\n"
                "```java\n\n"
                "public class Main {\n"
                "    public static void main(String[] args) {\n"
                "        int x = 10;\n"
                "        int y = 20;\n"
                "        System.out.println(\"The sum is: \" + (x + y));\n"
                "    }\n"
                "}\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```java\n\n"
                "public class Main {\n"
                "    public static void main(String[] args) {\n"
                "        String name = \"Scorpion\";\n"
                "        System.out.println(\"Hello, \" + name + \"!\");\n"
                "    }\n"
                "}\n"
                "# Output: Hello, Scorpion!\n"
                "```\n\n"
                "Example:\n"
                "```java\n\n"
                "import java.util.Scanner;\n\n"
                "public class Main {\n"
                "    public static void main(String[] args) {\n"
                "        Scanner scanner = new Scanner(System.in);\n"
                "        System.out.print(\"Enter a number: \");\n"
                "        int input = scanner.nextInt();\n"
                "        System.out.println(\"You entered: \" + input);\n"
                "        scanner.close();\n"
                "    }\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "To print a variable, you can use the System.out.println() method. You can also use string concatenation to include variables in strings.\n\n"
                "In Java, you can use the Scanner class to read user input from the console.\n\n"
                "The Scanner class provides methods like nextInt(), nextLine(), etc., to read different types of input.\n\n"
                "Example:\n"
                "```java\n\n"
                "import java.util.Scanner;\n\n"
                "public class Main {\n"
                "    public static void main(String[] args) {\n"
                "        Scanner scanner = new Scanner(System.in);\n"
                "        System.out.print(\"Enter your name: \");\n"
                "        String name = scanner.nextLine();\n"
                "        System.out.println(\"Welcome, \" + name + \"!\");\n"
                "        scanner.close();\n"
                "    }\n"
                "}\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "OOP": (
                "Understand Object-Oriented Programming in Java, including classes, objects, inheritance, and polymorphism.\n\n"
                "In Java, you can define a class using the 'class' keyword. A class is a blueprint for creating objects.\n\n"
                "An object is an instance of a class. You can create an object by calling the class as if it were a function.\n\n"
                "Inheritance allows you to create a new class that is based on an existing class. The new class inherits attributes and methods from the existing class.\n\n"
                "Polymorphism allows you to define methods in the child class with the same name as those in the parent class.\n\n"
                "Example:\n"
                "```java\n\n"
                "class Animal {\n"
                "    String name;\n"
                "    Animal(String name) {\n"
                "        this.name = name;\n"
                "    }\n"
                "    void speak() {\n"
                "        System.out.println(name + \" makes a sound.\");\n"
                "    }\n"
                "}\n\n"
                "class Dog extends Animal {\n"
                "    Dog(String name) {\n"
                "        super(name);\n"
                "    }\n"
                "    @Override\n"
                "    void speak() {\n"
                "        System.out.println(name + \" barks.\");\n"
                "    }\n"
                "}\n\n"
                "public class Main {\n"
                "    public static void main(String[] args) {\n"
                "        Dog dog = new Dog(\"Buddy\");\n"
                "        dog.speak();\n"
                "    }\n"
                "}\n"
                "# Output: Buddy barks.\n"
                "```\n\n"
                "Example:\n"
                "```java\n\n"
                "class Richie {\n"
                "    String name;\n"
                "    Richie(String name) {\n"
                "        this.name = name;\n"
                "    }\n"
                "    void greet() {\n"
                "        System.out.println(\"Hello, \" + name + \"!\");\n"
                "    }\n"
                "}\n\n"
                "class Sigma extends Richie {\n"
                "    Sigma(String name) {\n"
                "        super(name);\n"
                "    }\n"
                "    @Override\n"
                "    void greet() {\n"
                "        System.out.println(\"Sigma \" + name + \" is here!\");\n"
                "    }\n"
                "}\n\n"
                "public class Main {\n"
                "    public static void main(String[] args) {\n"
                "        Sigma sigma = new Sigma(\"Richie\");\n"
                "        sigma.greet();\n"
                "    }\n"
                "}\n"
                "# Output: Sigma Richie is here!\n"
                "```\n"
            ),
            "Spring Framework": (
                "Explore the Spring Framework for building enterprise-level applications.\n\n"
                "Spring is a powerful framework for building Java applications. It provides comprehensive infrastructure support for developing Java applications.\n\n"
                "You can create web applications using Spring Boot, which simplifies the setup and development of new Spring applications.\n\n"
                "Example (Basic Spring Boot Application):\n"
                "```java\n\n"
                "import org.springframework.boot.SpringApplication;\n"
                "import org.springframework.boot.autoconfigure.SpringBootApplication;\n"
                "import org.springframework.web.bind.annotation.GetMapping;\n"
                "import org.springframework.web.bind.annotation.RestController;\n\n"
                "@SpringBootApplication\n"
                "public class MainApplication {\n"
                "    public static void main(String[] args) {\n"
                "        SpringApplication.run(MainApplication.class, args);\n"
                "    }\n"
                "}\n\n"
                "@RestController\n"
                "class HelloController {\n"
                "    @GetMapping(\"/\")\n"
                "    public String home() {\n"
                "        return \"Welcome to Spring Boot!\";\n"
                "    }\n"
                "}\n"
                "# Run this application and visit http://localhost:8080/ in your browser.\n"
                "```\n\n"
                "Example (Spring MVC Controller):\n"
                "```java\n\n"
                "import org.springframework.stereotype.Controller;\n"
                "import org.springframework.web.bind.annotation.GetMapping;\n"
                "import org.springframework.web.bind.annotation.RequestMapping;\n"
                "import org.springframework.web.bind.annotation.ResponseBody;\n\n"
                "@Controller\n"
                "@RequestMapping(\"/hello\")\n"
                "public class HelloController {\n"
                "    @GetMapping\n"
                "    @ResponseBody\n"
                "    public String sayHello() {\n"
                "        return \"Hello, Spring MVC!\";\n"
                "    }\n"
                "}\n"
                "# This is a basic Spring MVC controller.\n"
                "```\n\n"
                "Example (Spring Data JPA):\n"
                "```java\n\n"
                "import org.springframework.data.jpa.repository.JpaRepository;\n"
                "import org.springframework.stereotype.Repository;\n\n"
                "@Repository\n"
                "public interface UserRepository extends JpaRepository<User, Long> {\n"
                "    User findByUsername(String username);\n"
                "}\n\n"
                "import org.springframework.beans.factory.annotation.Autowired;\n"
                "import org.springframework.stereotype.Service;\n\n"
                "@Service\n"
                "public class UserService {\n"
                "    @Autowired\n"
                "    private UserRepository userRepository;\n\n"
                "    public User getUserByUsername(String username) {\n"
                "        return userRepository.findByUsername(username);\n"
                "    }\n"
                "}\n"
                "# This demonstrates how to use Spring Data JPA for database operations.\n"
                "```\n\n"
                "Example (Spring Security):\n"
                "```java\n\n"
                "import org.springframework.context.annotation.Bean;\n"
                "import org.springframework.context.annotation.Configuration;\n"
                "import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n"
                "import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n"
                "import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n"
                "import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n"
                "@Configuration\n"
                "@EnableWebSecurity\n"
                "public class SecurityConfig extends WebSecurityConfigurerAdapter {\n"
                "    @Override\n"
                "    protected void configure(HttpSecurity http) throws Exception {\n"
                "        http\n"
                "            .authorizeRequests()\n"
                "            .antMatchers(\"/public/**\").permitAll()\n"
                "            .anyRequest().authenticated()\n"
                "            .and()\n"
                "            .formLogin()\n"
                "            .loginPage(\"/login\")\n"
                "            .permitAll()\n"
                "            .and()\n"
                "            .logout()\n"
                "            .permitAll();\n"
                "    }\n\n"
                "    @Override\n"
                "    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n"
                "        auth\n"
                "            .inMemoryAuthentication()\n"
                "            .withUser(\"user\").password(\"password\").roles(\"USER\")\n"
                "            .and()\n"
                "            .withUser(\"admin\").password(\"admin\").roles(\"ADMIN\");\n"
                "    }\n"
                "}\n"
                "# This demonstrates how to configure Spring Security for a web application.\n"
                "```\n\n"
                "Example (Spring Boot REST API):\n"
                "```java\n\n"
                "import org.springframework.boot.SpringApplication;\n"
                "import org.springframework.boot.autoconfigure.SpringBootApplication;\n"
                "import org.springframework.web.bind.annotation.GetMapping;\n"
                "import org.springframework.web.bind.annotation.RequestMapping;\n"
                "import org.springframework.web.bind.annotation.RestController;\n\n"
                "@SpringBootApplication\n"
                "public class MainApplication {\n"
                "    public static void main(String[] args) {\n"
                "        SpringApplication.run(MainApplication.class, args);\n"
                "    }\n"
                "}\n\n"
                "@RestController\n"
                "@RequestMapping(\"/api\")\n"
                "class ApiController {\n"
                "    @GetMapping(\"/hello\")\n"
                "    public String hello() {\n"
                "        return \"Hello from Spring Boot REST API!\";\n"
                "    }\n"
                "}\n"
                "# Run this application and visit http://localhost:8080/api/hello in your browser.\n"
                "```\n"
            ),
            "Android Development": (
                "Develop Android apps using Java and Android Studio.\n\n"
                "Java is one of the primary languages for Android development.\n\n"
                "You can create Android applications using Android Studio, which provides a rich development environment.\n\n"
                "Example (Basic Activity):\n"
                "```java\n\n"
                "import android.os.Bundle;\n"
                "import androidx.appcompat.app.AppCompatActivity;\n\n"
                "public class MainActivity extends AppCompatActivity {\n"
                "    @Override\n"
                "    protected void onCreate(Bundle savedInstanceState) {\n"
                "        super.onCreate(savedInstanceState);\n"
                "        setContentView(R.layout.activity_main);\n"
                "    }\n"
                "}\n"
                "# This is a basic Android activity.\n"
                "```\n\n"
                "Example (Basic Fragment):\n"
                "```java\n\n"
                "import android.os.Bundle;\n"
                "import androidx.fragment.app.Fragment;\n\n"
                "public class MyFragment extends Fragment {\n"
                "    @Override\n"
                "    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n"
                "                             Bundle savedInstanceState) {\n"
                "        return inflater.inflate(R.layout.fragment_my, container, false);\n"
                "    }\n"
                "}\n"
                "# This is a basic Android fragment.\n"
                "```\n"
            )
        },
        "C++": {
            "Basics": (
                "Learn C++ syntax, variables, and basic programming constructs.\n\n"
                "In C++, you can declare variables with specific data types like int, double, char, etc.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "Comments in C++ start with // for single-line comments and /* ... */ for multi-line comments.\n\n"
                "To begin coding in C++, first, you need to install a C++ compiler on your system.\n\n"
                "You can download a compiler like GCC or use an IDE like Code::Blocks or Visual Studio.\n\n"
                "Once installed, you can write C++ code in a text editor or an Integrated Development Environment (IDE).\n\n"
                "Example:\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    int x = 10;\n"
                "    int y = 20;\n"
                "    cout << \"The sum is: \" << x + y << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    string name = \"Raiden\";\n"
                "    cout << \"Hello, \" << name << \"!\" << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: Hello, Raiden!\n"
                "```\n\n"
                "Example:\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    int input;\n"
                "    cout << \"Enter a number: \";\n"
                "    cin >> input;\n"
                "    cout << \"You entered: \" << input << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "To print a variable, you can use the cout object. You can also use string concatenation to include variables in strings.\n\n"
                "In C++, you can use the 'cin' object to read user input from the console.\n\n"
                "The 'cin' object is used to read input from the standard input stream (usually the keyboard).\n\n"
                "Example:\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    string name;\n"
                "    cout << \"Enter your name: \";\n"
                "    cin >> name;\n"
                "    cout << \"Welcome, \" << name << \"!\" << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "OOP": (
                "Understand Object-Oriented Programming in C++, including classes, objects, inheritance, and polymorphism.\n\n"
                "In C++, you can define a class using the 'class' keyword. A class is a blueprint for creating objects.\n\n"
                "An object is an instance of a class. You can create an object by calling the class as if it were a function.\n\n"
                "Inheritance allows you to create a new class that is based on an existing class. The new class inherits attributes and methods from the existing class.\n\n"
                "Polymorphism allows you to define methods in the child class with the same name as those in the parent class.\n\n"
                "Example:\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "using namespace std;\n\n"
                "class Animal {\n"
                "protected:\n"
                "    string name;\n"
                "public:\n"
                "    Animal(string n) : name(n) {}\n"
                "    virtual void speak() {\n"
                "        cout << name << \" makes a sound.\" << endl;\n"
                "    }\n"
                "};\n\n"
                "class Dog : public Animal {\n"
                "public:\n"
                "    Dog(string n) : Animal(n) {}\n"
                "    void speak() override {\n"
                "        cout << name << \" barks.\" << endl;\n"
                "    }\n"
                "};\n\n"
                "int main() {\n"
                "    Dog dog(\"Buddy\");\n"
                "    dog.speak();\n"
                "    return 0;\n"
                "}\n"
                "# Output: Buddy barks.\n"
                "```\n\n"
                "Example:\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "using namespace std;\n\n"
                "class Richie {\n"
                "protected:\n"
                "    string name;\n"
                "public:\n"
                "    Richie(string n) : name(n) {}\n"
                "    virtual void greet() {\n"
                "        cout << \"Hello, \" << name << \"!\" << endl;\n"
                "    }\n"
                "};\n\n"
                "class Sigma : public Richie {\n"
                "public:\n"
                "    Sigma(string n) : Richie(n) {}\n"
                "    void greet() override {\n"
                "        cout << \"Sigma \" << name << \" is here!\" << endl;\n"
                "    }\n"
                "};\n\n"
                "int main() {\n"
                "    Sigma sigma(\"Richie\");\n"
                "    sigma.greet();\n"
                "    return 0;\n"
                "}\n"
                "# Output: Sigma Richie is here!\n"
                "```\n"
            ),
            "STL": (
                "Explore the Standard Template Library (STL) for data structures and algorithms.\n\n"
                "The STL provides a set of C++ template classes to provide general-purpose classes and functions with templates.\n\n"
                "It includes data structures like vectors, lists, and maps, as well as algorithms for sorting and searching.\n\n"
                "Example (Using a vector):\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "#include <vector>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    vector<int> numbers = {1, 2, 3, 4, 5};\n"
                "    for (int num : numbers) {\n"
                "        cout << num << \" \";\n"
                "    }\n"
                "    cout << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: 1 2 3 4 5\n"
                "# This demonstrates how to use a vector in C++.\n"
                "```\n\n"
                "Example (Using a map):\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "#include <map>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    map<string, int> ages;\n"
                "    ages[\"Alice\"] = 30;\n"
                "    ages[\"Bob\"] = 25;\n"
                "    for (const auto& pair : ages) {\n"
                "        cout << pair.first << \" is \" << pair.second << \" years old.\" << endl;\n"
                "    }\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Alice is 30 years old.\n"
                "# Bob is 25 years old.\n"
                "# This demonstrates how to use a map in C++.\n"
                "```\n\n"
                "Example (Using an algorithm):\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "#include <vector>\n"
                "#include <algorithm>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    vector<int> numbers = {5, 3, 8, 1, 2};\n"
                "    sort(numbers.begin(), numbers.end());\n"
                "    for (int num : numbers) {\n"
                "        cout << num << \" \";\n"
                "    }\n"
                "    cout << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: 1 2 3 5 8\n"
                "# This demonstrates how to use the sort algorithm from STL.\n"
                "```\n\n"
                "Example (Using a set):\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "#include <set>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    set<int> uniqueNumbers;\n"
                "    uniqueNumbers.insert(1);\n"
                "    uniqueNumbers.insert(2);\n"
                "    uniqueNumbers.insert(2); // Duplicate, won't be added\n"
                "    uniqueNumbers.insert(3);\n"
                "    for (int num : uniqueNumbers) {\n"
                "        cout << num << \" \";\n"
                "    }\n"
                "    cout << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: 1 2 3\n"
                "# This demonstrates how to use a set in C++.\n"
                "```\n\n"
                "Example (Using a queue):\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "#include <queue>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    queue<int> q;\n"
                "    q.push(1);\n"
                "    q.push(2);\n"
                "    q.push(3);\n"
                "    while (!q.empty()) {\n"
                "        cout << q.front() << \" \";\n"
                "        q.pop();\n"
                "    }\n"
                "    cout << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: 1 2 3\n"
                "# This demonstrates how to use a queue in C++.\n"
                "```\n\n"
                "Example (Using a stack):\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "#include <stack>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    stack<int> s;\n"
                "    s.push(1);\n"
                "    s.push(2);\n"
                "    s.push(3);\n"
                "    while (!s.empty()) {\n"
                "        cout << s.top() << \" \";\n"
                "        s.pop();\n"
                "    }\n"
                "    cout << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output: 3 2 1\n"
                "# This demonstrates how to use a stack in C++.\n"
                "```\n"
                
            ),
            "Game Development": (
                "Learn how to use C++ for game development with libraries like Unreal Engine.\n\n"
                "C++ is widely used in game development due to its performance and control over system resources.\n\n"
                "Unreal Engine is a powerful game engine that uses C++ for scripting.\n\n"
                "Example (Basic game loop):\n"
                "```cpp\n\n"
                "#include <iostream>\n"
                "using namespace std;\n\n"
                "int main() {\n"
                "    bool isRunning = true;\n"
                "    while (isRunning) {\n"
                "        cout << \"Game is running...\" << endl;\n"
                "        // Add game logic here\n"
                "        isRunning = false; // End the loop for this example\n"
                "    }\n"
                "    cout << \"Game Over!\" << endl;\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Game is running...\n"
                "# Game Over!\n"
                "# This is a basic game loop in C++.\n"
                "```\n\n"
                "Example (Basic Unreal Engine class):\n"
                "```cpp\n\n"
                "#include \"GameFramework/Actor.h\"\n"
                "#include \"MyActor.generated.h\"\n\n"
                "UCLASS()\n"
                "class AMyActor : public AActor {\n"
                "    GENERATED_BODY()\n\n"
                "public:\n"
                "    AMyActor();\n\n"
                "protected:\n"
                "    virtual void BeginPlay() override;\n\n"
                "public:\n"
                "    virtual void Tick(float DeltaTime) override;\n"
                "};\n\n"
                "AMyActor::AMyActor() {\n"
                "    PrimaryActorTick.bCanEverTick = true;\n"
                "}\n\n"
                "void AMyActor::BeginPlay() {\n"
                "    Super::BeginPlay();\n"
                "    UE_LOG(LogTemp, Warning, TEXT(\"MyActor has started!\"));\n"
                "}\n\n"
                "void AMyActor::Tick(float DeltaTime) {\n"
                "    Super::Tick(DeltaTime);\n"
                "    // Add game logic here\n"
                "}\n"
                "# This is a basic Unreal Engine actor class.\n"
                "```\n"
            )
        },
        "C#": {
            "Basics": (
                "Learn C# syntax, variables, and basic programming constructs.\n\n"
                "In C#, you can declare variables with specific data types like int, double, string, etc.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "Comments in C# start with // for single-line comments and /* ... */ for multi-line comments.\n\n"
                "To begin coding in C#, first, you need to install .NET SDK on your system.\n\n"
                "You can download .NET SDK from the official website: https://dotnet.microsoft.com/download\n\n"
                "Once installed, you can write C# code in a text editor or an Integrated Development Environment (IDE) like Visual Studio or Visual Studio Code.\n\n"
                "Example:\n"
                "```csharp\n\n"
                "using System;\n\n"
                "class Program\n"
                "{\n"
                "    static void Main(string[] args)\n"
                "    {\n"
                "        int x = 10;\n"
                "        int y = 20;\n"
                "        Console.WriteLine($\"The sum is: {x + y}\");\n"
                "    }\n"
                "}\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```csharp\n\n"
                "using System;\n\n"
                "class Program\n"
                "{\n"
                "    static void Main(string[] args)\n"
                "    {\n"
                "        string name = \"Batman\";\n"
                "        Console.WriteLine($\"Hello, {name}!\");\n"
                "    }\n"
                "}\n"
                "# Output: Hello, Batman!\n"
                "```\n\n"
                "Example:\n"
                "```csharp\n\n"
                "using System;\n\n"
                "class Program\n"
                "{\n"
                "    static void Main(string[] args)\n"
                "    {\n"
                "        Console.Write(\"Enter a number: \");\n"
                "        int input = Convert.ToInt32(Console.ReadLine());\n"
                "        Console.WriteLine($\"You entered: {input}\");\n"
                "    }\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```csharp\n\n"
                "using System;\n\n"
                "class Program\n"
                "{\n"
                "    static void Main(string[] args)\n"
                "    {\n"
                "        Console.Write(\"Enter a string: \");\n"
                "        string input = Console.ReadLine();\n"
                "        Console.WriteLine($\"You entered: {input}\");\n"
                "    }\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "To print a variable, you can use the Console.WriteLine() method. You can also use string interpolation to include variables in strings.\n\n"
                "In C#, you can use the 'Console' class to read user input from the console.\n\n"
                "The 'Console.ReadLine()' method reads a line of input and returns it as a string.\n\n"
                "You can then convert the string to the desired type (e.g., int) using methods like 'Convert.ToInt32()'.\n\n"
                "Example:\n"
                "```csharp\n\n"
                "using System;\n\n"
                "class Program\n"
                "{\n"
                "    static void Main(string[] args)\n"
                "    {\n"
                "        Console.Write(\"Enter your name: \");\n"
                "        string name = Console.ReadLine();\n"
                "        Console.WriteLine($\"Welcome, {name}!\");\n"
                "    }\n"
                "}\n"
                "# Output: Welcome, <user_input>!\n"
                "```\n"
            ),
            "OOP": (
                "Understand Object-Oriented Programming in C#, including classes, objects, inheritance, and polymorphism.\n\n"
                "In C#, you can define a class using the 'class' keyword. A class is a blueprint for creating objects.\n\n"
                "An object is an instance of a class. You can create an object by calling the class as if it were a function.\n\n"
                "Inheritance allows you to create a new class that is based on an existing class. The new class inherits attributes and methods from the existing class.\n\n"
                "Polymorphism allows you to define methods in the child class with the same name as those in the parent class.\n\n"
                "Example:\n"
                "```csharp\n\n"
                "using System;\n\n"
                "class Animal\n"
                "{\n"
                "    public string Name { get; set; }\n\n"
                "    public Animal(string name)\n"
                "    {\n"
                "        Name = name;\n"
                "    }\n\n"
                "    public virtual void Speak()\n"
                "    {\n"
                "        Console.WriteLine($\"{Name} makes a sound.\");\n"
                "    }\n"
                "}\n\n"
                "class Dog : Animal\n"
                "{\n"
                "    public Dog(string name) : base(name) { }\n\n"
                "    public override void Speak()\n"
                "    {\n"
                "        Console.WriteLine($\"{Name} barks.\");\n"
                "    }\n"
                "}\n\n"
                "class Program\n"
                "{\n"
                "    static void Main(string[] args)\n"
                "    {\n"
                "        Dog dog = new Dog(\"Buddy\");\n"
                "        dog.Speak();\n"
                "    }\n"
                "}\n"
                "# Output: Buddy barks.\n"
                "```\n\n"
                "Example:\n"
                "```csharp\n\n"
                "using System;\n\n"
                "class Richie\n"
                "{\n"
                "    public string Name { get; set; }\n\n"
                "    public Richie(string name)\n"
                "    {\n"
                "        Name = name;\n"
                "    }\n\n"
                "    public virtual void Greet()\n"
                "    {\n"
                "        Console.WriteLine($\"Hello, {Name}!\");\n"
                "    }\n"
                "}\n\n"
                "class Sigma : Richie\n"
                "{\n"
                "    public Sigma(string name) : base(name) { }\n\n"
                "    public override void Greet()\n"
                "    {\n"
                "        Console.WriteLine($\"Sigma {Name} is here!\");\n"
                "    }\n"
                "}\n\n"
                "class Program\n"
                "{\n"
                "    static void Main(string[] args)\n"
                "    {\n"
                "        Sigma sigma = new Sigma(\"Richie\");\n"
                "        sigma.Greet();\n"
                "    }\n"
                "}\n"
                "# Output: Sigma Richie is here!\n"
                "```\n"
            ),
            "Unity Development": (
                "Develop games using Unity and C# scripting.\n\n"
                "Unity is a cross-platform game engine that allows you to create 2D and 3D games.\n\n"
                "C# is the primary language used for scripting in Unity.\n\n"
                "Example (Basic Unity Script):\n"
                "```csharp\n\n"
                "using UnityEngine;\n\n"
                "public class HelloWorld : MonoBehaviour\n"
                "{\n"
                "    void Start()\n"
                "    {\n"
                "        Debug.Log(\"Hello, Unity!\");\n"
                "    }\n"
                "}\n"
                "# Attach this script to a GameObject in Unity and run the scene.\n"
                "```\n\n"
                "Example (Basic Unity Game Loop):\n"
                "```csharp\n\n"
                "using UnityEngine;\n\n"
                "public class GameLoop : MonoBehaviour\n"
                "{\n"
                "    void Update()\n"
                "    {\n"
                "        if (Input.GetKeyDown(KeyCode.Space))\n"
                "        {\n"
                "            Debug.Log(\"Space key pressed!\");\n"
                "        }\n"
                "    }\n"
                "}\n"
                "# Attach this script to a GameObject in Unity and run the scene.\n"
                "```\n\n"
                "Example (Basic Unity UI):\n"
                "```csharp\n\n"
                "using UnityEngine;\n"
                "using UnityEngine.UI;\n\n"
                "public class UIExample : MonoBehaviour\n"
                "{\n"
                "    public Text myText;\n\n"
                "    void Start()\n"
                "    {\n"
                "        myText.text = \"Hello, Unity UI!\";\n"
                "    }\n"
                "}\n"
                "# Attach this script to a GameObject with a Text component in Unity and run the scene.\n"
                "```\n"
            ),
            "ASP.NET": (
                "Build web applications using the ASP.NET framework.\n\n"
                "ASP.NET is a web framework for building modern web apps and services with .NET.\n\n"
                "You can create web applications using ASP.NET Core, which is a cross-platform version of ASP.NET.\n\n"
                "Example (Basic ASP.NET Core Application):\n"
                "```csharp\n\n"
                "using Microsoft.AspNetCore.Builder;\n"
                "using Microsoft.AspNetCore.Hosting;\n"
                "using Microsoft.Extensions.DependencyInjection;\n"
                "using Microsoft.Extensions.Hosting;\n\n"
                "var builder = WebApplication.CreateBuilder(args);\n"
                "var app = builder.Build();\n\n"
                "app.MapGet(\"/\", () => \"Welcome to ASP.NET Core!\");\n\n"
                "app.Run();\n"
                "# Run this application and visit http://localhost:5000/ in your browser.\n"
                "```\n\n"
                "Example (Basic ASP.NET MVC Controller):\n"
                "```csharp\n\n"
                "using Microsoft.AspNetCore.Mvc;\n\n"
                "public class HomeController : Controller\n"
                "{\n"
                "    public IActionResult Index()\n"
                "    {\n"
                "        return View();\n"
                "    }\n"
                "}\n"
                "# This is a basic ASP.NET MVC controller.\n"
                "```\n\n"
                "Example (Basic ASP.NET Web API):\n"
                "```csharp\n\n"
                "using Microsoft.AspNetCore.Mvc;\n\n"
                "[ApiController]\n"
                "[Route(\"api/[controller]\")]\n"
                "public class HelloController : ControllerBase\n"
                "{\n"
                "    [HttpGet]\n"
                "    public IActionResult Get()\n"
                "    {\n"
                "        return Ok(\"Hello, ASP.NET Web API!\");\n"
                "    }\n"
                "}\n"
                "# This is a basic ASP.NET Web API controller.\n"
                "```\n\n"
                "Example (Basic ASP.NET Razor Page):\n"
                "```csharp\n\n"
                "using Microsoft.AspNetCore.Mvc;\n"
                "using Microsoft.AspNetCore.Mvc.RazorPages;\n\n"
                "public class IndexModel : PageModel\n"
                "{\n"
                "    public void OnGet()\n"
                "    {\n"
                "        // Handle GET request\n"
                "    }\n"
                "}\n"
                "# This is a basic ASP.NET Razor Page model.\n"
                "```\n"
            )
        },
        "C": {
            "Basics": (
                "Learn C syntax, variables, and basic programming constructs.\n\n"
                "In C, you can declare variables with specific data types like int, float, char, etc.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "Comments in C start with // for single-line comments and /* ... */ for multi-line comments.\n\n"
                "To begin coding in C, first, you need to install a C compiler on your system.\n\n"
                "You can download a compiler like GCC or use an IDE like Code::Blocks or Visual Studio.\n\n"
                "Once installed, you can write C code in a text editor or an Integrated Development Environment (IDE).\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int x = 10;\n"
                "    int y = 20;\n"
                "    printf(\"The sum is: %d\\n\", x + y);\n"
                "    return 0;\n"
                "}\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    char name[] = \"Sub Zero\";\n"
                "    printf(\"Hello, %s!\\n\", name);\n"
                "    return 0;\n"
                "}\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int input;\n"
                "    printf(\"Enter a number: \");\n"
                "    scanf(\"%d\", &input);\n"
                "    printf(\"You entered: %d\\n\", input);\n"
                "    return 0;\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    char input[100];\n"
                "    printf(\"Enter a string: \");\n"
                "    fgets(input, sizeof(input), stdin);\n"
                "    printf(\"You entered: %s\\n\", input);\n"
                "    return 0;\n"
                "}\n"
                "# Output: You entered: <user_input>\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int binary1 = 0b1010;\n"
                "    int binary2 = 0b1100;\n"
                "    int sum = binary1 + binary2;\n"
                "    printf(\"The sum is: %d\\n\", sum);\n"
                "    return 0;\n"
                "}\n"
                "# Output: The sum is: 22\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int hex1 = 0xA;\n"
                "    int hex2 = 0xC;\n"
                "    int sum = hex1 + hex2;\n"
                "    printf(\"The sum is: %d\\n\", sum);\n"
                "    return 0;\n"
                "}\n"
                "# Output: The sum is: 22\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int octal1 = 012;\n"
                "    int octal2 = 014;\n"
                "    int sum = octal1 + octal2;\n"
                "    printf(\"The sum is: %d\\n\", sum);\n"
                "    return 0;\n"
                "}\n"
                "# Output: The sum is: 22\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int decimal1 = 10;\n"
                "    int decimal2 = 12;\n"
                "    int sum = decimal1 + decimal2;\n"
                "    printf(\"The sum is: %d\\n\", sum);\n"
                "    return 0;\n"
                "}\n"
                "# Output: The sum is: 22\n"
                "```\n\n"
                "In C, you can use the 'printf' function to print formatted output to the console.\n\n"
                "The 'printf' function allows you to format the output using format specifiers like %d for integers, %f for floats, %s for strings, etc.\n\n"
                "You can also use the 'scanf' function to read formatted input from the console.\n\n"
                "The 'scanf' function allows you to read input and store it in variables using format specifiers.\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int input;\n"
                "    printf(\"Enter your age: \");\n"
                "    scanf(\"%d\", &input);\n"
                "    printf(\"Your age is: %d\\n\", input);\n"
                "    return 0;\n"
                "}\n"
                "# Output: Your age is: <user_input>\n"
                "```\n"
                
            ),
            "Pointers": (
                "Understand pointers and memory management in C.\n\n"
                "Pointers are variables that store the address of another variable.\n\n"
                "You can declare a pointer using the '*' symbol, and you can use the '&' operator to get the address of a variable.\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int x = 10;\n"
                "    int *ptr = &x;\n"
                "    printf(\"Value of x: %d\\n\", x);\n"
                "    printf(\"Address of x: %p\\n\", ptr);\n"
                "    printf(\"Value at address %p: %d\\n\", ptr, *ptr);\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Value of x: 10\n"
                "# Address of x: 0x... (memory address)\n"
                "# Value at address 0x...: 10\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "void swap(int *a, int *b) {\n"
                "    int temp = *a;\n"
                "    *a = *b;\n"
                "    *b = temp;\n"
                "}\n\n"
                "int main() {\n"
                "    int x = 10;\n"
                "    int y = 20;\n"
                "    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n"
                "    swap(&x, &y);\n"
                "    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Before swap: x = 10, y = 20\n"
                "# After swap: x = 20, y = 10\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "void increment(int *num) {\n"
                "    (*num)++;\n"
                "}\n\n"
                "int main() {\n"
                "    int value = 5;\n"
                "    printf(\"Before increment: %d\\n\", value);\n"
                "    increment(&value);\n"
                "    printf(\"After increment: %d\\n\", value);\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Before increment: 5\n"
                "# After increment: 6\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "void modifyArray(int *arr, int size) {\n"
                "    for (int i = 0; i < size; i++) {\n"
                "        arr[i] *= 2;\n"
                "    }\n"
                "}\n\n"
                "int main() {\n"
                "    int arr[] = {1, 2, 3, 4, 5};\n"
                "    int size = sizeof(arr) / sizeof(arr[0]);\n"
                "    printf(\"Before modification:\\n\");\n"
                "    for (int i = 0; i < size; i++) {\n"
                "        printf(\"%d \", arr[i]);\n"
                "    }\n"
                "    printf(\"\\n\");\n"
                "    modifyArray(arr, size);\n"
                "    printf(\"After modification:\\n\");\n"
                "    for (int i = 0; i < size; i++) {\n"
                "        printf(\"%d \", arr[i]);\n"
                "    }\n"
                "    printf(\"\\n\");\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Before modification:\n"
                "# 1 2 3 4 5\n"
                "# After modification:\n"
                "# 2 4 6 8 10\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "void printArray(int *arr, int size) {\n"
                "    for (int i = 0; i < size; i++) {\n"
                "        printf(\"%d \", arr[i]);\n"
                "    }\n"
                "    printf(\"\\n\");\n"
                "}\n\n"
                "int main() {\n"
                "    int arr[] = {1, 2, 3, 4, 5};\n"
                "    int size = sizeof(arr) / sizeof(arr[0]);\n"
                "    printf(\"Array elements:\\n\");\n"
                "    printArray(arr, size);\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Array elements:\n"
                "# 1 2 3 4 5\n"
                "```\n"
                "In C, you can use pointers to manipulate memory directly.\n\n"
                "Pointers allow you to access and modify the memory address of variables.\n\n"
                "You can use the '*' operator to declare a pointer and the '&' operator to get the address of a variable.\n\n"
                "You can also use pointers to pass variables by reference to functions, allowing you to modify the original variable.\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "int main() {\n"
                "    int x = 10;\n"
                "    int *ptr = &x;\n"
                "    printf(\"Value of x: %d\\n\", x);\n"
                "    printf(\"Address of x: %p\\n\", (void*)ptr);\n"
                "    printf(\"Value at address %p: %d\\n\", (void*)ptr, *ptr);\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Value of x: 10\n"
                "# Address of x: 0x... (memory address)\n"
                "# Value at address 0x...: 10\n"
                "# This code demonstrates the use of pointers in C.\n"
                "```\n\n"
                "Example:\n"
                "```c\n\n"
                "#include <stdio.h>\n\n"
                "void swap(int *a, int *b) {\n"
                "    int temp = *a;\n"
                "    *a = *b;\n"
                "    *b = temp;\n"
                "}\n\n"
                "int main() {\n"
                "    int x = 10;\n"
                "    int y = 20;\n"
                "    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n"
                "    swap(&x, &y);\n"
                "    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Before swap: x = 10, y = 20\n"
                "# After swap: x = 20, y = 10\n"
                "# This code demonstrates how to swap two variables using pointers.\n"
                "```\n"
            ),
            "Data Structures": (
                "Implement data structures like linked lists, stacks, and queues in C.\n\n"
                "A linked list is a linear data structure where each element is a separate object.\n\n"
                "Each element (node) of a list consists of data and a reference (link) to the next node in the sequence.\n\n"
                "Example (Linked List):\n"
                "```c\n\n"
                "#include <stdio.h>\n"
                "#include <stdlib.h>\n\n"
                "struct Node {\n"
                "    int data;\n"
                "    struct Node* next;\n"
                "};\n\n"
                "void printList(struct Node* n) {\n"
                "    while (n != NULL) {\n"
                "        printf(\"%d -> \", n->data);\n"
                "        n = n->next;\n"
                "    }\n"
                "    printf(\"NULL\\n\");\n"
                "}\n\n"
                "int main() {\n"
                "    struct Node* head = NULL;\n"
                "    struct Node* second = NULL;\n"
                "    struct Node* third = NULL;\n\n"
                "    head = (struct Node*)malloc(sizeof(struct Node));\n"
                "    second = (struct Node*)malloc(sizeof(struct Node));\n"
                "    third = (struct Node*)malloc(sizeof(struct Node));\n\n"
                "    head->data = 1;\n"
                "    head->next = second;\n\n"
                "    second->data = 2;\n"
                "    second->next = third;\n\n"
                "    third->data = 3;\n"
                "    third->next = NULL;\n\n"
                "    printList(head);\n"
                "    return 0;\n"
                "}\n"
                "# Output: 1 -> 2 -> 3 -> NULL\n"
                "# This code implements a basic linked list in C.\n"
                "```\n\n"
                "Example (Stack):\n"
                "```c\n\n"
                "#include <stdio.h>\n"
                "#include <stdlib.h>\n\n"
                "#define MAX 100\n\n"
                "struct Stack {\n"
                "    int top;\n"
                "    int arr[MAX];\n"
                "};\n\n"
                "void initStack(struct Stack* stack) {\n"
                "    stack->top = -1;\n"
                "}\n\n"
                "int isFull(struct Stack* stack) {\n"
                "    return stack->top == MAX - 1;\n"
                "}\n\n"
                "int isEmpty(struct Stack* stack) {\n"
                "    return stack->top == -1;\n"
                "}\n\n"
                "void push(struct Stack* stack, int value) {\n"
                "    if (isFull(stack)) {\n"
                "        printf(\"Stack overflow\\n\");\n"
                "        return;\n"
                "    }\n"
                "    stack->arr[++stack->top] = value;\n"
                "}\n\n"
                "int pop(struct Stack* stack) {\n"
                "    if (isEmpty(stack)) {\n"
                "        printf(\"Stack underflow\\n\");\n"
                "        return -1;\n"
                "    }\n"
                "    return stack->arr[stack->top--];\n"
                "}\n\n"
                "int peek(struct Stack* stack) {\n"
                "    if (isEmpty(stack)) {\n"
                "        printf(\"Stack is empty\\n\");\n"
                "        return -1;\n"
                "    }\n"
                "    return stack->arr[stack->top];\n"
                "}\n\n"
                "int main() {\n"
                "    struct Stack stack;\n"
                "    initStack(&stack);\n\n"
                "    push(&stack, 10);\n"
                "    push(&stack, 20);\n"
                "    push(&stack, 30);\n\n"
                "    printf(\"Top element is: %d\\n\", peek(&stack));\n"
                "    printf(\"Popped element is: %d\\n\", pop(&stack));\n"
                "    printf(\"Top element is: %d\\n\", peek(&stack));\n"
                "    printf(\"Popped element is: %d\\n\", pop(&stack));\n"
                "    printf(\"Top element is: %d\\n\", peek(&stack));\n"
                "    printf(\"Popped element is: %d\\n\", pop(&stack));\n"
                "    printf(\"Popped element is: %d\\n\", pop(&stack));\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Top element is: 30\n"
                "# Popped element is: 30\n"
                "# Top element is: 20\n"
                "# Popped element is: 20\n"
                "# Top element is: 10\n"
                "# Popped element is: 10\n"
                "# Stack underflow\n"
                "# Popped element is: -1\n"
                "# This code implements a basic stack using an array.\n"
                "```\n\n"
                "Example (Queue):\n"
                "```c\n\n"
                "#include <stdio.h>\n"
                "#include <stdlib.h>\n\n"
                "#define MAX 100\n\n"
                "struct Queue {\n"
                "    int front, rear;\n"
                "    int arr[MAX];\n"
                "};\n\n"
                "void initQueue(struct Queue* queue) {\n"
                "    queue->front = -1;\n"
                "    queue->rear = -1;\n"
                "}\n\n"
                "int isFull(struct Queue* queue) {\n"
                "    return (queue->rear + 1) % MAX == queue->front;\n"
                "}\n\n"
                "int isEmpty(struct Queue* queue) {\n"
                "    return queue->front == -1;\n"
                "}\n\n"
                "void enqueue(struct Queue* queue, int value) {\n"
                "    if (isFull(queue)) {\n"
                "        printf(\"Queue overflow\\n\");\n"
                "        return;\n"
                "    }\n"
                "    if (isEmpty(queue)) {\n"
                "        queue->front = 0;\n"
                "    }\n"
                "    queue->rear = (queue->rear + 1) % MAX;\n"
                "    queue->arr[queue->rear] = value;\n"
                "}\n\n"
                "int dequeue(struct Queue* queue) {\n"
                "    if (isEmpty(queue)) {\n"
                "        printf(\"Queue underflow\\n\");\n"
                "        return -1;\n"
                "    }\n"
                "    int value = queue->arr[queue->front];\n"
                "    if (queue->front == queue->rear) {\n"
                "        queue->front = -1;\n"
                "        queue->rear = -1;\n"
                "    } else {\n"
                "        queue->front = (queue->front + 1) % MAX;\n"
                "    }\n"
                "    return value;\n"
                "}\n\n"
                "int peek(struct Queue* queue) {\n"
                "    if (isEmpty(queue)) {\n"
                "        printf(\"Queue is empty\\n\");\n"
                "        return -1;\n"
                "    }\n"
                "    return queue->arr[queue->front];\n"
                "}\n\n"
                "int main() {\n"
                "    struct Queue queue;\n"
                "    initQueue(&queue);\n\n"
                "    enqueue(&queue, 10);\n"
                "    enqueue(&queue, 20);\n"
                "    enqueue(&queue, 30);\n\n"
                "    printf(\"Front element is: %d\\n\", peek(&queue));\n"
                "    printf(\"Dequeued element is: %d\\n\", dequeue(&queue));\n"
                "    printf(\"Front element is: %d\\n\", peek(&queue));\n"
                "    printf(\"Dequeued element is: %d\\n\", dequeue(&queue));\n"
                "    printf(\"Front element is: %d\\n\", peek(&queue));\n"
                "    printf(\"Dequeued element is: %d\\n\", dequeue(&queue));\n"
                "    printf(\"Dequeued element is: %d\\n\", dequeue(&queue));\n"
                "    return 0;\n"
                "}\n"
                "# Output:\n"
                "# Front element is: 10\n"
                "# Dequeued element is: 10\n"
                "# Front element is: 20\n"
                "# Dequeued element is: 20\n"
                "# Front element is: 30\n"
                "# Dequeued element is: 30\n"
                "# Queue underflow\n"
                "# Dequeued element is: -1\n"
                "# This code implements a basic queue using an array.\n"
                "```\n"
            ),
            "Embedded Systems": (
                "Learn how to program embedded systems using C.\n\n"
                "Embedded systems are computer systems with a dedicated function within a larger mechanical or electrical system.\n\n"
                "C is widely used for programming embedded systems due to its efficiency and control over hardware.\n\n"
                "Example (Blinking LED with Arduino):\n"
                "```c\n\n"
                "void setup() {\n"
                "    pinMode(13, OUTPUT);\n"
                "}\n\n"
                "void loop() {\n"
                "    digitalWrite(13, HIGH);\n"
                "    delay(1000);\n"
                "    digitalWrite(13, LOW);\n"
                "    delay(1000);\n"
                "}\n"
                "# This code blinks an LED connected to pin 13 on an Arduino board.\n"
                "```\n\n"
                "Example (Reading Sensor Data):\n"
                "```c\n\n"
                "#include <Wire.h>\n"
                "#include <Adafruit_Sensor.h>\n"
                "#include <Adafruit_BME280.h>\n\n"
                "Adafruit_BME280 bme;\n\n"
                "void setup() {\n"
                "    Serial.begin(9600);\n"
                "    if (!bme.begin(0x76)) {\n"
                "        Serial.println(\"Could not find a valid BME280 sensor, check wiring!\");\n"
                "        while (1);\n"
                "    }\n"
                "}\n\n"
                "void loop() {\n"
                "    Serial.print(\"Temperature: \");\n"
                "    Serial.print(bme.readTemperature());\n"
                "    Serial.println(\" *C\");\n"
                "    Serial.print(\"Humidity: \");\n"
                "    Serial.print(bme.readHumidity());\n"
                "    Serial.println(\" %\");\n"
                "    Serial.print(\"Pressure: \");\n"
                "    Serial.print(bme.readPressure() / 100.0F);\n"
                "    Serial.println(\" hPa\");\n"
                "    delay(2000);\n"
                "}\n"
                "# This code reads temperature, humidity, and pressure data from a BME280 sensor.\n"
                "```\n\n"
                "Example (Basic Embedded System):\n"
                "```c\n\n"
                "#include <stdio.h>\n"
                "#include <stdlib.h>\n\n"
                "int main() {\n"
                "    // Simulate reading from a temperature sensor\n"
                "    int temperature = 25; // Example temperature value\n"
                "    printf(\"Temperature: %d C\\n\", temperature);\n"
                "    // Simulate controlling an LED\n"
                "    if (temperature > 30) {\n"
                "        printf(\"LED ON\\n\");\n"
                "    } else {\n"
                "        printf(\"LED OFF\\n\");\n"
                "    }\n"
                "    return 0;\n"
                "}\n"
                "# This code simulates reading a temperature sensor and controlling an LED based on the temperature.\n"
                "```\n\n"
                "Example (Basic Embedded System with Timer):\n"
                "```c\n\n"
                "#include <stdio.h>\n"
                "#include <stdlib.h>\n"
                "#include <unistd.h>\n\n"
                "void delay(int seconds) {\n"
                "    sleep(seconds);\n"
                "}\n\n"
                "int main() {\n"
                "    // Simulate reading from a temperature sensor\n"
                "    int temperature = 25; // Example temperature value\n"
                "    printf(\"Temperature: %d C\\n\", temperature);\n"
                "    // Simulate controlling an LED\n"
                "    if (temperature > 30) {\n"
                "        printf(\"LED ON\\n\");\n"
                "    } else {\n"
                "        printf(\"LED OFF\\n\");\n"
                "    }\n"
                "    // Simulate a timer\n"
                "    printf(\"Waiting for 5 seconds...\\n\");\n"
                "    delay(5);\n"
                "    printf(\"Timer finished!\\n\");\n"
                "    return 0;\n"
                "}\n"
                "# This code simulates reading a temperature sensor, controlling an LED, and using a timer.\n"
                "```\n\n"
                "Example (Basic Embedded System with Interrupt):\n"
                "```c\n\n"
                "#include <stdio.h>\n"
                "#include <stdlib.h>\n"
                "#include <signal.h>\n"
                "#include <unistd.h>\n\n"
                "void handleInterrupt(int signal) {\n"
                "    printf(\"Interrupt received!\\n\");\n"
                "}\n\n"
                "int main() {\n"
                "    // Register the interrupt handler\n"
                "    signal(SIGINT, handleInterrupt);\n\n"
                "    // Simulate reading from a temperature sensor\n"
                "    int temperature = 25; // Example temperature value\n"
                "    printf(\"Temperature: %d C\\n\", temperature);\n"
                "    // Simulate controlling an LED\n"
                "    if (temperature > 30) {\n"
                "        printf(\"LED ON\\n\");\n"
                "    } else {\n"
                "        printf(\"LED OFF\\n\");\n"
                "    }\n"
                "    // Simulate a timer\n"
                "    printf(\"Waiting for 5 seconds...\\n\");\n"
                "    sleep(5);\n"
                "    printf(\"Timer finished!\\n\");\n"
                "    return 0;\n"
                "}\n"
                "# This code simulates reading a temperature sensor, controlling an LED, and using an interrupt handler.\n"
                "```\n"
            )
        },
        "Assembly": {
            "Basics": (
                "Learn the basics of X86/ARM assembly language programming, including syntax and basic instructions.\n\n"
                "Assembly language is a low-level programming language that is closely related to machine code.\n\n"
                "It provides a way to write instructions that the CPU can execute directly.\n\n"
                "Assembly language is specific to a particular computer architecture (e.g., x86, ARM).\n\n"
                "Assembly language uses mnemonics to represent machine instructions, making it easier to read and write.\n\n"
                "Basic assembly instructions include data movement (MOV), arithmetic operations (ADD, SUB), and control flow (JMP, CALL).\n\n"
                "Assembly language programs are typically written in a text editor and then assembled into machine code using an assembler.\n\n"
                "Example (x86 Assembly - Hello World):\n"
                "```asm\n\n"
                "section .data\n"
                "    msg db 'Hello, World!', 0\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    mov rax, 1          ; syscall: write\n"
                "    mov rdi, 1          ; file descriptor: stdout\n"
                "    mov rsi, msg        ; address of the message\n"
                "    mov rdx, 13         ; length of the message\n"
                "    syscall             ; make the system call\n\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# Output: Hello, World!"
                "```\n\n"
                "Example (x86 Assembly - Basic Arithmetic):\n"
                "```asm\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    mov rax, 5          ; Load 5 into register rax\n"
                "    mov rbx, 10         ; Load 10 into register rbx\n"
                "    add rax, rbx        ; Add rbx to rax (rax = 15)\n"
                "    sub rax, 3          ; Subtract 3 from rax (rax = 12)\n"
                "    ; Exit program\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# This demonstrates basic arithmetic operations in assembly."
                "```\n\n"
                "Example (x86 Assembly - Conditional Statements):\n"
                "```asm\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    mov rax, 5          ; Load 5 into register rax\n"
                "    cmp rax, 10         ; Compare rax with 10\n"
                "    jge greater         ; Jump to 'greater' if rax >= 10\n"
                "    mov rbx, 0          ; If not greater, set rbx to 0\n"
                "    jmp end            ; Jump to 'end'\n\n"
                "greater:\n"
                "    mov rbx, 1          ; If greater, set rbx to 1\n\n"
                "end:\n"
                "    ; Exit program\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# This demonstrates a conditional statement in assembly."
                "```\n\n"
                "Example (ARM Assembly - Hello World):\n"
                "```asm\n\n"
                ".data\n"
                "    msg: .asciz 'Hello, World!'\n\n"
                ".text\n"
                "    .global _start\n\n"
                "_start:\n"
                "    ldr r0, =msg        ; Load address of msg into r0\n"
                "    ldr r1, =13         ; Length of the message\n"
                "    mov r7, 4          ; syscall: write\n"
                "    mov r2, r1         ; Length of the message\n"
                "    mov r1, r0         ; Address of the message\n"
                "    svc 0              ; make the system call\n\n"
                "    mov r7, 1          ; syscall: exit\n"
                "    xor r0, r0         ; exit code: 0\n"
                "    svc 0              ; make the system call\n"
                "```\n"
                "# Output: Hello, World!"
                "```\n\n"
                "Example (ARM Assembly - Basic Arithmetic):\n"
                "```asm\n\n"
                ".text\n"
                "    .global _start\n\n"
                "_start:\n"
                "    mov r0, #5          ; Load 5 into register r0\n"
                "    mov r1, #10         ; Load 10 into register r1\n"
                "    add r0, r0, r1      ; Add r1 to r0 (r0 = 15)\n"
                "    sub r0, r0, #3      ; Subtract 3 from r0 (r0 = 12)\n"
                "    ; Exit program\n"
                "    mov r7, 1          ; syscall: exit\n"
                "    xor r0, r0         ; exit code: 0\n"
                "    svc 0              ; make the system call\n"
                "```\n"
                "# This demonstrates basic arithmetic operations in ARM assembly."
                "```\n\n"
                "Example (ARM Assembly - Conditional Statements):\n"
                "```asm\n\n"
                ".text\n"
                "    .global _start\n\n"
                "_start:\n"
                "    mov r0, #5          ; Load 5 into register r0\n"
                "    mov r1, #10         ; Load 10 into register r1\n"
                "    cmp r0, r1          ; Compare r0 with r1\n"
                "    bge greater         ; Branch to 'greater' if r0 >= r1\n"
                "    mov r2, #0          ; If not greater, set r2 to 0\n"
                "    b end              ; Branch to 'end'\n\n"
                "greater:\n"
                "    mov r2, #1          ; If greater, set r2 to 1\n\n"
                "end:\n"
                "    ; Exit program\n"
                "    mov r7, 1          ; syscall: exit\n"
                "    xor r0, r0         ; exit code: 0\n"
                "    svc 0              ; make the system call\n"
                "```\n"
                "# This demonstrates a conditional statement in ARM assembly."
                "```\n\n"
                "To write or read assembly code, you can use an assembler like NASM (Netwide Assembler) for x86 or ARM.\n\n"
                "Assemblers convert assembly language code into machine code that the CPU can execute.\n\n"
                "You can also use an Integrated Development Environment (IDE) like Visual Studio or Code::Blocks to write and debug assembly code.\n\n\n"
                "Different architectures (like x86 and ARM) have different assembly languages.\n\n"
                "The syntax and instructions may vary, but the concepts remain similar.\n\n"
            ),
            "Registers": (
                "Understand how to use CPU registers for low-level programming.\n\n"
                "Registers are small storage locations within the CPU that hold data temporarily.\n\n"
                "They are used for arithmetic operations, data manipulation, and control flow.\n\n"
                "Example (x86 Assembly - Register Operations):\n"
                "```asm\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    mov rax, 5          ; Load 5 into register rax\n"
                "    mov rbx, 10         ; Load 10 into register rbx\n"
                "    add rax, rbx        ; Add rbx to rax (rax = 15)\n"
                "    sub rax, 3          ; Subtract 3 from rax (rax = 12)\n"
                "    ; Exit program\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# This demonstrates basic arithmetic operations using registers."
                "```\n\n"
                "Example (x86 Assembly - Register Transfer):\n"
                "```asm\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    mov rax, 5          ; Load 5 into register rax\n"
                "    mov rbx, rax        ; Transfer value from rax to rbx\n"
                "    add rbx, 10         ; Add 10 to rbx (rbx = 15)\n"
                "    sub rax, 3          ; Subtract 3 from rax (rax = 2)\n"
                "    ; Exit program\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# This demonstrates transferring values between registers."
                "```\n\n"
                "Example (x86 Assembly - Register Comparison):\n"
                "```asm\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    mov rax, 5          ; Load 5 into register rax\n"
                "    mov rbx, 10         ; Load 10 into register rbx\n"
                "    cmp rax, rbx        ; Compare rax with rbx\n"
                "    jge greater         ; Jump to 'greater' if rax >= rbx\n"
                "    mov rcx, 0          ; If not greater, set rcx to 0\n"
                "    jmp end            ; Jump to 'end'\n\n"
                "greater:\n"
                "    mov rcx, 1          ; If greater, set rcx to 1\n\n"
                "end:\n"
                "    ; Exit program\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# This demonstrates comparing values in registers."
                "```\n\n"
                "Example (ARM Assembly - Register Operations):\n"
                "```asm\n\n"
                ".text\n"
                "    .global _start\n\n"
                "_start:\n"
                "    mov r0, #5          ; Load 5 into register r0\n"
                "    mov r1, #10         ; Load 10 into register r1\n"
                "    add r0, r0, r1      ; Add r1 to r0 (r0 = 15)\n"
                "    sub r0, r0, #3      ; Subtract 3 from r0 (r0 = 12)\n"
                "    ; Exit program\n"
                "    mov r7, 1          ; syscall: exit\n"
                "    xor r0, r0         ; exit code: 0\n"
                "    svc 0              ; make the system call\n"
                "```\n"
                "# This demonstrates basic arithmetic operations using registers in ARM assembly."
                "```\n\n"
                "Example (ARM Assembly - Register Transfer):\n"
                "```asm\n\n"
                ".text\n"
                "    .global _start\n\n"
                "_start:\n"
                "    mov r0, #5          ; Load 5 into register r0\n"
                "    mov r1, r0          ; Transfer value from r0 to r1\n"
                "    add r1, r1, #10     ; Add 10 to r1 (r1 = 15)\n"
                "    sub r0, r0, #3      ; Subtract 3 from r0 (r0 = 2)\n"
                "    ; Exit program\n"
                "    mov r7, 1          ; syscall: exit\n"
                "    xor r0, r0         ; exit code: 0\n"
                "    svc 0              ; make the system call\n"
                "```\n"
                "# This demonstrates transferring values between registers in ARM assembly."
                "```\n"
            ),
            "Memory Management": (
                "Learn how to manage memory and work with addresses in assembly.\n\n"
                "Memory management in assembly involves understanding how to allocate, access, and manipulate memory addresses.\n\n"
                "You can define data in the .data section and access it using pointers.\n\n"
                "Example (x86 Assembly - Accessing Memory):\n"
                "```asm\n\n"
                "section .data\n"
                "    num1 dq 10          ; Define a 64-bit integer with value 10\n"
                "    num2 dq 20          ; Define a 64-bit integer with value 20\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    mov rax, [num1]     ; Load the value of num1 into rax\n"
                "    mov rbx, [num2]     ; Load the value of num2 into rbx\n"
                "    add rax, rbx        ; Add rbx to rax (rax = 30)\n"
                "    ; Exit program\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# This demonstrates loading values from memory and performing arithmetic."
                "```\n\n"
                "Example (x86 Assembly - Pointer Arithmetic):\n"
                "```asm\n\n"
                "section .data\n"
                "    arr dq 1, 2, 3, 4, 5 ; Define an array of 64-bit integers\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    lea rsi, [arr]        ; Load the address of arr into rsi\n"
                "    mov rax, [rsi]       ; Load the first element of arr into rax\n"
                "    add rsi, 8           ; Move to the next element (8 bytes for 64-bit)\n"
                "    mov rbx, [rsi]       ; Load the second element of arr into rbx\n"
                "    add rax, rbx         ; Add the two elements (rax = 1 + 2 = 3)\n"
                "    ; Exit program\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# This demonstrates pointer arithmetic to access array elements."
                "```\n\n"
                "Example (x86 Assembly - Dynamic Memory Allocation):\n"
                "```asm\n\n"
                "section .text\n"
                "    global _start\n\n"
                "_start:\n"
                "    ; Allocate memory for 10 integers (40 bytes)\n"
                "    mov rax, 9          ; syscall: mmap\n"
                "    xor rdi, rdi        ; addr: NULL\n"
                "    mov rsi, 40         ; length: 40 bytes\n"
                "    mov rdx, 3          ; prot: PROT_READ | PROT_WRITE\n"
                "    mov r10, 34         ; flags: MAP_PRIVATE | MAP_ANONYMOUS\n"
                "    xor r8, r8          ; fd: -1\n"
                "    xor r9, r9          ; offset: 0\n"
                "    syscall             ; make the system call\n"
                "    mov rbx, rax        ; Store the allocated memory address in rbx\n\n"
                "    ; Store values in the allocated memory\n"
                "    mov qword [rbx], 1  ; Store 1 at address in rbx\n"
                "    mov qword [rbx + 8], 2 ; Store 2 at address in rbx + 8\n"
                "    mov qword [rbx + 16], 3 ; Store 3 at address in rbx + 16\n"
                "    mov qword [rbx + 24], 4 ; Store 4 at address in rbx + 24\n"
                "    mov qword [rbx + 32], 5 ; Store 5 at address in rbx + 32\n\n"
                "    ; Print the values\n"
                "    mov rax, 1          ; syscall: write\n"
                "    mov rdi, 1          ; file descriptor: stdout\n"
                "    mov rsi, rbx        ; address of the first value\n"
                "    mov rdx, 40         ; length of the data to write\n"
                "    syscall             ; make the system call\n\n"
                "    ; Free the allocated memory\n"
                "    mov rax, 11         ; syscall: munmap\n"
                "    mov rdi, rbx        ; address of the memory to free\n"
                "    mov rsi, 40         ; length of the memory to free\n"
                "    syscall             ; make the system call\n\n"
                "    ; Exit program\n"
                "    mov rax, 60         ; syscall: exit\n"
                "    xor rdi, rdi        ; exit code: 0\n"
                "    syscall             ; make the system call\n"
                "```\n"
                "# This demonstrates dynamic memory allocation using mmap and freeing it with munmap."
                "```\n\n"
                "Example (ARM Assembly - Accessing Memory):\n"
                "```asm\n\n"
                ".data\n"
                "    num1: .word 10      ; Define a 32-bit integer with value 10\n"
                "    num2: .word 20      ; Define a 32-bit integer with value 20\n\n"
                ".text\n"
                "    .global _start\n\n"
                "_start:\n"
                "    ldr r0, =num1       ; Load address of num1 into r0\n"
                "    ldr r1, [r0]        ; Load the value of num1 into r1\n"
                "    ldr r0, =num2       ; Load address of num2 into r0\n"
                "    ldr r2, [r0]        ; Load the value of num2 into r2\n"
                "    add r1, r1, r2      ; Add r2 to r1 (r1 = 30)\n"
                "    ; Exit program\n"
                "    mov r7, 1          ; syscall: exit\n"
                "    xor r0, r0         ; exit code: 0\n"
                "    svc 0              ; make the system call\n"
                "```\n"
                "# This demonstrates loading values from memory and performing arithmetic in ARM assembly."
                "```\n\n"
                "Example (ARM Assembly - Pointer Arithmetic):\n"
                "```asm\n\n"
                ".data\n"
                "    arr: .word 1, 2, 3, 4, 5 ; Define an array of 32-bit integers\n\n"
                ".text\n"
                "    .global _start\n\n"
                "_start:\n"
                "    ldr r0, =arr        ; Load address of arr into r0\n"
                "    ldr r1, [r0]        ; Load the first element of arr into r1\n"
                "    add r0, r0, #4      ; Move to the next element (4 bytes for 32-bit)\n"
                "    ldr r2, [r0]        ; Load the second element of arr into r2\n"
                "    add r1, r1, r2      ; Add the two elements (r1 = 1 + 2 = 3)\n"
                "    ; Exit program\n"
                "    mov r7, 1          ; syscall: exit\n"
                "    xor r0, r0         ; exit code: 0\n"
                "    svc 0              ; make the system call\n"
                "```\n"
                "# This demonstrates pointer arithmetic to access array elements in ARM assembly."
                "```\n"
            )
        },
        "JavaScript": {
            "Basics": (
                "Learn JavaScript syntax, variables, and basic programming constructs.\n\n"
                "In JavaScript, you can declare variables using 'let', 'const', or 'var'.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "JavaScript supports both functional and object-oriented programming paradigms.\n\n"
                "Comments can be added using '//' for single-line comments and '/* ... */' for multi-line comments.\n\n"
                "To begin coding in JavaScript, first, you need to install Node.js or use a web browser's console.\n\n"
                "You can download Node.js from the official website: https://nodejs.org/\n\n"
                "Once installed, you can code in any text editor and run your JavaScript files using the command line.\n\n"
                "Example:\n"
                "```javascript\n\n"
                "// Declare variables\n"
                "let x = 10;\n"
                "let y = 20;\n"
                "console.log(`The sum is: ${x + y}`);\n"
                "// Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```javascript\n\n"
                "// Declare a string variable\n"
                "let name = 'Sub Zero';\n"
                "console.log(`Hello, ${name}!`);\n"
                "// Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```javascript\n\n"
                "// Declare a variable and assign a value\n"
                "let age = 25;\n"
                "// Use a conditional statement\n"
                "if (age >= 18) {\n"
                "    console.log('You are an adult.');\n"
                "} else {\n"
                "    console.log('You are a minor.');\n"
                "}\n"
                "// Output: You are an adult.\n"
                "```\n\n"
                "Example:\n"
                "```javascript\n\n"
                "// User-input example\n"
                "let userInput = prompt('Enter a number:');\n"
                "let number = parseInt(userInput);\n"
                "if (number > 10) {\n"
                "    console.log('The number is greater than 10.');\n"
                "} else {\n"
                "    console.log('The number is 10 or less.');\n"
                "}\n"
                "// Output: The number is greater than 10.\n"
                "```\n\n"
                "In Javascript, to print output to the console, use 'console.log()'.\n\n"
                "To get user input, use 'prompt()' in the browser.\n\n"
                "To parse user input, use 'parseInt()' or 'parseFloat()'.\n\n"
                "To handle user input, use conditional statements like 'if', 'else if', and 'else'.\n\n"
                "Example:\n"
                "```javascript\n\n"
                "// Take user name as input\n"
                "let userName = prompt('Enter your name:');\n"
                "// Print a greeting message\n"
                "console.log(`Hello, ${userName}!`);\n"
                "// Output: Hello, [userName]!\n"
                "```\n"
                
            ),
            "DOM Manipulation": (
                "Understand how to manipulate the DOM to create dynamic web pages.\n\n"
                "The Document Object Model (DOM) represents the structure of a web page.\n\n"
                "You can use JavaScript to change the content, structure, and style of a web page dynamically.\n\n"
                "Example:\n"
                "```javascript\n\n"
                "// Change the text of an HTML element\n"
                "document.getElementById('myElement').innerText = 'Hello, DOM!';\n\n"
                "// Add a new element to the DOM\n"
                "const newElement = document.createElement('p');\n"
                "newElement.innerText = 'This is a new paragraph.';\n"
                "document.body.appendChild(newElement);\n"
                "// This code changes the text of an element and adds a new paragraph to the body.\n"
                "```\n\n"
                "Example:\n"
                "```javascript\n\n"
                "// Change the background color of an element\n"
                "document.getElementById('myElement').style.backgroundColor = 'blue';\n\n"
                "// Add an event listener to a button\n"
                "document.getElementById('myButton').addEventListener('click', () => {\n"
                "    alert('Button clicked!');\n"
                "});\n"
                "# This code changes the background color of an element and adds a click event listener to a button.\n"
                "```\n\n"
                "Example:\n"
                "```javascript\n\n"
                "// Create a new list item and add it to an unordered list\n"
                "const ul = document.getElementById('myList');\n"
                "const li = document.createElement('li');\n"
                "li.innerText = 'New Item';\n"
                "ul.appendChild(li);\n\n"
                "// Change the style of an element\n"
                "document.getElementById('myElement').style.color = 'red';\n"
                "// Change the font size of an element\n"
                "document.getElementById('myElement').style.fontSize = '20px';\n\n"
                "// Add a class to an element\n"
                "document.getElementById('myElement').classList.add('highlight');\n\n"
                "// Remove a class from an element\n"
                "document.getElementById('myElement').classList.remove('highlight');\n\n"
                "// Toggle a class on an element\n"
                "document.getElementById('myElement').classList.toggle('highlight');\n\n"
                "// Set an attribute on an element\n"
                "document.getElementById('myElement').setAttribute('data-custom', 'value');\n\n"
                "// Get an attribute from an element\n"
                "const value = document.getElementById('myElement').getAttribute('data-custom');\n"
                "// Print the value to the console\n"
                "console.log(value);\n\n"
                "// Remove an element from the DOM\n"
                "const elementToRemove = document.getElementById('elementToRemove');\n"
                "elementToRemove.parentNode.removeChild(elementToRemove);\n\n"
                "# This code demonstrates how to manipulate the DOM using JavaScript.\n"
                "```\n"
            ),
            "Node.js": (
                "Learn server-side programming with Node.js.\n\n"
                "Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine.\n\n"
                "Node.js allows you to build scalable network applications using JavaScript.\n\n"
                "Nest.js is a framework for building efficient, reliable, and scalable server-side applications.\n\n"
                "Example (Basic HTTP Server):\n"
                "```javascript\n\n"
                "const http = require('http');\n\n"
                "const server = http.createServer((req, res) => {\n"
                "    res.statusCode = 200;\n"
                "    res.setHeader('Content-Type', 'text/plain');\n"
                "    res.end('Hello, Node.js!');\n"
                "});\n\n"
                "server.listen(3000, () => {\n"
                "    console.log('Server running at http://localhost:3000/');\n"
                "});\n"
                "// Visit http://localhost:3000/ in your browser to see the output.\n"
                "```\n\n"
                "Example (File System Module):\n"
                "```javascript\n\n"
                "const fs = require('fs');\n\n"
                "fs.readFile('example.txt', 'utf8', (err, data) => {\n"
                "    if (err) {\n"
                "        console.error('Error reading file:', err);\n"
                "        return;\n"
                "    }\n"
                "    console.log('File content:', data);\n"
                "});\n"
                "// Ensure 'example.txt' exists in the same directory.\n"
                "# This code reads the content of 'example.txt' and prints it to the console.\n"
                "```\n\n"
                "Example (Express.js):\n"
                "```javascript\n\n"
                "const express = require('express');\n"
                "const app = express();\n\n"
                "app.get('/', (req, res) => {\n"
                "    res.send('Hello, Express!');\n"
                "});\n\n"
                "app.listen(3000, () => {\n"
                "    console.log('Server running at http://localhost:3000/');\n"
                "});\n"
                "// Visit http://localhost:3000/ in your browser to see the output.\n"
                "```\n\n"
                "Example (Express.js with Body Parser):\n"
                "```javascript\n\n"
                "const express = require('express');\n"
                "const bodyParser = require('body-parser');\n"
                "const app = express();\n\n"
                "app.use(bodyParser.json());\n\n"
                "app.post('/data', (req, res) => {\n"
                "    console.log('Received data:', req.body);\n"
                "    res.send('Data received!');\n"
                "});\n\n"
                "app.listen(3000, () => {\n"
                "    console.log('Server running at http://localhost:3000/');\n"
                "});\n"
                "// Use a tool like Postman to send a POST request to http://localhost:3000/data with JSON data.\n"
                "```\n\n"
                "Example (Express.js with MongoDB):\n"
                "```javascript\n\n"
                "const express = require('express');\n"
                "const mongoose = require('mongoose');\n"
                "const app = express();\n\n"
                "mongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n\n"
                "const userSchema = new mongoose.Schema({\n"
                "    name: String,\n"
                "    age: Number\n"
                "});\n\n"
                "const User = mongoose.model('User', userSchema);\n\n"
                "app.get('/', (req, res) => {\n"
                "    res.send('Hello, MongoDB!');\n"
                "});\n\n"
                "app.get('/users', async (req, res) => {\n"
                "    const users = await User.find();\n"
                "    res.json(users);\n"
                "});\n\n"
                "app.listen(3000, () => {\n"
                "    console.log('Server running at http://localhost:3000/');\n"
                "});\n"
                "// Ensure MongoDB is running and 'mydb' database exists.\n"
                "```\n\n"
                "Example (Nest.js):\n"
                "```javascript\n\n"
                "import { Module } from '@nestjs/common';\n"
                "import { NestFactory } from '@nestjs/core';\n"
                "import { AppController } from './app.controller';\n"
                "import { AppService } from './app.service';\n\n"
                "@Module({\n"
                "    imports: [],\n"
                "    controllers: [AppController],\n"
                "    providers: [AppService],\n"
                "})\n"
                "class AppModule {}\n\n"
                "async function bootstrap() {\n"
                "    const app = await NestFactory.create(AppModule);\n"
                "    await app.listen(3000);\n"
                "    console.log('Nest.js server running at http://localhost:3000/');\n"
                "}\n\n"
                "bootstrap();\n"
                "// Visit http://localhost:3000/ in your browser to see the output.\n"
                "```\n"
            ),
            "React.js": (
                "Build modern web applications using React.js.\n\n"
                "Building web applications with React.js involves creating components that manage their own state and can be composed to create complex UIs.\n\n"
                "Build scalable applications using React.js and Node.js.\n\n"
                "React is a JavaScript library for building user interfaces.\n\n"
                "It allows you to create reusable UI components and manage the state of your application.\n\n"
                "Example (Basic React Component):\n"
                "```javascript\n\n"
                "import React from 'react';\n"
                "import ReactDOM from 'react-dom';\n\n"
                "function App() {\n"
                "    return (\n"
                "        <div>\n"
                "            <h1>Hello, React!</h1>\n"
                "            <p>This is a simple React component.</p>\n"
                "        </div>\n"
                "    );\n"
                "}\n\n"
                "ReactDOM.render(<App />, document.getElementById('root'));\n"
                "// Ensure you have a div with id='root' in your HTML file.\n"
                "# This example demonstrates a basic React component.\n"
                "```\n\n"
                "Example (React.js with Node.js):\n"
                "```javascript\n\n"
                "const express = require('express');\n"
                "const path = require('path');\n"
                "const app = express();\n\n"
                "app.use(express.static(path.join(__dirname, 'public')));\n\n"
                "app.get('/', (req, res) => {\n"
                "    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n"
                "});\n\n"
                "app.listen(3000, () => {\n"
                "    console.log('Server running at http://localhost:3000/');\n"
                "});\n"
                "// Ensure you have a 'public' directory with 'index.html' inside it.\n"
                "# This example demonstrates serving a React application using Node.js.\n"
                "```\n\n"
                "Example (State Management with Hooks):\n"
                "```javascript\n\n"
                "import React, { useState } from 'react';\n"
                "import ReactDOM from 'react-dom';\n\n"
                "function App() {\n"
                "    const [count, setCount] = useState(0);\n\n"
                "    return (\n"
                "        <div>\n"
                "            <h1>Count: {count}</h1>\n"
                "            <button onClick={() => setCount(count + 1)}>Increment</button>\n"
                "            <button onClick={() => setCount(count - 1)}>Decrement</button>\n"
                "        </div>\n"
                "    );\n"
                "}\n\n"
                "ReactDOM.render(<App />, document.getElementById('root'));\n"
                "// Ensure you have a div with id='root' in your HTML file.\n"
                "# This example demonstrates state management using React Hooks.\n"
                "```\n\n"
                "Example (React Router):\n"
                "```javascript\n\n"
                "import React from 'react';\n"
                "import ReactDOM from 'react-dom';\n"
                "import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n"
                "function Home() {\n"
                "    return <h2>Home Page</h2>;\n"
                "}\n\n"
                "function About() {\n"
                "    return <h2>About Page</h2>;\n"
                "}\n\n"
                "function App() {\n"
                "    return (\n"
                "        <Router>\n"
                "            <Switch>\n"
                "                <Route path=\"/\" exact component={Home} />\n"
                "                <Route path=\"/about\" component={About} />\n"
                "            </Switch>\n"
                "        </Router>\n"
                "    );\n"
                "}\n\n"
                "ReactDOM.render(<App />, document.getElementById('root'));\n"
                "// Ensure you have a div with id='root' in your HTML file.\n"
                "# This example demonstrates routing in a React application.\n"
                "```\n\n"
                "Example (React.js with Redux):\n"
                "```javascript\n\n"
                "import React from 'react';\n"
                "import ReactDOM from 'react-dom';\n"
                "import { createStore } from 'redux';\n"
                "import { Provider } from 'react-redux';\n\n"
                "const initialState = {\n"
                "    count: 0\n"
                "};\n\n"
                "function reducer(state = initialState, action) {\n"
                "    switch (action.type) {\n"
                "        case 'INCREMENT':\n"
                "            return { ...state, count: state.count + 1 };\n"
                "        case 'DECREMENT':\n"
                "            return { ...state, count: state.count - 1 };\n"
                "        default:\n"
                "            return state;\n"
                "    }\n"
                "}\n\n"
                "const store = createStore(reducer);\n\n"
                "function App() {\n"
                "    return (\n"
                "        <Provider store={store}>\n"
                "            <div>\n"
                "                <h1>Count: {store.getState().count}</h1>\n"
                "                <button onClick={() => store.dispatch({ type: 'INCREMENT' })}>Increment</button>\n"
                "                <button onClick={() => store.dispatch({ type: 'DECREMENT' })}>Decrement</button>\n"
                "            </div>\n"
                "        </Provider>\n"
                "    );\n"
                "}\n\n"
                "ReactDOM.render(<App />, document.getElementById('root'));\n"
                "// Ensure you have a div with id='root' in your HTML file.\n"
                "# This example demonstrates a simple Redux setup with React.\n"
                "```\n"
            )
        },
        "HTML": {
            "Basics": (
                "Learn the structure of HTML documents and basic tags.\n\n"
                "HTML (HyperText Markup Language) is the standard markup language for creating web pages.\n\n"
                "It consists of elements represented by tags, which define the structure and content of a web page.\n\n"
                "To begin coding in HTML, you can use any text editor or an Integrated Development Environment (IDE).\n\n"
                "You can save your HTML files with a .html extension and open them in a web browser to view the output.\n\n"
                "Example:\n"
                "```html\n\n"
                "<!DOCTYPE html>\n"
                "<html>\n"
                "<head>\n"
                "    <title>Practice HTML Page</title>\n"
                "</head>\n"
                "<body>\n"
                "    <h1>Welcome to HTML</h1>\n"
                "    <p>This is a basic HTML document.</p>\n"
                "</body>\n"
                "</html>\n"
                "```\n\n"
                "Example:\n"
                "```html\n\n"
                "<!DOCTYPE html>\n"
                "<html>\n"
                "<head>\n"
                "    <title>Practice HTML Page</title>\n"
                "</head>\n"
                "<body>\n"
                "    <h1>Welcome to HTML</h1>\n"
                "    <p>This is a basic HTML document.</p>\n"
                "    <a href=\"https://www.example.com\">Visit Example</a>\n"
                "    <img src=\"image.jpg\" alt=\"Example Image\">\n"
                "</body>\n"
                "</html>\n"
                "```\n\n"
                "HTML documents start with a DOCTYPE declaration, followed by the <html> element.\n\n"
                "The <head> section contains metadata, and the <body> section contains the content.\n\n"
                "Common HTML tags include <h1> to <h6> for headings, <p> for paragraphs, and <a> for links.\n\n"
            ),
            "Forms": (
                "Understand how to create and handle forms in HTML.\n\n"
                "Forms are used to collect user input. They can include text fields, checkboxes, radio buttons, and submit buttons.\n\n"
                "You can use the <form> element to create a form, and various input elements to collect data.\n\n"
                "Example:\n"
                "```html\n\n"
                "<form action=\"/submit\" method=\"post\">\n"
                "    <label for=\"name\">Name:</label>\n"
                "    <input type=\"text\" id=\"name\" name=\"name\">\n"
                "    <br>\n"
                "    <label for=\"email\">Email:</label>\n"
                "    <input type=\"email\" id=\"email\" name=\"email\">\n"
                "    <br>\n"
                "    <input type=\"submit\" value=\"Submit\">\n"
                "</form>\n"
                "# This example demonstrates a simple form with text and email inputs.\n"
                "```\n\n"
                "Example:\n"
                "```html\n\n"
                "<form action=\"/submit\" method=\"post\">\n"
                "    <label for=\"name\">Name:</label>\n"
                "    <input type=\"text\" id=\"name\" name=\"name\" required>\n"
                "    <br>\n"
                "    <label for=\"email\">Email:</label>\n"
                "    <input type=\"email\" id=\"email\" name=\"email\" required>\n"
                "    <br>\n"
                "    <label"
                "    <input type=\"checkbox\" id=\"subscribe\" name=\"subscribe\" value=\"yes\">\n"
                "    <label for=\"subscribe\">Subscribe to newsletter</label>\n"
                "    <br>\n"
                "    <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\n"
                "    <label"
                "    <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n"
                "    <label"
                "    <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\">\n"
                "    <label"
                "    <input type=\"submit\" value=\"Submit\">\n"
                "</form>\n"
                "# This example demonstrates a form with various input types.\n"
                "```\n"
            ),
            "SEO": (
                "Learn how to optimize HTML for search engines.\n\n"
                "Search Engine Optimization (SEO) involves optimizing your web pages to rank higher in search engine results.\n\n"
                "You can use meta tags, headings, and structured data to improve SEO.\n\n"
                "Example:\n"
                "```html\n\n"
                "<!DOCTYPE html>\n"
                "<html>\n"
                "<head>\n"
                "    <title>SEO Optimized Page</title>\n"
                "    <meta name=\"description\" content=\"Learn how to optimize your HTML for search engines.\">\n"
                "    <meta name=\"keywords\" content=\"HTML, SEO, Optimization\">\n"
                "    <meta name=\"author\" content=\"John Doe\">\n"
                "</head>\n"
                "<body>\n"
                "    <h1>Welcome to SEO Optimization</h1>\n"
                "    <p>This page is optimized for search engines.</p>\n"
                "</body>\n"
                "</html>\n"
                "# This example demonstrates the use of meta tags for SEO.\n"
                "```\n\n"
                "Example:\n"
                "```html\n\n"
                "<!DOCTYPE html>\n"
                "<html>\n"
                "<head>\n"
                "    <title>SEO Optimized Page</title>\n"
                "    <meta name=\"description\" content=\"Learn how to optimize your HTML for search engines.\">\n"
                "    <meta name=\"keywords\" content=\"HTML, SEO, Optimization\">\n"
                "    <meta name=\"author\" content=\"John Doe\">\n"
                "    <meta property=\"og:title\" content=\"SEO Optimized Page\">\n"
                "    <meta property=\"og:description\" content=\"Learn how to optimize your HTML for search engines.\">\n"
                "    <meta property=\"og:image\" content=\"image.jpg\">\n"
                "    <meta property=\"og:url\" content=\"https://www.example.com\">\n"
                "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
                "</head>\n"
                "<body>\n"
                "    <h1>Welcome to SEO Optimization</h1>\n"
                "    <p>This page is optimized for search engines.</p>\n"
                "    <h2>Benefits of SEO</h2>\n"
                "    <ul>\n"
                "        <li>Increased visibility</li>\n"
                "        <li>Higher traffic</li>\n"
                "        <li>Better user experience</li>\n"
                "    </ul>\n"
                "    <h2>Best Practices</h2>\n"
                "    <ol>\n"
                "        <li>Use relevant keywords</li>\n"
                "        <li>Optimize images</li>\n"
                "        <li>Use descriptive URLs</li>\n"
                "    </ol>\n"
                "    <h2>Conclusion</h2>\n"
                "    <p>SEO is essential for improving your website's visibility and ranking.</p>\n"
                "</body>\n"
                "</html>\n"
                "# This example demonstrates how to use meta tags and structured data for SEO.\n"
                "```\n"
            ),
            "Canvas": (
                "Explore the HTML5 Canvas API for drawing graphics.\n\n"
                "The <canvas> element is used to draw graphics on the fly via JavaScript.\n\n"
                "You can use the Canvas API to create shapes, images, and animations.\n\n"
                "Example:\n"
                "```html\n\n"
                "<!DOCTYPE html>\n"
                "<html>\n"
                "<head>\n"
                "    <title>Canvas Example</title>\n"
                "</head>\n"
                "<body>\n"
                "    <canvas id=\"myCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid #000000;\"></canvas>\n\n"
                "    <script>\n"
                "        const canvas = document.getElementById('myCanvas');\n"
                "        const ctx = canvas.getContext('2d');\n"
                "        ctx.fillStyle = 'blue';\n"
                "        ctx.fillRect(50, 20, 100, 50);\n"
                "    </script>\n"
                "</body>\n"
                "</html>\n"
                "# This example demonstrates drawing a rectangle on the canvas.\n"
                "```\n\n"
                "Example:\n"
                "```html\n\n"
                "<!DOCTYPE html>\n"
                "<html>\n"
                "<head>\n"
                "    <title>Canvas Example</title>\n"
                "</head>\n"
                "<body>\n"
                "    <canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"border:1px solid #000000;\"></canvas>\n\n"
                "    <script>\n"
                "        const canvas = document.getElementById('myCanvas');\n"
                "        const ctx = canvas.getContext('2d');\n"
                "        ctx.fillStyle = 'blue';\n"
                "        ctx.fillRect(50, 50, 300, 300);\n\n"
                "        ctx.fillStyle = 'red';\n"
                "        ctx.beginPath();\n"
                "        ctx.arc(200, 200, 50, 0, Math.PI * 2);\n"
                "        ctx.fill();\n\n"
                "        ctx.fillStyle = 'green';\n"
                "        ctx.font = '30px Arial';\n"
                "        ctx.fillText('Hello, Canvas!', 100, 350);\n"
                "    </script>\n"
                "</body>\n"
                "</html>\n"
                "# This example demonstrates drawing a rectangle, circle, and text on the canvas.\n"
                "```\n"
            )
        },
        "XML": {
            "Basics": (
                "Learn the structure of XML documents and basic tags.\n\n"
                "XML (eXtensible Markup Language) is a markup language used to store and transport data.\n\n"
                "It is designed to be both human-readable and machine-readable.\n\n"
                "XML documents consist of elements, attributes, and text content.\n\n"
                "To begin coding in XML, you can use any text editor or an Integrated Development Environment (IDE).\n\n"
                "You can save your XML files with a .xml extension and open them in a web browser or XML editor to view the output.\n\n"
                "Example:\n"
                "```xml\n\n"
                "<note>\n"
                "    <to>Tove</to>\n"
                "    <from>Jani</from>\n"
                "    <heading>Reminder</heading>\n"
                "    <body>Don't forget me this weekend!</body>\n"
                "</note>\n"
                "```\n\n"
                "Example:\n"
                "```xml\n\n"
                "<bookstore>\n"
                "    <book>\n"
                "        <title lang=\"en\">Harry Potter</title>\n"
                "        <author>J.K. Rowling</author>\n"
                "        <year>2005</year>\n"
                "        <price>29.99</price>\n"
                "    </book>\n"
                "</bookstore>\n"
                "```\n\n"
                "Example:\n"
                "```xml\n\n"
                "<game>\n"
                "    <title>Sub Zero</title>\n"
                "    <platform>PC</platform>\n"
                "    <release_date>2023-10-01</release_date>\n"
                "    <genre>Action</genre>\n"
                "    <rating>4.5</rating>\n"
                "</game>\n"
                "```\n\n"
                "XML documents start with an XML declaration, followed by a root element.\n\n"
                "Elements are defined using opening and closing tags.\n\n"
                "Attributes can be added to elements for additional information.\n\n"
                "XML is case-sensitive, and elements must be properly nested.\n\n"
                "Comments can be added using <!-- comment --> syntax.\n\n"
                "# Example:\n"
                "```xml\n\n"
                "<!-- This is a comment -->\n"
                "<note>\n"
                "    <to>Tove</to>\n"
                "    <from>Jani</from>\n"
                "    <heading>Reminder</heading>\n"
                "    <body>Don't forget me this weekend!</body>\n"
                "</note>\n"
                "```\n\n"
                "XML is often used for data interchange between systems.\n\n"
                "It is widely used in web services, configuration files, and data storage.\n\n"
                "XML parsers are available in many programming languages to read and manipulate XML data.\n\n"
                "# Example:\n"
                "```xml\n\n"
                "<!-- This is a comment -->\n"
                "<game>\n"
                "    <title>Sub Zero</title>\n"
                "    <platform>PC</platform>\n"
                "    <release_date>2023-10-01</release_date>\n"
                "    <genre>Action</genre>\n"
                "    <rating>4.5</rating>\n"
                "</game>\n"
                "```\n"
            ),
            "Schemas": (
                "Understand the purpose of XML schemas and how to define them.\n\n"
                "XML Schema is a language used to define the structure and data types of XML documents.\n\n"
                "It allows you to specify the elements, attributes, and data types that are allowed in an XML document.\n\n"
                "Example:\n"
                "```xml\n\n"
                "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n"
                "    <xs:element name=\"note\">\n"
                "        <xs:complexType>\n"
                "            <xs:sequence>\n"
                "                <xs:element name=\"to\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"from\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"heading\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"body\" type=\"xs:string\"/>\n"
                "            </xs:sequence>\n"
                "        </xs:complexType>\n"
                "    </xs:element>\n"
                "</xs:schema>\n"
                "# This schema defines the structure of a note element with child elements to, from, heading, and body.\n"
                "```\n\n"
                "Example:\n"
                "```xml\n\n"
                "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n"
                "    <xs:element name=\"bookstore\">\n"
                "        <xs:complexType>\n"
                "            <xs:sequence>\n"
                "                <xs:element name=\"book\" maxOccurs=\"unbounded\">\n"
                "                    <xs:complexType>\n"
                "                        <xs:sequence>\n"
                "                            <xs:element name=\"title\" type=\"xs:string\"/>\n"
                "                            <xs:element name=\"author\" type=\"xs:string\"/>\n"
                "                            <xs:element name=\"year\" type=\"xs:integer\"/>\n"
                "                            <xs:element name=\"price\" type=\"xs:decimal\"/>\n"
                "                        </xs:sequence>\n"
                "                        <xs:attribute name=\"lang\" type=\"xs:string\" use=\"optional\"/>\n"
                "                    </xs:complexType>\n"
                "                </xs:element>\n"
                "            </xs:sequence>\n"
                "        </xs:complexType>\n"
                "    </xs:element>\n"
                "</xs:schema>\n"
                "# This schema defines the structure of a bookstore element with child elements book, title, author, year, and price.\n"
                "```\n\n"
                "Example:\n"
                "```xml\n\n"
                "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n"
                "    <xs:element name=\"game\">\n"
                "        <xs:complexType>\n"
                "            <xs:sequence>\n"
                "                <xs:element name=\"title\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"platform\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"release_date\" type=\"xs:date\"/>\n"
                "                <xs:element name=\"genre\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"rating\" type=\"xs:decimal\"/>\n"
                "            </xs:sequence>\n"
                "            <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\"/>\n"
                "        </xs:complexType>\n"
                "    </xs:element>\n"
                "</xs:schema>\n"
                "# This schema defines the structure of a game element with child elements title, platform, release_date, genre, and rating.\n"
                "```\n\n"
                "XML Schema allows you to define complex data types, including sequences, choices, and attributes.\n\n"
                "You can also define constraints on the data, such as minimum and maximum values.\n\n"
                "XML Schema is widely used in web services, data validation, and data interchange.\n\n"
                "Example:\n"
                "```xml\n\n"
                "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n"
                "    <xs:element name=\"film\">\n"
                "        <xs:complexType>\n"
                "            <xs:sequence>\n"
                "                <xs:element name=\"title\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"director\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"release_year\" type=\"xs:integer\"/>\n"
                "                <xs:element name=\"genre\" type=\"xs:string\"/>\n"
                "                <xs:element name=\"box_office\" type=\"xs:decimal\"/>\n"
                "            </xs:sequence>\n"
                "            <xs:attribute name=\"rating\" type=\"xs:string\" use=\"optional\"/>\n"
                "        </xs:complexType>\n"
                "    </xs:element>\n"
                "</xs:schema>\n"
                "```\n\n"
                "XML Schema is defined using XML syntax, and it can be validated against an XML document.\n\n"
                "You can use XML Schema validators to check if an XML document conforms to the defined schema.\n\n"
                "XML Schema is a powerful tool for ensuring data integrity and consistency in XML documents.\n\n"
            ),
            "XPath": (
                "Learn how to navigate and query XML documents using XPath.\n\n"
                "XPath (XML Path Language) is a language used to navigate through elements and attributes in an XML document.\n\n"
                "It allows you to select nodes or a set of nodes on the basis of attributes, element names, and other criteria.\n\n"
                "Example:\n"
                "```xml\n\n"
                "//book[author='J.K. Rowling']/title\n"
                "//book[@lang='en']/author\n"
                "//book[price>35]/title\n"
                "//book[author='J.K. Rowling' and price<30]/title\n"
                "//book[year<2000 and genre='Fantasy']/title\n"
                "# This example selects books by J.K. Rowling with a price less than 30.\n"
                "```\n\n"
                "Example:\n"
                "```xml\n\n"
                "//game[platform='PC']/title\n"
                "//game[release_date='2023-10-01']/platform\n"
                "//game[genre='Action']/rating\n"
                "//game[platform='PC' and rating>4]/title\n"
                "//game[release_date<2023-10-01 and genre='Action']/title\n"
                "# This example selects games with platform 'PC' and rating greater than 4.\n"
                "```\n\n"
                "Example:\n"
                "```xml\n\n"
                "//film[genre='Action']/title\n"
                "//film[release_year='2023']/director\n"
                "//film[box_office>1000000]/title\n"
                "//film[genre='Action' and rating>8]/title\n"
                "//film[box_office>1000000 and release_year<2023]/title\n"
                "# This example selects films with box office greater than 1 million and released before 2023.\n"
                "```\n"
            ),
            "XSLT": (
                "Understand how to transform XML documents using XSLT.\n\n"
                "XSLT (eXtensible Stylesheet Language Transformations) is a language used for transforming XML documents into other formats.\n\n"
                "It allows you to convert XML data into HTML, plain text, or other XML formats.\n\n"
                "Example:\n"
                "```xml\n\n"
                "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n"
                "    <xsl:template match=\"/\">\n"
                "        <html>\n"
                "            <body>\n"
                "                <h2>My Bookstore</h2>\n"
                "                <table border=\"1\">\n"
                "                    <tr bgcolor=\"#9acd32\">\n"
                "                        <th>Title</th>\n"
                "                        <th>Author</th>\n"
                "                    </tr>\n"
                "                    <xsl:for-each select=\"bookstore/book\">\n"
                "                        <tr>\n"
                "                            <td><xsl:value-of select=\"title\"/></td>\n"
                "                            <td><xsl:value-of select=\"author\"/></td>\n"
                "                        </tr>\n"
                "                    </xsl:for-each>\n"
                "                </table>\n"
                "            </body>\n"
                "        </html>\n"
                "    </xsl:template>\n"
                "</xsl:stylesheet>\n"
                "# This example transforms an XML document into an HTML table.\n"
                "```\n\n"
                "Example:\n"
                "```xml\n\n"
                "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n"
                "    <xsl:template match=\"/\">\n"
                "        <html>\n"
                "            <body>\n"
                "                <h2>My Game Collection</h2>\n"
                "                <table border=\"1\">\n"
                "                    <tr bgcolor=\"#9acd32\">\n"
                "                        <th>Title</th>\n"
                "                        <th>Platform</th>\n"
                "                        <th>Release Date</th>\n"
                "                        <th>Genre</th>\n"
                "                        <th>Rating</th>\n"
                "                    </tr>\n"
                "                    <xsl:for-each select=\"game\">\n"
                "                        <tr>\n"
                "                            <td><xsl:value-of select=\"title\"/></td>\n"
                "                            <td><xsl:value-of select=\"platform\"/></td>\n"
                "                            <td><xsl:value-of select=\"release_date\"/></td>\n"
                "                            <td><xsl:value-of select=\"genre\"/></td>\n"
                "                            <td><xsl:value-of select=\"rating\"/></td>\n"
                "                        </tr>\n"
                "                    </xsl:for-each>\n"
                "                </table>\n"
                "            </body>\n"
                "        </html>\n"
                "    </xsl:template>\n"
                "</xsl:stylesheet>\n"
                "# This example transforms an XML document into an HTML table.\n"
                "```\n"
            )
        },
        "CSS": {
            "Basics": (
                "Learn CSS syntax and how to style HTML elements.\n\n"
                "CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML.\n\n"
                "It allows you to control the layout, colors, fonts, and overall appearance of web pages.\n\n"
                "CSS rules consist of selectors and declarations.\n\n"
                "To begin coding in CSS, you can use any text editor or an Integrated Development Environment (IDE).\n\n"
                "You can save your CSS files with a .css extension and link them to your HTML files using the <link> tag.\n\n"
                "Example:\n"
                "```css\n\n"
                "/* Basic CSS styling */\n"
                "body {\n"
                "    font-family: Arial, sans-serif;\n"
                "    background-color: #f0f0f0;\n"
                "    margin: 0;\n"
                "    padding: 0;\n"
                "}\n\n"
                "h1 {\n"
                "    color: #333;\n"
                "    text-align: center;\n"
                "}\n\n"
                "p {\n"
                "    color: #666;\n"
                "    line-height: 1.5;\n"
                "}\n"
                "```\n\n"
                "Example:\n"
                "```css\n\n"
                "/* Basic CSS styling */\n"
                "body {\n"
                "    font-family: Arial, sans-serif;\n"
                "    background-color: #f0f0f0;\n"
                "    margin: 0;\n"
                "    padding: 0;\n"
                "}\n\n"
                "h1 {\n"
                "    color: #333;\n"
                "    text-align: center;\n"
                "}\n\n"
                "p {\n"
                "    color: #666;\n"
                "    line-height: 1.5;\n"
                "}\n\n"
                "a {\n"
                "    color: #007bff;\n"
                "    text-decoration: none;\n"
                "}\n\n"
                "a:hover {\n"
                "    text-decoration: underline;\n"
                "}\n\n"
                "button {\n"
                "    background-color: #007bff;\n"
                "    color: white;\n"
                "    border: none;\n"
                "    padding: 10px 20px;\n"
                "    cursor: pointer;\n"
                "}\n\n"
                "button:hover {\n"
                "    background-color: #0056b3;\n"
                "}\n"
                "```\n\n"
                "CSS rules consist of selectors and declarations.\n\n"
                "Selectors target HTML elements, and declarations define the styles to be applied.\n\n"
                "Declarations consist of properties and values, separated by a colon.\n\n"
                "Multiple declarations are enclosed in curly braces and separated by semicolons.\n\n"
                "CSS can be applied inline, internally (within <style> tags), or externally (via linked stylesheets).\n\n"
            ),
            "Flexbox": (
                "Understand how to use Flexbox for responsive layouts.\n\n"
                "Flexbox is a one-dimensional layout method for laying out items in rows or columns.\n\n"
                "It provides an efficient way to align and distribute space among items in a container.\n\n"
                "Example:\n"
                "```css\n\n"
                "/* Flexbox example */\n"
                ".container {\n"
                "    display: flex;\n"
                "    justify-content: center;\n"
                "    align-items: center;\n"
                "    height: 100vh;\n"
                "    background-color: #e0e0e0;\n"
                "}\n\n"
                ".box {\n"
                "    width: 100px;\n"
                "    height: 100px;\n"
                "    margin: 10px;\n"
                "    background-color: #4caf50;\n"
                "}\n"
                "# This example demonstrates a flexbox layout with centered items.\n"
                "```\n\n"
                "Example:\n"
                "```css\n\n"
                "/* Flexbox example */\n"
                ".container {\n"
                "    display: flex;\n"
                "    justify-content: space-around;\n"
                "    align-items: center;\n"
                "    height: 100vh;\n"
                "    background-color: #e0e0e0;\n"
                "}\n\n"
                ".box {\n"
                "    width: 100px;\n"
                "    height: 100px;\n"
                "    margin: 10px;\n"
                "    background-color: #4caf50;\n"
                "}\n\n"
                ".box:nth-child(2) {\n"
                "    background-color: #ff5722;\n"
                "}\n\n"
                ".box:nth-child(3) {\n"
                "    background-color: #2196f3;\n"
                "}\n\n"
                ".box:nth-child(4) {\n"
                "    background-color: #ffeb3b;\n"
                "}\n\n"
                ".box:nth-child(5) {\n"
                "    background-color: #673ab7;\n"
                "}\n"
                "# This example demonstrates a flexbox layout with different colored boxes.\n"
                "```\n"
            ),
            "Grid": (
                "Learn CSS Grid for advanced layout designs.\n\n"
                "CSS Grid Layout is a two-dimensional layout system for the web.\n\n"
                "It allows you to create complex layouts using rows and columns.\n\n"
                "Example:\n"
                "```css\n\n"
                "/* CSS Grid example */\n"
                ".grid-container {\n"
                "    display: grid;\n"
                "    grid-template-columns: repeat(3, 1fr);\n"
                "    gap: 10px;\n"
                "    padding: 10px;\n"
                "}\n\n"
                ".grid-item {\n"
                "    background-color: #2196f3;\n"
                "    color: white;\n"
                "    text-align: center;\n"
                "    padding: 20px;\n"
                "    font-size: 20px;\n"
                "}\n"
                "# This example demonstrates a grid layout with different column and row spans.\n"
                "```\n\n"
                "Example:\n"
                "```css\n\n"
                "/* CSS Grid example */\n"
                ".grid-container {\n"
                "    display: grid;\n"
                "    grid-template-columns: repeat(3, 1fr);\n"
                "    gap: 10px;\n"
                "    padding: 10px;\n"
                "}\n\n"
                ".grid-item {\n"
                "    background-color: #2196f3;\n"
                "    color: white;\n"
                "    text-align: center;\n"
                "    padding: 20px;\n"
                "    font-size: 20px;\n"
                "}\n\n"
                ".grid-item:nth-child(1) {\n"
                "    grid-column: span 2;\n"
                "    grid-row: span 2;\n"
                "}\n\n"
                ".grid-item:nth-child(2) {\n"
                "    grid-column: span 1;\n"
                "    grid-row: span 1;\n"
                "}\n\n"
                ".grid-item:nth-child(3) {\n"
                "    grid-column: span 1;\n"
                "    grid-row: span 1;\n"
                "}\n\n"
                ".grid-item:nth-child(4) {\n"
                "    grid-column: span 1;\n"
                "    grid-row: span 1;\n"
                "}\n\n"
                ".grid-item:nth-child(5) {\n"
                "    grid-column: span 1;\n"
                "    grid-row: span 1;\n"
                "}\n\n"
                ".grid-item:nth-child(6) {\n"
                "    grid-column: span 1;\n"
                "    grid-row: span 1;\n"
                "}\n\n"
                ".grid-item:nth-child(7) {\n"
                "    grid-column: span 1;\n"
                "    grid-row: span 1;\n"
                "}\n\n"
                ".grid-item:nth-child(8) {\n"
                "    grid-column: span 1;\n"
                "    grid-row: span 1;\n"
                "}\n\n"
                ".grid-item:nth-child(9) {\n"
                "    grid-column: span 1;\n"
                "    grid-row: span 1;\n"
                "}\n"
                "# This example demonstrates a grid layout with different column and row spans.\n"
                "```\n"
            ),
            "Animations": (
                "Create animations using CSS keyframes and transitions.\n\n"
                "CSS animations allow you to animate transitions from one CSS style to another.\n\n"
                "You can use keyframes to define the styles at various points in the animation sequence.\n\n"
                "Example:\n"
                "```css\n\n"
                "/* CSS Animation example */\n"
                ".animated-box {\n"
                "    width: 100px;\n"
                "    height: 100px;\n"
                "    background-color: #ff5722;\n"
                "    animation: move 2s infinite;\n"
                "}\n\n"
                "@keyframes move {\n"
                "    0% {\n"
                "        transform: translateX(0);\n"
                "    }\n"
                "    50% {\n"
                "        transform: translateX(100px);\n"
                "    }\n"
                "    100% {\n"
                "        transform: translateX(0);\n"
                "    }\n"
                "}\n"
                "# This example demonstrates a simple animation that moves a box horizontally.\n"
                "```\n\n"
                "Example:\n"
                "```css\n\n"
                "/* CSS Transition example */\n"
                ".box {\n"
                "    width: 100px;\n"
                "    height: 100px;\n"
                "    background-color: #4caf50;\n"
                "    transition: background-color 0.5s ease;\n"
                "}\n\n"
                ".box:hover {\n"
                "    background-color: #ff5722;\n"
                "}\n"
                "# This example demonstrates a simple transition effect on hover.\n"
                "```\n"
            )
        },
        "Ruby": {
            "Basics": (
                "Learn Ruby syntax, variables, and basic programming constructs.\n\n"
                "In Ruby, you can declare variables without specifying a type.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using # for single-line comments and =begin and =end for multi-line comments.\n\n"
                "To begin coding in Ruby, first, you need to install Ruby on your system.\n\n"
                "You can download Ruby from the official website: https://www.ruby-lang.org/en/downloads/\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Ruby code.\n\n"
                "Example:\n"
                "```ruby\n\n"
                "# Declare variables\n"
                "x = 10\n"
                "y = 20\n"
                "puts \"The sum is: #{x + y}\"\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```ruby\n\n"
                "# Declare a string variable\n"
                "name = 'Sub Zero'\n"
                "puts \"Hello, #{name}!\"\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```ruby\n\n"
                "# Declare a variable and assign a value\n"
                "age = 25\n"
                "# Use a conditional statement\n"
                "if age >= 18\n"
                "    puts 'You are an adult.'\n"
                "else\n"
                "    puts 'You are a minor.'\n"
                "end\n"
                "# Output: You are an adult.\n"
                "```\n\n"
                "To print output, use the puts method.\n\n"
                "To take user input, use the gets method.\n\n"
                "Ruby supports various data types, including strings, integers, floats, arrays, and hashes.\n\n"
                "Ruby arrays are ordered collections of objects, hashes store data in key-value pairs.\n\n"
                "# Example:\n"
                "```ruby\n\n"
                "# Declare an array\n"
                "fruits = ['apple', 'banana', 'cherry']\n\n"
                "# Iterate over the array\n"
                "fruits.each do |fruit|\n"
                "    puts fruit\n"
                "end\n"
                "# Output:\n"
                "# apple\n"
                "# banana\n"
                "# cherry\n"
                "```\n"
            ),
            "Rails": (
                "Build web applications using the Ruby on Rails framework.\n\n"
                "Ruby on Rails is a web application framework that makes it easy to develop database-backed web applications.\n\n"
                "It follows the MVC (Model-View-Controller) architecture.\n\n"
                "Example (Basic Rails Controller):\n"
                "```ruby\n\n"
                "class WelcomeController < ApplicationController\n"
                "  def index\n"
                "    render plain: 'Welcome to Rails!'\n"
                "  end\n"
                "end\n\n"
                "# Add a route in config/routes.rb:\n"
                "# root 'welcome#index'\n"
                "# Start the Rails server and visit http://localhost:3000/ to see the output.\n"
                "```\n\n"
                "Example (Basic Rails Model):\n"
                "```ruby\n\n"
                "class User < ApplicationRecord\n"
                "  validates :name, presence: true\n"
                "  validates :email, presence: true, uniqueness: true\n"
                "end\n\n"
                "# Create a migration to generate the users table:\n"
                "# rails generate migration CreateUsers name:string email:string\n"
                "# Run the migration:\n"
                "# rails db:migrate\n"
                "# Use the User model in your Rails application to interact with the database.\n"
                "```\n"
            ),
            "Metaprogramming": (
                "Explore Ruby's metaprogramming capabilities.\n\n"
                "Metaprogramming allows you to write code that writes code, enabling dynamic method creation and modification.\n\n"
                "You can use `define_method` to create methods dynamically at runtime.\n\n"
                "Example (Dynamic Method Creation):\n"
                "```ruby\n\n"
                "class DynamicMethods\n"
                "  def self.create_method(name)\n"
                "    define_method(name) do\n"
                "      puts \"You called the method: #{name}\"\n"
                "    end\n"
                "  end\n"
                "end\n\n"
                "DynamicMethods.create_method(:greet)\n"
                "obj = DynamicMethods.new\n"
                "obj.greet\n"
                "# Output: You called the method: greet\n"
                "# The method greet is dynamically created.\n"
                "```\n\n"
                "Example (Method Missing):\n"
                "```ruby\n\n"
                "class DynamicMethod\n"
                "  def method_missing(name, *args)\n"
                "    puts \"You called a missing method: #{name}\"\n"
                "  end\n"
                "end\n\n"
                "obj = DynamicMethod.new\n"
                "obj.unknown_method\n"
                "# Output: You called a missing method: unknown_method\n"
                "# The method unknown_method is not defined, but method_missing handles it.\n"
                "```\n\n"
                "Example (Class Macros):\n"
                "```ruby\n\n"
                "class MyClass\n"
                "  def self.my_macro(name)\n"
                "    define_method(name) do\n"
                "      puts \"This is a macro method: #{name}\"\n"
                "    end\n"
                "  end\n"
                "end\n\n"
                "MyClass.my_macro(:hello)\n"
                "obj = MyClass.new\n"
                "obj.hello\n"
                "# Output: This is a macro method: hello\n"
                "# The method hello is dynamically created.\n"
                "```\n"
            )
        },
        "Lua": {
            "Basics": (
                "Learn Lua syntax, variables, and basic programming constructs.\n\n"
                "In Lua, you can declare variables using the `local` keyword.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string concatenation with the `..` operator.\n\n"
                "Comments can be added using -- for single-line comments and --[[ ]] for multi-line comments.\n\n"
                "To begin coding in Lua, first, install Lua on your system.\n\n"
                "You can download Lua from the official website: https://www.lua.org/download.html\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Lua code.\n\n"
                "Example:\n"
                "```lua\n\n"
                "-- Declare variables\n"
                "local x = 10\n"
                "local y = 20\n"
                "print(\"The sum is: \" .. (x + y))\n"
                "-- Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```lua\n\n"
                "-- Declare a string variable\n"
                "local name = \"Sub Zero\"\n"
                "print(\"Hello, \" .. name .. \"!\")\n"
                "-- Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```lua\n\n"
                "-- Declare a variable and assign a value\n"
                "local age = 25\n"
                "-- Use a conditional statement\n"
                "if age >= 18 then\n"
                "    print(\"You are an adult.\")\n"
                "else\n"
                "    print(\"You are a minor.\")\n"
                "end\n"
                "-- Output: You are an adult.\n"
                "```\n\n"
                "To print output, use the print function.\n\n"
                "To take user input, use the io.read function.\n\n"
                "Lua supports various data types, including strings, numbers, tables, and functions.\n\n"
                "Lua tables are associative arrays that can hold different types of data.\n\n"
                "# Example:\n"
                "```lua\n\n"
                "-- Declare a table\n"
                "local fruits = {\"apple\", \"banana\", \"cherry\"}\n\n"
                "-- Iterate over the table\n"
                "for i, fruit in ipairs(fruits) do\n"
                "    print(i .. \": \" .. fruit)\n"
                "end\n"
                "-- Output:\n"
                "-- 1: apple\n"
                "-- 2: banana\n"
                "-- 3: cherry\n"
                "```\n"
            ),
            "Game Development": (
                "Use Lua for game development with frameworks like Love2D.\n\n"
                "Lua is often used as a scripting language in game engines due to its lightweight nature and ease of integration.\n\n"
                "Love2D is a popular framework for 2D game development using Lua.\n\n"
                "Lua provides a simple API for graphics, sound, and input handling.\n\n"
                "Roblox is another platform that uses Lua for scripting game logic.\n\n"
                "Example (Love2D Basic Setup):\n"
                "```lua\n\n"
                "function love.load()\n"
                "    message = \"Hello, Love2D!\"\n"
                "end\n\n"
                "function love.draw()\n"
                "    love.graphics.print(message, 400, 300)\n"
                "end\n"
                "-- Run this script with Love2D to see the output.\n"
                "```\n\n"
                "Example (Love2D Basic Animation):\n"
                "```lua\n\n"
                "local x, y = 100, 100\n"
                "local speed = 200\n\n"
                "function love.load()\n"
                "    love.window.setTitle(\"Moving Square\")\n"
                "end\n\n"
                "function love.update(dt)\n"
                "    if love.keyboard.isDown(\"right\") then\n"
                "        x = x + speed * dt\n"
                "    elseif love.keyboard.isDown(\"left\") then\n"
                "        x = x - speed * dt\n"
                "    end\n"
                "end\n\n"
                "function love.draw()\n"
                "    love.graphics.setColor(0, 1, 0)\n"
                "    love.graphics.rectangle(\"fill\", x, y, 50, 50)\n"
                "end\n"
                "-- Run this script with Love2D to see the moving square.\n"
                "```\n\n"
                "Example (Roblox Basic Script):\n"
                "```lua\n\n"
                "local part = Instance.new(\"Part\")\n"
                "part.Size = Vector3.new(4, 1, 2)\n"
                "part.Position = Vector3.new(0, 10, 0)\n"
                "part.Anchored = true\n"
                "part.Parent = game.Workspace\n\n"
                "local function onTouch(other)\n"
                "    if other:IsA(\"Player\") then\n"
                "        print(\"Touched by player!\")\n"
                "    end\n"
                "end\n\n"
                "part.Touched:Connect(onTouch)\n"
                "-- Run this script in Roblox Studio to see the output.\n"
                "```\n\n"
                "Example (Roblox GUI Script):\n"
                "```lua\n\n"
                "local screenGui = Instance.new(\"ScreenGui\")\n"
                "local textLabel = Instance.new(\"TextLabel\")\n"
                "textLabel.Size = UDim2.new(0, 200, 0, 50)\n"
                "textLabel.Position = UDim2.new(0.5, -100, 0.5, -25)\n"
                "textLabel.Text = \"Hello, Roblox GUI!\"\n"
                "textLabel.Parent = screenGui\n"
                "screenGui.Parent = game.Players.LocalPlayer:WaitForChild(\"PlayerGui\")\n\n"
                "local function onClick()\n"
                "    textLabel.Text = \"Button Clicked!\"\n"
                "end\n\n"
                "textLabel.MouseButton1Click:Connect(onClick)\n"
                "-- Run this script in Roblox Studio to see the output.\n"
                "```\n\n"
                "Lua is widely used in game development due to its simplicity and flexibility.\n\n"
                "It allows developers to write game logic, manage game states, and create interactive elements.\n\n"
                "Lua's performance and ease of use make it a popular choice for game engines and frameworks.\n\n"
                "Example (Roblox Game Logic):\n"
                "```lua\n\n"
                "local player = game.Players.LocalPlayer\n"
                "local character = player.Character or player.CharacterAdded:Wait()\n"
                "local humanoid = character:WaitForChild(\"Humanoid\")\n\n"
                "local function onPlayerJump()\n"
                "    print(player.Name .. \" jumped!\")\n"
                "end\n\n"
                "humanoid.Jumping:Connect(onPlayerJump)\n"
                "-- Run this script in Roblox Studio to see the output.\n"
                "```\n"
            ),
            "Scripting": (
                "Learn how to use Lua for scripting in various applications.\n\n"
                "Lua is often embedded in applications to provide scripting capabilities.\n\n"
                "You can use Lua to automate tasks, manipulate data, and extend application functionality.\n\n"
                "Example (Basic Function):\n"
                "```lua\n\n"
                "-- Define a function\n"
                "function greet(name)\n"
                "    return \"Hello, \" .. name .. \"!\"\n"
                "end\n\n"
                "-- Call the function\n"
                "print(greet(\"Lua\"))\n"
                "-- Output: Hello, Lua!\n"
                "# This will print a greeting message to the console.\n"
                "```\n\n"
                "Example (Table Manipulation):\n"
                "```lua\n\n"
                "-- Create a table\n"
                "local fruits = {\"apple\", \"banana\", \"cherry\"}\n\n"
                "-- Iterate over the table\n"
                "for i, fruit in ipairs(fruits) do\n"
                "    print(i .. \": \" .. fruit)\n"
                "end\n"
                "-- Output:\n"
                "-- 1: apple\n"
                "-- 2: banana\n"
                "-- 3: cherry\n"
                "# This will print the index and value of each fruit in the table.\n"
                "```\n\n"
                "Example (File I/O):\n"
                "```lua\n\n"
                "-- Open a file for writing\n"
                "local file = io.open(\"output.txt\", \"w\")\n\n"
                "-- Write to the file\n"
                "file:write(\"Hello, Lua File I/O!\")\n\n"
                "-- Close the file\n"
                "file:close()\n\n"
                "-- Open the file for reading\n"
                "local file = io.open(\"output.txt\", \"r\")\n\n"
                "-- Read the contents\n"
                "local content = file:read(\"*a\")\n\n"
                "-- Print the contents\n"
                "print(content)\n"
                "-- Output: Hello, Lua File I/O!\n"
                "-- Close the file\n"
                "file:close()\n"
                "# Output:\n"
                "# Hello, Lua File I/O!\n"
                "# This will print the content of the file to the console.\n"
                "```\n"
            )
        },
        "Shell Scripting": {
            "Basics": (
                "Learn the basics of shell scripting for automating tasks.\n\n"
                "Shell scripting allows you to write scripts that automate command-line tasks.\n\n"
                "You can use shell scripts to run commands, manage files, and perform system administration tasks.\n\n"
                "A shell script starts with a shebang (#!) followed by the path to the interpreter.\n\n"
                "You can use any text editor to create shell scripts, and save them with a .sh extension.\n\n"
                "To run a shell script, use the command `bash script.sh` or `./script.sh` after making it executable with `chmod +x script.sh`.\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# A simple script to print a message\n"
                "echo \"Hello, Shell Scripting!\"\n"
                "```\n"
                "Run this script using `bash script.sh`."
                "```\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# A script to perform basic arithmetic\n"
                "num1=10\n"
                "num2=20\n"
                "sum=$((num1 + num2))\n"
                "echo \"The sum of $num1 and $num2 is: $sum\"\n"
                "```\n"
                "Run this script using `bash script.sh`."
                "```\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# A script to check if a file exists\n"
                "FILE=\"myfile.txt\"\n"
                "if [ -f \"$FILE\" ]; then\n"
                "    echo \"$FILE exists.\"\n"
                "else\n"
                "    echo \"$FILE does not exist.\"\n"
                "fi\n"
                "```\n"
                "Run this script using `bash script.sh`."
                "```\n"
            ),
            "File Management": (
                "Understand how to manage files and directories using shell scripts.\n\n"
                "You can create, delete, and manipulate files and directories using shell commands.\n\n"
                "Shell scripts can automate these tasks to save time and effort.\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# Create a directory and a file\n"
                "mkdir my_directory\n"
                "touch my_directory/my_file.txt\n"
                "echo \"File created successfully!\"\n"
                "```\n"
                "Run this script to create a directory and a file within it."
                "```\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# A script to back up files\n"
                "SOURCE_DIR=\"/path/to/source\"\n"
                "DEST_DIR=\"/path/to/destination\"\n"
                "BACKUP_FILE=\"backup_$(date +%Y%m%d).tar.gz\"\n"
                "tar -czf $DEST_DIR/$BACKUP_FILE $SOURCE_DIR\n"
                "echo \"Backup created: $BACKUP_FILE\"\n"
                "```\n"
                "Run this script to create a backup of the specified directory."
                "```\n"
            ),
            "Process Management": (
                "Learn how to manage processes and system tasks with shell scripts.\n\n"
                "You can use shell scripts to monitor and control system processes.\n\n"
                "Shell commands like `ps`, `kill`, and `top` can be used to manage processes.\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# List all running processes\n"
                "echo \"Listing all running processes:\"\n"
                "ps aux\n"
                "```\n"
                "Run this script to display a list of all running processes."
                "```\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# A script to monitor CPU usage\n"
                "THRESHOLD=80\n"
                "CPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\([0-9.]*\)%* id.*/\1/\" | awk '{print 100 - $1}')\n"
                "if (( $(echo \"$CPU_USAGE > $THRESHOLD\" | bc -l) )); then\n"
                "    echo \"High CPU usage detected: $CPU_USAGE%\"\n"
                "else\n"
                "    echo \"CPU usage is normal: $CPU_USAGE%\"\n"
                "fi\n"
                "```\n"
                "Run this script to monitor CPU usage and alert if it exceeds a threshold."
                "```\n"
            )
        },
        "Dart": {
            "Basics": (
                "Learn Dart syntax, variables, and basic programming constructs.\n\n"
                "In Dart, you can declare variables using `var`, `int`, `String`, etc.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using // for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in Dart, first, install Dart SDK on your system.\n\n"
                "You can download Dart SDK from the official website: https://dart.dev/get-dart\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Dart code.\n\n"
                "Example:\n"
                "```dart\n\n"
                "void main() {\n"
                "  int x = 10;\n"
                "  int y = 20;\n"
                "  print('The sum is: ${x + y}');\n"
                "}\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```dart\n\n"
                "void main() {\n"
                "  String name = 'Sub Zero';\n"
                "  print('Hello, $name!');\n"
                "}\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```dart\n\n"
                "void main() {\n"
                "  int age = 25;\n"
                "  if (age >= 18) {\n"
                "    print('You are an adult.');\n"
                "  } else {\n"
                "    print('You are a minor.');\n"
                "  }\n"
                "}\n"
                "# Output: You are an adult.\n"
                "```\n\n"
                "Example:\n"
                "```dart\n\n"
                "void main() {\n"
                "  InputStream input = InputStream();\n"
                "  print('Enter your name: ');\n"
                "  String name = input.readLineSync();\n"
                "  print('Hello, $name!');\n"
                "}\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Lilith)\n"
                "# Hello, Lilith!\n"
                "```\n\n"
                "To print output, use the print function.\n\n"
                "To take user input, use the stdin.readLineSync() method.\n\n"
                "Dart supports various data types, including strings, integers, doubles, lists, and maps.\n\n"
                "Dart lists are ordered collections of objects.\n\n"
                "# Example:\n"
                "```dart\n\n"
                "void main() {\n"
                "  List<String> fruits = ['apple', 'banana', 'cherry'];\n\n"
                "  for (String fruit in fruits) {\n"
                "    print(fruit);\n"
                "  }\n"
                "}\n"
                "# Output:\n"
                "# apple\n"
                "# banana\n"
                "# cherry\n"
                "```\n"
            ),
            "Flutter Development": (
                "Build cross-platform mobile apps using Flutter and Dart.\n\n"
                "Flutter is an open-source UI software development toolkit created by Google.\n\n"
                "It allows you to create natively compiled applications for mobile, web, and desktop from a single codebase.\n\n"
                "Example (Basic Flutter App):\n"
                "```dart\n\n"
                "import 'package:flutter/material.dart';\n\n"
                "void main() => runApp(MyApp());\n\n"
                "class MyApp extends StatelessWidget {\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return MaterialApp(\n"
                "      home: Scaffold(\n"
                "        appBar: AppBar(title: Text('Hello, Flutter!')),\n"
                "        body: Center(child: Text('Welcome to Flutter!')),\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n"
                "# Output: A simple Flutter app with a welcome message.\n"
                "# (Run this script to see the output)\n"
                "```\n\n"
                "Example (Basic Flutter App with State):\n"
                "```dart\n\n"
                "import 'package:flutter/material.dart';\n\n"
                "void main() => runApp(MyApp());\n\n"
                "class MyApp extends StatelessWidget {\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return MaterialApp(\n"
                "      home: Scaffold(\n"
                "        appBar: AppBar(title: Text('Counter App')),\n"
                "        body: CounterWidget(),\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n\n"
                "class CounterWidget extends StatefulWidget {\n"
                "  @override\n"
                "  _CounterWidgetState createState() => _CounterWidgetState();\n"
                "}\n\n"
                "class _CounterWidgetState extends State<CounterWidget> {\n"
                "  int _counter = 0;\n\n"
                "  void _incrementCounter() {\n"
                "    setState(() {\n"
                "      _counter++;\n"
                "    });\n"
                "  }\n\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return Center(\n"
                "      child: Column(\n"
                "        mainAxisAlignment: MainAxisAlignment.center,\n"
                "        children: [\n"
                "          Text('Counter: $_counter', style: TextStyle(fontSize: 24)),\n"
                "          SizedBox(height: 20),\n"
                "          ElevatedButton(\n"
                "            onPressed: _incrementCounter,\n"
                "            child: Text('Increment'),\n"
                "          ),\n"
                "        ],\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n"
                "# Output: A simple Flutter app with a counter.\n"
                "# (Run this script to see the output)\n"
                "```\n"
            ),
            "Asynchronous Programming": (
                "Understand asynchronous programming with Dart's Future and Stream.\n\n"
                "Dart provides built-in support for asynchronous programming using Future and Stream classes.\n\n"
                "You can use async/await syntax to work with asynchronous code more easily.\n\n"
                "Example (Using Future):\n"
                "```dart\n\n"
                "void main() async {\n"
                "  print('Fetching data...');\n"
                "  String data = await fetchData();\n"
                "  print('Data received: $data');\n"
                "}\n\n"
                "Future<String> fetchData() async {\n"
                "  await Future.delayed(Duration(seconds: 2));\n"
                "  return 'Hello, Dart!';\n"
                "}\n"
                "# Output:\n"
                "# Fetching data...\n"
                "# (after 2 seconds) Data received: Hello, Dart!\n"
                "# This example demonstrates how to use async/await in Dart.\n"
                "```\n\n"
                "Example (Using Stream):\n"
                "```dart\n\n"
                "void main() {\n"
                "  print('Listening to stream...');\n"
                "  Stream<int> stream = generateNumbers();\n"
                "  stream.listen((number) {\n"
                "    print('Received number: $number');\n"
                "  });\n"
                "}\n\n"
                "Stream<int> generateNumbers() async* {\n"
                "  for (int i = 1; i <= 5; i++) {\n"
                "    await Future.delayed(Duration(seconds: 1));\n"
                "    yield i;\n"
                "  }\n"
                "}\n"
                "# Output:\n"
                "# Listening to stream...\n"
                "# (after 1 second) Received number: 1\n"
                "# (after 1 second) Received number: 2\n"
                "# (after 1 second) Received number: 3\n"
                "# (after 1 second) Received number: 4\n"
                "# (after 1 second) Received number: 5\n"
                "# This example demonstrates how to use streams in Dart.\n"
                "```\n\n"
                "Example (Using async/await):\n"
                "```dart\n"
                "void main() async {\n"
                "  print('Fetching data...');\n"
                "  String data = await fetchData();\n"
                "  print('Data received: $data');\n"
                "}\n\n"
                "Future<String> fetchData() async {\n"
                "  await Future.delayed(Duration(seconds: 2));\n"
                "  return 'Hello, Fourteen!';\n"
                "}\n"
                "# Output:\n"
                "# Fetching data...\n"
                "# (after 2 seconds) Data received: Hello, Fourteen!\n"
                "# This example demonstrates how to use async/await in Dart.\n"
                "```\n"
            )
        },
        "Flutter": {
            "Basics": (
                "Learn the basics of Flutter and its widget-based architecture.\n\n"
                "Flutter is a UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase.\n\n"
                "It uses a reactive programming model and a rich set of pre-built widgets.\n\n"
                "To create a Flutter app, you need to install Flutter SDK on your system.\n\n"
                "You can download Flutter SDK from the official website: https://flutter.dev/docs/get-started/install\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Flutter code.\n\n"
                "Example (Basic Flutter App):\n"
                "```dart\n\n"
                "import 'package:flutter/material.dart';\n\n"
                "void main() => runApp(MyApp());\n\n"
                "class MyApp extends StatelessWidget {\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return MaterialApp(\n"
                "      home: Scaffold(\n"
                "        appBar: AppBar(title: Text('Hello, Flutter!')),\n"
                "        body: Center(child: Text('Welcome to Flutter!')),\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n"
                "# Output: A simple Flutter app with a title and message.\n"
                "# (Run this script to see the output)\n"
                "```\n\n"
                "Example (Basic Flutter App with State):\n"
                "```dart\n\n"
                "import 'package:flutter/material.dart';\n\n"
                "void main() => runApp(MyApp());\n\n"
                "class MyApp extends StatelessWidget {\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return MaterialApp(\n"
                "      home: Scaffold(\n"
                "        appBar: AppBar(title: Text('Counter App')),\n"
                "        body: CounterWidget(),\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n\n"
                "class CounterWidget extends StatefulWidget {\n"
                "  @override\n"
                "  _CounterWidgetState createState() => _CounterWidgetState();\n"
                "}\n\n"
                "class _CounterWidgetState extends State<CounterWidget> {\n"
                "  int _counter = 0;\n\n"
                "  void _incrementCounter() {\n"
                "    setState(() {\n"
                "      _counter++;\n"
                "    });\n"
                "  }\n\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return Center(\n"
                "      child: Column(\n"
                "        mainAxisAlignment: MainAxisAlignment.center,\n"
                "        children: [\n"
                "          Text('Counter: $_counter', style: TextStyle(fontSize: 24)),\n"
                "          SizedBox(height: 20),\n"
                "          ElevatedButton(\n"
                "            onPressed: _incrementCounter,\n"
                "            child: Text('Increment'),\n"
                "          ),\n"
                "        ],\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n"
                "# Output: Counter: 0\n"
                "# (Counter increments on button press)\n"
                "# Run this script to see the counter increment.\n"
                "```\n"
            ),
            "Widgets": (
                "Explore Flutter widgets for building user interfaces.\n\n"
                "Flutter provides a rich set of widgets that can be combined to create complex UIs.\n\n"
                "Widgets are the building blocks of a Flutter app's UI.\n\n"
                "Example (Using a Column and Row):\n"
                "```dart\n\n"
                "import 'package:flutter/material.dart';\n\n"
                "void main() => runApp(MyApp());\n\n"
                "class MyApp extends StatelessWidget {\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return MaterialApp(\n"
                "      home: Scaffold(\n"
                "        appBar: AppBar(title: Text('Flutter Widgets')),\n"
                "        body: Column(\n"
                "          mainAxisAlignment: MainAxisAlignment.center,\n"
                "          children: [\n"
                "            Row(\n"
                "              mainAxisAlignment: MainAxisAlignment.center,\n"
                "              children: [\n"
                "                Icon(Icons.star, color: Colors.yellow),\n"
                "                Text('Row Widget')\n"
                "              ],\n"
                "            ),\n"
                "            Text('Column Widget')\n"
                "          ],\n"
                "        ),\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n"
                "# Output: A Column with a Row and Text widget\n"
                "# (Scroll to see all items)\n"
                "```\n\n"
                "Example (Using a ListView):\n"
                "```dart\n\n"
                "import 'package:flutter/material.dart';\n\n"
                "void main() => runApp(MyApp());\n\n"
                "class MyApp extends StatelessWidget {\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return MaterialApp(\n"
                "      home: Scaffold(\n"
                "        appBar: AppBar(title: Text('ListView Example')),\n"
                "        body: ListView(\n"
                "          children: [\n"
                "            ListTile(title: Text('Item 1')),\n"
                "            ListTile(title: Text('Item 2')),\n"
                "            ListTile(title: Text('Item 3')),\n"
                "            ListTile(title: Text('Item 4')),\n"
                "            ListTile(title: Text('Item 5')),\n"
                "          ],\n"
                "        ),\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n"
                "# Output: A ListView with 5 items\n"
                "# (Scroll to see all items)\n"
                "```\n"
            ),
            "State Management": (
                "Understand state management techniques in Flutter.\n\n"
                "State management is crucial in Flutter to manage the state of your application.\n\n"
                "You can use various state management solutions like Provider, Riverpod, or BLoC.\n\n"
                "Example (Using StatefulWidget):\n"
                "```dart\n\n"
                "import 'package:flutter/material.dart';\n\n"
                "void main() => runApp(MyApp());\n\n"
                "class MyApp extends StatelessWidget {\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return MaterialApp(\n"
                "      home: CounterApp(),\n"
                "    );\n"
                "  }\n"
                "}\n\n"
                "class CounterApp extends StatefulWidget {\n"
                "  @override\n"
                "  _CounterAppState createState() => _CounterAppState();\n"
                "}\n\n"
                "class _CounterAppState extends State<CounterApp> {\n"
                "  int _counter = 0;\n\n"
                "  void _incrementCounter() {\n"
                "    setState(() {\n"
                "      _counter++;\n"
                "    });\n"
                "  }\n\n"
                "  @override\n"
                "  Widget build(BuildContext context) {\n"
                "    return Scaffold(\n"
                "      appBar: AppBar(title: Text('State Management')),\n"
                "      body: Center(\n"
                "        child: Text('Counter: $_counter', style: TextStyle(fontSize: 24)),\n"
                "      ),\n"
                "      floatingActionButton: FloatingActionButton(\n"
                "        onPressed: _incrementCounter,\n"
                "        child: Icon(Icons.add),\n"
                "      ),\n"
                "    );\n"
                "  }\n"
                "}\n"
                "# Output: Counter: 0\n"
                "# (Counter increments on button press)\n"
                "# Run this script to see the counter increment.\n"
                "```\n"
            )
        },
        "Go": {
            "Basics": (
                "Learn Go syntax, variables, and basic programming constructs.\n\n"
                "In Go, you can declare variables using the `var` keyword or the short declaration operator `:=`.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string formatting with the `fmt` package.\n\n"
                "Comments can be added using // for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in Go, first, install Go on your system.\n\n"
                "You can download Go from the official website: https://golang.org/dl/\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Go code.\n\n"
                "Example:\n"
                "```go\n\n"
                "package main\n\n"
                "import \"fmt\"\n\n"
                "func main() {\n"
                "    x := 10\n"
                "    y := 20\n"
                "    fmt.Printf(\"The sum is: %d\\n\", x+y)\n"
                "}\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```go\n\n"
                "package main\n\n"
                "import \"fmt\"\n\n"
                "func main() {\n"
                "    name := \"Sub Zero\"\n"
                "    fmt.Printf(\"Hello, %s!\\n\", name)\n"
                "}\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```go\n\n"
                "package main\n\n"
                "import \"fmt\"\n\n"
                "func main() {\n"
                "    age := 25\n"
                "    if age >= 18 {\n"
                "        fmt.Println(\"You are an adult.\")\n"
                "    } else {\n"
                "        fmt.Println(\"You are a minor.\")\n"
                "    }\n"
                "}\n"
                "# Output: You are an adult.\n"
                "```\n\n"
                "Example:\n"
                "```go\n\n"
                "package main\n\n"
                "import \"fmt\"\n\n"
                "func main() {\n"
                "    var name string\n"
                "    fmt.Print(\"Enter your name: \")\n"
                "    fmt.Scanln(&name)\n"
                "    fmt.Printf(\"Hello, %s!\\n\", name)\n"
                "}\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Lilith)\n"
                "# Hello, Lilith!\n"
                "```\n\n"
                "To print output, use the fmt.Printf function.\n\n"
                "To take user input, use the fmt.Scanln function.\n\n"
                "Go supports various data types, including strings, integers, floats, and booleans.\n\n"
                "Go slices are dynamic arrays that can grow and shrink in size.\n\n"
                "# Example:\n"
                "```go\n\n"
                "package main\n\n"
                "import \"fmt\"\n\n"
                "func main() {\n"
                "    fruits := []string{\"apple\", \"banana\", \"cherry\"}\n\n"
                "    for i, fruit := range fruits {\n"
                "        fmt.Printf(\"%d: %s\\n\", i+1, fruit)\n"
                "    }\n"
                "}\n"
                "# Output:\n"
                "# 1: apple\n"
                "# 2: banana\n"
                "# 3: cherry\n"
                "```\n"
            ),
            "Concurrency": (
                "Understand Go's concurrency model and goroutines.\n\n"
                "Go provides built-in support for concurrent programming using goroutines and channels.\n\n"
                "Goroutines are lightweight threads managed by the Go runtime.\n\n"
                "Example:\n"
                "```go\n\n"
                "package main\n\n"
                "import (\n"
                "    \"fmt\"\n"
                "    \"time\"\n"
                ")\n\n"
                "func printMessage(msg string) {\n"
                "    for i := 0; i < 5; i++ {\n"
                "        fmt.Println(msg)\n"
                "        time.Sleep(500 * time.Millisecond)\n"
                "    }\n"
                "}\n\n"
                "func main() {\n"
                "    go printMessage(\"Hello, Goroutine!\")\n"
                "    printMessage(\"Main Function\")\n"
                "}\n"
                "# Output:\n"
                "# Interleaved messages from the main function and the goroutine.\n"
                "# The main function runs concurrently with the goroutine.\n"
                "```\n\n"
                "Example:\n"
                "```go\n\n"
                "package main\n\n"
                "import (\n"
                "    \"fmt\"\n"
                "    \"time\"\n"
                ")\n\n"
                "func main() {\n"
                "    ch := make(chan string)\n\n"
                "    go func() {\n"
                "        time.Sleep(2 * time.Second)\n"
                "        ch <- \"Hello from goroutine!\"\n"
                "    }()\n\n"
                "    fmt.Println(\"Waiting for goroutine...\")\n"
                "    msg := <-ch\n"
                "    fmt.Println(msg)\n"
                "}\n"
                "# Output:\n"
                "# Waiting for goroutine...\n"
                "# (after 2 seconds) Hello from goroutine!\n"
                "# The main function waits for the goroutine to send a message through the channel.\n"
                "```\n"
            ),
            "Web Development": (
                "Build web applications using Go's `net/http` package.\n\n"
                "Go's standard library provides a powerful `net/http` package for building web servers and clients.\n\n"
                "You can create HTTP servers, handle requests, and serve static files easily.\n\n"
                "Example (Basic HTTP Server):\n"
                "```go\n\n"
                "package main\n\n"
                "import (\n"
                "    \"fmt\"\n"
                "    \"net/http\"\n"
                ")\n\n"
                "func handler(w http.ResponseWriter, r *http.Request) {\n"
                "    fmt.Fprintf(w, \"Hello, Go Web Server!\")\n"
                "}\n\n"
                "func main() {\n"
                "    http.HandleFunc(\"/\", handler)\n"
                "    fmt.Println(\"Server is running on http://localhost:8080\")\n"
                "    http.ListenAndServe(\":8080\", nil)\n"
                "}\n"
                "# Run this script and visit http://localhost:8080 in your browser.\n"
                "```\n\n"
                "Example (Basic HTTP Client):\n"
                "```go\n\n"
                "package main\n\n"
                "import (\n"
                "    \"fmt\"\n"
                "    \"io/ioutil\"\n"
                "    \"net/http\"\n"
                ")\n\n"
                "func main() {\n"
                "    resp, err := http.Get(\"https://api.github.com\")\n"
                "    if err != nil {\n"
                "        fmt.Println(\"Error fetching data:\", err)\n"
                "        return\n"
                "    }\n\n"
                "    defer resp.Body.Close()\n\n"
                "    body, err := ioutil.ReadAll(resp.Body)\n"
                "    if err != nil {\n"
                "        fmt.Println(\"Error reading response:\", err)\n"
                "        return\n"
                "    }\n\n"
                "    fmt.Println(\"Response:\", string(body))\n"
                "}\n"
                "# Run this script to fetch data from the GitHub API.\n"
                "```\n"
            )
        },
        "Perl": {
            "Basics": (
                "Learn Perl syntax, variables, and basic programming constructs.\n\n"
                "In Perl, you can declare variables using `$` for scalars, `@` for arrays, and `%` for hashes.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using # for single-line comments and =begin =cut for multi-line comments.\n\n"
                "To begin coding in Perl, first, install Perl on your system.\n\n"
                "You can download Perl from the official website: https://www.perl.org/get.html\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Perl code.\n\n"
                "Example:\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use strict;\n"
                "use warnings;\n\n"
                "my $x = 10;\n"
                "my $y = 20;\n"
                "print \"The sum is: \" . ($x + $y) . \"\\n\";\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use strict;\n"
                "use warnings;\n\n"
                "my $name = \"Sub Zero\";\n"
                "print \"Hello, $name!\\n\";\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use strict;\n"
                "use warnings;\n\n"
                "my $age = 25;\n"
                "if ($age >= 18) {\n"
                "    print \"You are an adult.\\n\";\n"
                "} else {\n"
                "    print \"You are a minor.\\n\";\n"
                "}\n"
                "# Output: You are an adult.\n"
                "```\n\n"
                "Example:\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use strict;\n"
                "use warnings;\n\n"
                "print \"Enter your name: \";\n"
                "my $name = <STDIN>;\n"
                "chomp($name);\n"
                "print \"Hello, $name!\\n\";\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Lilith)\n"
                "# Hello, Lilith!\n"
                "```\n\n"
                "To print output, use the print function.\n\n"
                "To take user input, use the <STDIN> method.\n\n"
                "Perl supports various data types, including strings, integers, arrays, and hashes.\n\n"
                "Perl arrays are ordered collections of scalars.\n\n"
                "# Example:\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use strict;\n"
                "use warnings;\n\n"
                "my @fruits = ('apple', 'banana', 'cherry');\n\n"
                "foreach my $fruit (@fruits) {\n"
                "    print \"$fruit\\n\";\n"
                "}\n"
                "# Output:\n"
                "# apple\n"
                "# banana\n"
                "# cherry\n"
                "```\n"
            ),
            "Text Processing": (
                "Use Perl for text processing and regular expressions.\n\n"
                "Perl is known for its powerful text processing capabilities, especially with regular expressions.\n\n"
                "You can use regex to search, match, and manipulate strings easily.\n\n"
                "Example:\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use strict;\n"
                "use warnings;\n\n"
                "my $text = \"The quick brown fox jumps over the lazy dog.\";\n"
                "if ($text =~ /quick.*fox/) {\n"
                "    print \"Match found!\\n\";\n"
                "}\n\n"
                "my @words = split /\\s+/, $text;\n"
                "print \"Words: @words\\n\";\n"
                "# Output:\n"
                "# Match found!\n"
                "# Words: The quick brown fox jumps over the lazy dog\n"
                "# The split function splits the string into an array of words.\n"
                "```\n\n"
                "Example:\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use strict;\n"
                "use warnings;\n\n"
                "my $text = \"Hello, World!\";\n"
                "my $reversed = reverse $text;\n"
                "print \"Reversed: $reversed\\n\";\n"
                "# Output: Reversed: !dlroW ,olleH\n"
                "# The reverse function reverses the string.\n"
                "```\n"
            ),
            "Web Development": (
                "Build web applications using Perl with frameworks like Dancer or Mojolicious.\n\n"
                "Perl has several web frameworks that make it easy to develop web applications.\n\n"
                "Mojolicious is a modern web framework for Perl that provides a powerful and flexible way to build web applications.\n\n"
                "Example (Basic Mojolicious App):\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use Mojolicious::Lite;\n\n"
                "get '/' => sub {\n"
                "    my $c = shift;\n"
                "    $c->render(text => 'Welcome to Mojolicious!');\n"
                "};\n\n"
                "app->start;\n"
                "# Run this script and visit http://localhost:3000/ in your browser.\n"
                "```\n\n"
                "Example (Basic Dancer App):\n"
                "```perl\n\n"
                "#!/usr/bin/perl\n"
                "use Dancer;\n\n"
                "get '/' => sub {\n"
                "    return 'Welcome to Dancer!';\n"
                "};\n\n"
                "start;\n"
                "# Run this script and visit http://localhost:3000/ in your browser.\n"
                "```\n"
            )
        },
        "SQL": {
            "Basics": (
                "Learn SQL syntax and how to query databases.\n\n"
                "SQL (Structured Query Language) is used to communicate with databases.\n\n"
                "You can use SQL to create, read, update, and delete data in a database.\n\n"
                "Basic SQL commands include SELECT, INSERT, UPDATE, DELETE, and CREATE TABLE.\n\n"
                "You can use WHERE clauses to filter results and ORDER BY to sort them.\n\n"
                "Comments can be added using -- for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in SQL, you need a database management system (DBMS) like MySQL, PostgreSQL, or SQLite.\n\n"
                "You can use any SQL client or command-line interface to execute SQL queries.\n\n"
                "Example (Basic SELECT Query):\n"
                "```sql\n\n"
                "SELECT * FROM employees;\n"
                "# This retrieves all columns and rows from the 'employees' table.\n"
                "```\n\n"
                "Example (Basic INSERT Query):\n"
                "```sql\n\n"
                "INSERT INTO employees (name, age, department)\n"
                "VALUES ('John Doe', 30, 'HR');\n"
                "# This inserts a new employee into the 'employees' table.\n"
                "```\n\n"
                "Example (Basic UPDATE Query):\n"
                "```sql\n\n"
                "UPDATE employees\n"
                "SET age = 31\n"
                "WHERE name = 'John Doe';\n"
                "# This updates the age of the employee named 'John Doe'.\n"
                "```\n\n"
                "Example (Basic DELETE Query):\n"
                "```sql\n\n"
                "DELETE FROM employees\n"
                "WHERE name = 'John Doe';\n"
                "# This deletes the employee named 'John Doe' from the 'employees' table.\n"
                "```\n\n"
                "Example (Basic WHERE Clause):\n"
                "```sql\n\n"
                "SELECT * FROM employees\n"
                "WHERE age > 25;\n"
                "# This retrieves all employees older than 25.\n"
                "```\n"
            ),
            "Joins": (
                "Understand how to use joins to combine data from multiple tables.\n\n"
                "Joins allow you to retrieve data from multiple tables based on related columns.\n\n"
                "There are different types of joins: INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN.\n\n"
                "Example (INNER JOIN):\n"
                "```sql\n\n"
                "SELECT employees.name, departments.department_name\n"
                "FROM employees\n"
                "INNER JOIN departments\n"
                "ON employees.department_id = departments.id;\n"
                "# This retrieves employee names along with their department names.\n"
                "```\n\n"
                "Example (LEFT JOIN):\n"
                "```sql\n\n"
                "SELECT employees.name, departments.department_name\n"
                "FROM employees\n"
                "LEFT JOIN departments\n"
                "ON employees.department_id = departments.id;\n"
                "# This retrieves all employee names and their department names, including employees without departments.\n"
                "```\n"
            ),
            "Stored Procedures": (
                "Learn how to create and use stored procedures in SQL.\n\n"
                "Stored procedures are precompiled SQL statements that can be executed on the database server.\n\n"
                "They can accept parameters and return results.\n\n"
                "Example:\n"
                "```sql\n\n"
                "DELIMITER //\n"
                "CREATE PROCEDURE GetEmployeeCount()\n"
                "BEGIN\n"
                "    SELECT COUNT(*) AS employee_count FROM employees;\n"
                "END //\n"
                "DELIMITER ;\n\n"
                "CALL GetEmployeeCount();\n"
                "# This creates a stored procedure to count employees and calls it.\n"
                "```\n\n"
                "Example:\n"
                "```sql\n\n"
                "DELIMITER //\n"
                "CREATE PROCEDURE GetEmployeeByDepartment(IN dept_id INT)\n"
                "BEGIN\n"
                "    SELECT * FROM employees WHERE department_id = dept_id;\n"
                "END //\n"
                "DELIMITER ;\n\n"
                "CALL GetEmployeeByDepartment(1);\n"
                "# This creates a stored procedure to get employees by department ID and calls it.\n"
                "```\n"
            ),
            "Database Design": (
                "Understand the principles of database design and normalization.\n\n"
                "Database design involves structuring a database to minimize redundancy and improve data integrity.\n\n"
                "Normalization is the process of organizing data to reduce redundancy and improve data integrity.\n\n"
                "There are several normal forms (1NF, 2NF, 3NF) that define the rules for normalization.\n\n"
                "1NF: Each column must contain atomic values.\n\n"
                "2NF: All non-key attributes must be fully dependent on the primary key.\n\n"
                "3NF: No transitive dependencies should exist.\n\n"
                "Example (Normalization):\n"
                "```sql\n\n"
                "CREATE TABLE employees (\n"
                "    id INT PRIMARY KEY,\n"
                "    name VARCHAR(100),\n"
                "    age INT,\n"
                "    department_id INT\n"
                ");\n\n"
                "CREATE TABLE departments (\n"
                "    id INT PRIMARY KEY,\n"
                "    department_name VARCHAR(100)\n"
                ");\n\n"
                "# This creates two related tables: employees and departments.\n"
                "# The employees table has a foreign key reference to the departments table.\n"
                "```\n\n"
                "Example (Database Schema):\n"
                "```sql\n\n"
                "CREATE TABLE users (\n"
                "    id INT PRIMARY KEY,\n"
                "    username VARCHAR(50) UNIQUE,\n"
                "    password VARCHAR(100),\n"
                "    email VARCHAR(100) UNIQUE\n"
                ");\n\n"
                "CREATE TABLE posts (\n"
                "    id INT PRIMARY KEY,\n"
                "    user_id INT,\n"
                "    title VARCHAR(100),\n"
                "    content TEXT,\n"
                "    FOREIGN KEY (user_id) REFERENCES users(id)\n"
                ");\n\n"
                "# This creates a users table and a posts table with a foreign key reference.\n"
                "# The users table stores user information, and the posts table stores posts made by users.\n"
                "```\n"
            )
        },
        "PHP": {
            "Basics": (
                "Learn PHP syntax, variables, and basic programming constructs.\n\n"
                "In PHP, you can declare variables using the `$` symbol.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using // for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in PHP, first, install PHP on your system.\n\n"
                "You can download PHP from the official website: https://www.php.net/downloads\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write PHP code.\n\n"
                "Example:\n"
                "```php\n\n"
                "<?php\n"
                "$x = 10;\n"
                "$y = 20;\n"
                "echo \"The sum is: \" . ($x + $y);\n"
                "# Output: The sum is: 30\n"
                "?>\n"
                "```\n\n"
                "Example:\n"
                "```php\n\n"
                "<?php\n"
                "$name = \"Sub Zero\";\n"
                "echo \"Hello, $name!\";\n"
                "# Output: Hello, Sub Zero!\n"
                "?>\n"
                "```\n\n"
                "Example:\n"
                "```php\n\n"
                "<?php\n"
                "$age = 25;\n"
                "if ($age >= 18) {\n"
                "    echo \"You are an adult.\";\n"
                "} else {\n"
                "    echo \"You are a minor.\";\n"
                "}\n"
                "# Output: You are an adult.\n"
                "?>\n"
                "```\n\n"
                "Example:\n"
                "```php\n\n"
                "<?php\n"
                "$name = readline(\"Enter your name: \");\n"
                "echo \"Hello, $name!\";\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Lilith)\n"
                "# Hello, Lilith!\n"
                "?>\n"
                "```\n\n"
                "To print output, use the echo function.\n\n"
                "To take user input, use the readline function.\n\n"
                "PHP supports various data types, including strings, integers, floats, and booleans.\n\n"
                "PHP arrays are ordered collections of values.\n\n"
                "# Example:\n"
                "```php\n\n"
                "<?php\n"
                "$fruits = array(\"apple\", \"banana\", \"cherry\");\n\n"
                "foreach ($fruits as $fruit) {\n"
                "    echo \"$fruit\\n\";\n"
                "}\n"
                "# Output:\n"
                "# apple\n"
                "# banana\n"
                "# cherry\n"
                "?>\n"
                "```\n"
            ),
            "Web Development": (
                "Build web applications using PHP and frameworks like Laravel or Symfony.\n\n"
                "PHP is widely used for web development and can be embedded in HTML.\n\n"
                "You can use frameworks like Laravel or Symfony to build robust web applications.\n\n"
                "Example (Basic PHP Web App):\n"
                "```php\n\n"
                "<?php\n"
                "echo \"<h1>Welcome to PHP Web Development!</h1>\";\n"
                "echo \"<p>This is a simple PHP web application.</p>\";\n"
                "# Output: Welcome to PHP Web Development!\n"
                "# (HTML output)\n"
                "?>\n"
                "```\n\n"
                "Example (Basic Laravel App):\n"
                "```php\n\n"
                "<?php\n"
                "use Illuminate\Support\Facades\Route;\n\n"
                "Route::get('/', function () {\n"
                "    return view('welcome');\n"
                "});\n\n"
                "# This creates a basic route in a Laravel application that returns the welcome view.\n"
                "?>\n"
                "```\n\n"
                "Example (Basic Symfony App):\n"
                "```php\n\n"
                "<?php\n"
                "namespace App\Controller;\n\n"
                "use Symfony\Component\HttpFoundation\Response;\n"
                "use Symfony\Component\Routing\Annotation\Route;\n\n"
                "class DefaultController\n"
                "{\n"
                "    #[Route('/hello')]\n"
                "    public function hello(): Response\n"
                "    {\n"
                "        return new Response('<html><body>Hello, Symfony!</body></html>');\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic controller in a Symfony application that returns a simple HTML response.\n"
                "?>\n"
                "```\n"    
            ),
            "Laravel": (
                "Learn the basics of Laravel, a popular PHP framework.\n\n"
                "Laravel is a powerful PHP framework that provides an elegant syntax and a rich set of features.\n\n"
                "You can use Laravel to build web applications quickly and efficiently.\n\n"
                "Example (Basic Laravel Route):\n"
                "```php\n\n"
                "<?php\n"
                "use Illuminate\Support\Facades\Route;\n\n"
                "Route::get('/', function () {\n"
                "    return view('welcome');\n"
                "});\n\n"
                "# This creates a basic route in a Laravel application that returns the welcome view.\n"
                "?>\n"
                "```\n\n"
                "Example (Basic Laravel Controller):\n"
                "```php\n\n"
                "<?php\n"
                "namespace App\Http\Controllers;\n\n"
                "use Illuminate\Http\Request;\n\n"
                "class UserController extends Controller\n"
                "{\n"
                "    public function index()\n"
                "    {\n"
                "        return view('users.index');\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic controller in a Laravel application that returns the users index view.\n"
                "?>\n"
                "```\n\n"
                "Example (Basic Laravel Model):\n"
                "```php\n\n"
                "<?php\n"
                "namespace App\Models;\n\n"
                "use Illuminate\Database\Eloquent\Factories\HasFactory;\n"
                "use Illuminate\Database\Eloquent\Model;\n\n"
                "class User extends Model\n"
                "{\n"
                "    use HasFactory;\n\n"
                "    protected $fillable = ['name', 'email', 'password'];\n\n"
                "    public function posts()\n"
                "    {\n"
                "        return $this->hasMany(Post::class);\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic model in a Laravel application that represents a user.\n"
                "# The model has a relationship with the Post model.\n"
                "?>\n"
                "```\n"
            )
        },
        "Swift": {
            "Basics": (
                "Learn Swift syntax, variables, and basic programming constructs.\n\n"
                "In Swift, you can declare variables using `var` for mutable variables and `let` for constants.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using // for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in Swift, first, install Xcode on your system.\n\n"
                "You can download Xcode from the Mac App Store.\n\n"
                "You can use Xcode's built-in playgrounds to write and test Swift code interactively.\n\n"
                "Example:\n"
                "```swift\n\n"
                "var x = 10\n"
                "let y = 20\n"
                "print(\"The sum is: \\(x + y)\")\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```swift\n\n"
                "let name = \"Sub Zero\"\n"
                "print(\"Hello, \\(name)!\")\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```swift\n\n"
                "let age = 25\n"
                "if age >= 18 {\n"
                "    print(\"You are an adult.\")\n"
                "} else {\n"
                "    print(\"You are a minor.\")\n"
                "}\n"
                "# Output: You are an adult.\n"
                "```\n\n"
                "Example:\n"
                "```swift\n\n"
                "import Foundation\n\n"
                "print(\"Enter your name: \", terminator: \"\")\n"
                "if let name = readLine() {\n"
                "    print(\"Hello, \\(name)!\")\n"
                "}\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Goro)\n"
                "# Hello, Goro!\n"
                "```\n\n"
                "To print output, use the print function.\n\n"
                "To take user input, use the readLine function.\n\n"
                "Swift supports various data types, including strings, integers, floats, and booleans.\n\n"
                "Swift arrays are ordered collections of values.\n\n"
                "# Example:\n"
                "```swift\n\n"
                "let fruits = [\"apple\", \"banana\", \"cherry\"]\n\n"
                "for (index, fruit) in fruits.enumerated() {\n"
                "    print(\"\\(index + 1): \\(fruit)\")\n"
                "}\n"
                "# Output:\n"
                "# 1: apple\n"
                "# 2: banana\n"
                "# 3: cherry\n"
                "```\n"
            ),
            "iOS Development": (
                "Build iOS applications using Swift and Xcode.\n\n"
                "Swift is the primary language for iOS development, and Xcode is the official IDE.\n\n"
                "You can use Swift to build user interfaces, handle user interactions, and manage app lifecycle events.\n\n"
                "Example (Basic iOS App):\n"
                "```swift\n\n"
                "import UIKit\n\n"
                "@UIApplicationMain\n"
                "class AppDelegate: UIResponder, UIApplicationDelegate {\n"
                "    var window: UIWindow?\n\n"
                "    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n"
                "        return true\n"
                "    }\n"
                "}\n"
                "# This creates a basic iOS app using Swift.\n"
                "```\n\n"
                "Example (Basic SwiftUI App):\n"
                "```swift\n\n"
                "import SwiftUI\n\n"
                "struct ContentView: View {\n"
                "    var body: some View {\n"
                "        Text(\"Hello, SwiftUI!\")\n"
                "            .padding()\n"
                "    }\n"
                "}\n\n"
                "struct ContentView_Previews: PreviewProvider {\n"
                "    static var previews: some View {\n"
                "        ContentView()\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic SwiftUI app that displays a text label.\n"
                "```\n"
            ),
            "SwiftUI": (
                "Explore SwiftUI for building user interfaces in iOS applications.\n\n"
                "SwiftUI is a modern framework for building user interfaces across all Apple platforms.\n\n"
                "You can use SwiftUI to create responsive layouts, animations, and handle user interactions easily.\n\n"
                "Example (Basic SwiftUI View):\n"
                "```swift\n\n"
                "import SwiftUI\n\n"
                "struct ContentView: View {\n"
                "    var body: some View {\n"
                "        VStack {\n"
                "            Text(\"Hello, SwiftUI!\")\n"
                "            Button(action: {\n"
                "                print(\"Button tapped!\")\n"
                "            }) {\n"
                "                Text(\"Tap Me\")\n"
                "            }\n"
                "        }\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic SwiftUI view with a text label and a button.\n"
                "```\n\n"
                "Example (Basic SwiftUI List):\n"
                "```swift\n\n"
                "import SwiftUI\n\n"
                "struct ContentView: View {\n"
                "    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n"
                "    var body: some View {\n"
                "        List(items, id: \\(\\$0)) { item in\n"
                "            Text(item)\n"
                "        }\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic SwiftUI list that displays a list of items.\n"
                "```\n\n"
                "Example (Basic SwiftUI Navigation):\n"
                "```swift\n\n"
                "import SwiftUI\n\n"
                "struct ContentView: View {\n"
                "    var body: some View {\n"
                "        NavigationView {\n"
                "            VStack {\n"
                "                Text(\"Welcome to SwiftUI!\")\n"
                "                NavigationLink(destination: DetailView()) {\n"
                "                    Text(\"Go to Detail View\")\n"
                "                }\n"
                "            }\n"
                "            .navigationBarTitle(\"Home\")\n"
                "        }\n"
                "    }\n"
                "}\n\n"
                "struct DetailView: View {\n"
                "    var body: some View {\n"
                "        Text(\"This is the detail view.\")\n"
                "            .navigationBarTitle(\"Detail\")\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic SwiftUI app with navigation between views.\n"
                "```\n"
            )
        },
        "Typescript": {
            "Basics": (
                "Learn TypeScript syntax, types, and basic programming constructs.\n\n"
                "TypeScript is a superset of JavaScript that adds static typing.\n\n"
                "You can declare variables with types using `let`, `const`, or `var`.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using // for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in TypeScript, first, install Node.js and TypeScript on your system.\n\n"
                "You can download Node.js from the official website: https://nodejs.org/en/download/\n\n"
                "You can install TypeScript globally using npm:\n"
                "```bash\n"
                "npm install -g typescript\n"
                "```\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write TypeScript code.\n\n"
                "Example:\n"
                "```typescript\n\n"
                "let x: number = 10;\n"
                "const y: number = 20;\n"
                "console.log(`The sum is: ${x + y}`);\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```typescript\n\n"
                "let name: string = \"Sub Zero\";\n"
                "console.log(`Hello, ${name}!`);\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```typescript\n\n"
                "let age: number = 25;\n"
                "if (age >= 18) {\n"
                "    console.log(\"You are an adult.\");\n"
                "} else {\n"
                "    console.log(\"You are a minor.\");\n"
                "}\n"
                "# Output: You are an adult.\n"
                "```\n\n"
                "Example:\n"
                "```typescript\n\n"
                "let name: string;\n"
                "name = prompt(\"Enter your name:\");\n"
                "console.log(`Hello, ${name}!`);\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Nano)\n"
                "# Hello, Nano!\n"
                "```\n\n"
                "To print output, use the console.log function.\n\n"
                "To take user input, use the prompt function.\n\n"
                "TypeScript supports various data types, including strings, numbers, booleans, arrays, and objects.\n\n"
                "TypeScript arrays are ordered collections of values.\n\n"
                "# Example:\n"
                "```typescript\n\n"
                "let fruits: string[] = [\"apple\", \"banana\", \"cherry\"];\n\n"
                "for (let i = 0; i < fruits.length; i++) {\n"
                "    console.log(`${i + 1}: ${fruits[i]}`);\n"
                "}\n"
                "# Output:\n"
                "# 1: apple\n"
                "# 2: banana\n"
                "# 3: cherry\n"
                "```\n"
            ),
            "Angular": (
                "Build web applications using Angular, a popular TypeScript framework.\n\n"
                "Angular is a powerful framework for building single-page applications (SPAs).\n\n"
                "You can use Angular to create components, services, and manage application state.\n\n"
                "Example (Basic Angular Component):\n"
                "```typescript\n\n"
                "import { Component } from '@angular/core';\n\n"
                "@Component({\n"
                "    selector: 'app-root',\n"
                "    template: `<h1>Hello, Angular!</h1>`\n"
                "})\n"
                "export class AppComponent {}\n"
                "# This creates a basic Angular component that displays a message.\n"
                "```\n\n"
                "Example (Basic Angular Service):\n"
                "```typescript\n\n"
                "import { Injectable } from '@angular/core';\n\n"
                "@Injectable({\n"
                "    providedIn: 'root'\n"
                "})\n"
                "export class DataService {\n"
                "    getData() {\n"
                "        return ['Item 1', 'Item 2', 'Item 3'];\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic Angular service that provides data.\n"
                "```\n\n"
                "Example (Basic Angular Module):\n"
                "```typescript\n\n"
                "import { NgModule } from '@angular/core';\n"
                "import { BrowserModule } from '@angular/platform-browser';\n\n"
                "import { AppComponent } from './app.component';\n\n"
                "@NgModule({\n"
                "    declarations: [AppComponent],\n"
                "    imports: [BrowserModule],\n"
                "    providers: [],\n"
                "    bootstrap: [AppComponent]\n"
                "})\n"
                "export class AppModule {}\n\n"
                "# This creates a basic Angular module that bootstraps the AppComponent.\n"
                "```\n"
            ),
            "nodejs": (
                "Build server-side applications using Node.js and TypeScript.\n\n"
                "Node.js is a JavaScript runtime that allows you to run JavaScript on the server side.\n\n"
                "You can use TypeScript with Node.js to build robust server-side applications.\n\n"
                "Nest.Js is a framework for building efficient, reliable, and scalable server-side applications.\n\n"
                "Example (Basic Node.js App):\n"
                "```typescript\n\n"
                "import * as http from 'http';\n\n"
                "const server = http.createServer((req, res) => {\n"
                "    res.statusCode = 200;\n"
                "    res.setHeader('Content-Type', 'text/plain');\n"
                "    res.end('Hello, Node.js!\\n');\n"
                "});\n\n"
                "server.listen(3000, () => {\n"
                "    console.log('Server running at http://localhost:3000/');\n"
                "});\n"
                "# This creates a basic Node.js server that responds with a message.\n"
                "```\n\n"
                "Example (Basic Express App):\n"
                "```typescript\n\n"
                "import * as express from 'express';\n\n"
                "const app = express();\n\n"
                "app.get('/', (req, res) => {\n"
                "    res.send('Hello, Express!');\n"
                "});\n\n"
                "app.listen(3000, () => {\n"
                "    console.log('Server running at http://localhost:3000/');\n"
                "});\n"
                "# This creates a basic Express server that responds with a message.\n"
                "```\n\n"
                "Example (Basic NestJS App):\n"
                "```typescript\n\n"
                "import { Module } from '@nestjs/common';\n"
                "import { NestFactory } from '@nestjs/core';\n"
                "import { AppController } from './app.controller';\n"
                "import { AppService } from './app.service';\n\n"
                "@Module({\n"
                "    imports: [],\n"
                "    controllers: [AppController],\n"
                "    providers: [AppService]\n"
                "})\n"
                "export class AppModule {}\n\n"
                "async function bootstrap() {\n"
                "    const app = await NestFactory.create(AppModule);\n"
                "    await app.listen(3000);\n"
                "    console.log('NestJS server running at http://localhost:3000/');\n"
                "}\n\n"
                "bootstrap();\n"
                "# This creates a basic NestJS application with a module and a bootstrap function.\n"
                "```\n"
            )
        },
        "MATLAB": {
            "Basics": (
                "Learn MATLAB syntax, variables, and basic programming constructs.\n\n"
                "In MATLAB, you can declare variables without specifying their type.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string concatenation to combine strings.\n\n"
                "Comments can be added using % for single-line comments and %{ %} for multi-line comments.\n\n"
                "To begin coding in MATLAB, first, install MATLAB on your system.\n\n"
                "You can download MATLAB from the official MathWorks website: https://www.mathworks.com/products/matlab.html\n\n"   
                "You can use the MATLAB desktop environment or the command window to write and execute MATLAB code.\n\n"
                "Example:\n"
                "```matlab\n\n"
                "x = 10;\n"
                "y = 20;\n"
                "disp(['The sum is: ', num2str(x + y)]);\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```matlab\n\n"
                "name = 'Sub Zero';\n"
                "disp(['Hello, ', name, '!']);\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```matlab\n\n"
                "age = 25;\n"
                "if age >= 18\n"
                "    disp('You are an adult.');\n"
                "else\n"
                "    disp('You are a minor.');\n"
                "end\n"
                "# Output: You are an adult.\n"
                "```\n\n"
                "Example:\n"
                "```matlab\n\n"
                "name = input('Enter your name: ', 's');\n"
                "disp(['Hello, ', name, '!']);\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Shang Tsung)\n"
                "# Hello, Shang Tsung!\n"
                "```\n\n"
                "To print output, use the disp function.\n\n"
                "To take user input, use the input function.\n\n"
                "MATLAB supports various data types, including strings, numbers, and arrays.\n\n"
                "MATLAB arrays are ordered collections of values.\n\n"
                "# Example:\n"
                "```matlab\n\n"
                "fruits = {'apple', 'banana', 'cherry'};\n\n"
                "for i = 1:length(fruits)\n"
                "    disp([num2str(i), ': ', fruits{i}]);\n"
                "end\n"
                "# Output:\n"
                "# 1: apple\n"
                "# 2: banana\n"
                "# 3: cherry\n"
                "```\n"
            ),
            "Data Analysis": (
                "Use MATLAB for data analysis and visualization.\n\n"
                "MATLAB provides powerful tools for data analysis, including built-in functions and toolboxes.\n\n"
                "You can use MATLAB to perform statistical analysis, create plots, and visualize data easily.\n\n"
                "Example (Basic Data Analysis):\n"
                "```matlab\n\n"
                "% Load data from a CSV file\n"
                "[data, text] = xlsread('data.csv');\n\n"
                "% Calculate mean and standard deviation\n"
                "mean_value = mean(data);\n"
                "std_value = std(data);\n\n"
                "% Display results\n"
                "disp(['Mean: ', num2str(mean_value)]);\n"
                "disp(['Standard Deviation: ', num2str(std_value)]);\n"
                "# This loads data from a CSV file and calculates the mean and standard deviation.\n"
                "```\n\n"
                "Example (Basic Data Visualization):\n"
                "```matlab\n\n"
                "% Generate random data\n"
                "x = 0:0.1:10;\n"
                "y = sin(x);\n\n"
                "% Create a plot\n"
                "figure;\n"
                "plot(x, y);\n"
                "xlabel('X-axis');\n"
                "ylabel('Y-axis');\n"
                "title('Sine Wave');\n"
                "# This generates random data and creates a plot of a sine wave.\n"
                "```\n\n"
                "Example (Basic Data Visualization with Histogram):\n"
                "```matlab\n\n"
                "% Generate random data\n"
                "data = randn(1, 1000);\n\n"
                "% Create a histogram\n"
                "figure;\n"
                "histogram(data, 30);\n"
                "xlabel('Value');\n"
                "ylabel('Frequency');\n"
                "title('Histogram of Random Data');\n"
                "# This generates random data and creates a histogram of the data.\n"
                "```\n"
            ),
            "Simulink": (
                "Use Simulink for modeling and simulating dynamic systems.\n\n"
                "Simulink is a MATLAB-based environment for modeling, simulating, and analyzing dynamic systems.\n\n"
                "You can use Simulink to create block diagrams and simulate the behavior of systems over time.\n\n"
                "Example (Basic Simulink Model):\n"
                "```matlab\n\n"
                "% Open Simulink\n"
                "simulink;\n\n"
                "% Create a new model\n"
                "model = 'my_model';\n"
                "open_system(model);\n\n"
                "% Add blocks to the model\n"
                "add_block('simulink/Commonly Used Blocks/Step', [model, '/Step']);\n"
                "add_block('simulink/Commonly Used Blocks/Scope', [model, '/Scope']);\n\n"
                "% Connect blocks\n"
                "add_line(model, 'Step/1', 'Scope/1');\n\n"
                "# This creates a basic Simulink model with a step input and a scope output.\n"
                "```\n\n"
                "Example (Basic Simulink Simulation):\n"
                "```matlab\n\n"
                "% Load the model\n"
                "load_system(model);\n\n"
                "% Set simulation parameters\n"
                "set_param(model, 'StopTime', '10');\n\n"
                "% Run the simulation\n"
                "sim(model);\n\n"
                "% Open the scope to view results\n"
                "open_system([model, '/Scope']);\n\n"
                "# This loads the Simulink model, sets simulation parameters, and runs the simulation.\n"
                "```\n"
            )
        },
        "Carbon": {
            "Basics": (
                "Learn Carbon syntax, variables, and basic programming constructs.\n\n"
                "In Carbon, you can declare variables using `var` for mutable variables and `let` for constants.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using // for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in Carbon, first, install Carbon on your system.\n\n"
                "You can download Carbon from the official website: https://carbon-lang.org/download\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Carbon code.\n\n"
                "Example:\n"
                "```carbon\n\n"
                "var x = 10;\n"
                "let y = 20;\n"
                "println(\"The sum is: ${x + y}\");\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```carbon\n\n"
                "let name = \"Sub Zero\";\n"
                "println(\"Hello, ${name}!\");\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "Example:\n"
                "```carbon\n\n"
                "let age = 25;\n"
                "if (age >= 18) {\n"
                "    println(\"You are an adult.\");\n"
                "} else {\n"
                "    println(\"You are a minor.\");\n"
                "}\n"
                "# Output: You are an adult.\n"
                "```\n\n"
                "To print output, use the println function.\n\n"
                "To take user input, use the readln function.\n\n"
                "Carbon supports various data types, including strings, integers, floats, and booleans.\n\n"
                "Carbon arrays are ordered collections of values.\n\n"
                "# Example:\n"
                "```carbon\n\n"
                "let fruits = [\"apple\", \"banana\", \"cherry\"];\n\n"
                "for (i in 0..fruits.size()) {\n"
                "    println(\"${i + 1}: ${fruits[i]}\");\n"
                "}\n"
                "# Output:\n"
                "# 1: apple\n"
                "# 2: banana\n"
                "# 3: cherry\n"
                "```\n\n"
                "Example:\n"
                "```carbon\n\n"
                "Input(\"Enter your name: \", name);\n"
                "println(\"Hello, ${name}!\");\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Liu Kang)\n"
                "# Hello, Liu Kang!\n"
                "```\n"
            ),
            "System Programming": (
                "Use Carbon for system programming and low-level tasks.\n\n"
                "Carbon is designed for system programming and provides features for low-level memory management.\n\n"
                "You can use Carbon to write efficient code for performance-critical applications.\n\n"
                "Example (Basic System Programming):\n"
                "```carbon\n\n"
                "import std.io;\n\n"
                "fn main() {\n"
                "    let x: i32 = 10;\n"
                "    let y: i32 = 20;\n"
                "    println(\"The sum is: ${x + y}\");\n"
                "}\n\n"
                "# This creates a basic Carbon program that performs addition.\n"
                "```\n\n"
                "Example (Basic Memory Management):\n"
                "```carbon\n\n"
                "import std.memory;\n\n"
                "fn main() {\n"
                "    let arr: [i32] = allocate(10);\n"
                "    for (i in 0..10) {\n"
                "        arr[i] = i;\n"
                "    }\n"
                "    println(\"Array: ${arr}\");\n"
                "    deallocate(arr);\n"
                "}\n\n"
                "# This creates a basic Carbon program that allocates and deallocates memory.\n"
                "```\n\n"
                "Example (Basic File I/O):\n"
                "```carbon\n\n"
                "import std.io;\n\n"
                "fn main() {\n"
                "    let file = open(\"output.txt\", \"w\");\n"
                "    file.write(\"Hello, Carbon!\");\n"
                "    file.close();\n"
                "}\n\n"
                "# This creates a basic Carbon program that writes to a file.\n"
                "```\n\n"
                "Example (Basic Network Programming):\n"
                "```carbon\n\n"
                "import std.net;\n\n"
                "fn main() {\n"
                "    let server = TcpServer::bind(\"localhost:8080\");\n"
                "    server.listen();\n"
                "    println(\"Server is listening on port 8080...\");\n"
                "    while (true) {\n"
                "        let client = server.accept();\n"
                "        println(\"Client connected: ${client.get_address()}\");\n"
                "        client.send(\"Hello from Carbon server!\");\n"
                "        client.close();\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic Carbon server that listens for incoming connections.\n"
                "```\n"
            ),
            "Concurrency": (
                "Explore Carbon's concurrency features for parallel programming.\n\n"
                "Carbon provides built-in support for concurrency and parallelism.\n\n"
                "You can use Carbon's concurrency features to write efficient multi-threaded applications.\n\n"
                "Example (Basic Concurrency):\n"
                "```carbon\n\n"
                "import std.concurrent;\n\n"
                "fn main() {\n"
                "    let thread = spawn || {\n"
                "        println(\"Hello from a new thread!\");\n"
                "    };\n\n"
                "    thread.join();\n"
                "}\n\n"
                "# This creates a basic Carbon program that spawns a new thread.\n"
                "```\n\n"
                "Example (Basic Concurrency with Channels):\n"
                "```carbon\n\n"
                "import std.concurrent;\n\n"
                "fn main() {\n"
                "    let channel = Channel<i32>::new();\n\n"
                "    spawn || {\n"
                "        for (i in 0..5) {\n"
                "            channel.send(i);\n"
                "        }\n"
                "        channel.close();\n"
                "    };\n\n"
                "    for (value in channel) {\n"
                "        println(\"Received: ${value}\");\n"
                "    }\n"
                "}\n\n"
                "# This creates a basic Carbon program that uses channels for communication between threads.\n"
                "```\n\n"
                "Example (Basic Concurrency with Futures):\n"
                "```carbon\n\n"
                "import std.concurrent;\n\n"
                "fn main() {\n"
                "    let future = async || {\n"
                "        println(\"Hello from a future!\");\n"
                "        return 42;\n"
                "    };\n\n"
                "    let result = future.await();\n"
                "    println(\"Future result: ${result}\");\n"
                "}\n\n"
                "# This creates a basic Carbon program that uses futures for asynchronous programming.\n"
                "```\n"
            )
        },
        "Nim": {
            "Basics": (
                "Learn Nim syntax, variables, and basic programming constructs.\n\n"
                "In Nim, you can declare variables using `var` for mutable variables and `let` for constants.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using # for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in Nim, first, install Nim on your system.\n\n"
                "You can download Nim from the official website: https://nim-lang.org/download.html\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Nim code.\n\n"
                "Example:\n"
                "```nim\n\n"
                "var x = 10\n"
                "let y = 20\n"
                "echo \"The sum is: \", x + y\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```nim\n\n"
                "let name = \"Sub Zero\"\n"
                "echo \"Hello, \", name, \"!\"\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "To print output, use the echo function.\n\n"
                "To take user input, use the readLine function.\n\n"
                "Nim supports various data types, including strings, integers, floats, and booleans.\n\n"
                "Nim arrays are ordered collections of values.\n\n"
                "Example:\n"
                "```nim\n\n"
                "let fruits = @\"apple\", \"banana\", \"cherry\"\n\n"
                "for i in 0 ..< fruits.len:\n"
                "    echo i + 1, \": \", fruits[i]\n"
                "# Output:\n"
                "# 1: apple\n"
                "# 2: banana\n"
                "# 3: cherry\n"
                "```\n\n"
                "Example:\n"
                "```nim\n\n"
                "echo \"Enter your name: \"\n"
                "var name: string\n"
                "readLine(name)\n"
                "echo \"Hello, \", name, \"!\"\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Liu Kang)\n"
                "# Hello, Liu Kang!\n"
                "```\n"
            ),
            "Web Development": (
                "Build web applications using Nim and frameworks like Jester or Karax.\n\n"
                "Nim is a versatile language that can be used for web development.\n\n"
                "You can use frameworks like Jester or Karax to build web applications easily.\n\n"
                "Example (Basic Nim Web App):\n"
                "```nim\n\n"
                "import jester\n\n"
                "routes:\n"
                "    get \"/\" :\n"
                "        resp \"Hello, Nim Web Development!\"\n\n"
                "# This creates a basic Nim web application using the Jester framework.\n"
                "```\n\n"
                "Example (Basic Nim Web App with Karax):\n"
                "```nim\n\n"
                "import karax / all\n\n"
                "proc main() =\n"
                "    let app = newKaraxApp()\n"
                "    app.addElement(\"h1\", \"Hello, Nim Web Development!\")\n"
                "    app.run()\n\n"
                "# This creates a basic Nim web application using the Karax framework.\n"
                "```\n\n"
                "Example (Basic Nim Web App with HTTP):\n"
                "```nim\n\n"
                "import httpclient\n\n"
                "let url = \"http://example.com\"\n"
                "let response = httpGet(url)\n"
                "echo \"Response: \", response.body\n\n"
                "# This creates a basic Nim web application that makes an HTTP GET request.\n"
                "```\n\n"
                "Example (Basic Nim Web App with Async):\n"
                "```nim\n\n"
                "import asyncdispatch\n"
                "import httpclient\n\n"
                "proc fetchData(url: string) {.async.} =\n"
                "    let response = await httpGet(url)\n"
                "    echo \"Response: \", response.body\n\n"
                "proc main() {.async.} =\n"
                "    await fetchData(\"http://example.com\")\n\n"
                "asyncMain(main)\n\n"
                "# This creates a basic Nim web application that makes an asynchronous HTTP GET request.\n"
                "```\n"
            ),
            "Concurrency": (
                "Explore Nim's concurrency features for parallel programming.\n\n"
                "Nim provides built-in support for concurrency and parallelism.\n\n"
                "You can use Nim's concurrency features to write efficient multi-threaded applications.\n\n"
                "Example (Basic Concurrency):\n"
                "```nim\n\n"
                "import threads\n\n"
                "proc worker() {.thread.} =\n"
                "    echo \"Hello from a new thread!\"\n\n"
                "let t = createThread(worker)\n"
                "joinThread(t)\n\n"
                "# This creates a basic Nim program that spawns a new thread.\n"
                "```\n\n"
                "Example (Basic Concurrency with Channels):\n"
                "```nim\n\n"
                "import channels\n\n"
                "let channel = newChannel[int]()\n\n"
                "proc producer() {.thread.} =\n"
                "    for i in 0 ..< 5:\n"
                "        channel.send(i)\n"
                "    channel.close()\n\n"
                "proc consumer() {.thread.} =\n"
                "    for value in channel:\n"
                "        echo \"Received: \", value\n\n"
                "createThread(producer)\n"
                "createThread(consumer)\n\n"
                "# This creates a basic Nim program that uses channels for communication between threads.\n"
                "```\n\n"
                "Example (Basic Concurrency with Async):\n"
                "```nim\n\n"
                "import asyncdispatch\n\n"
                "proc asyncWorker() {.async.} =\n"
                "    echo \"Hello from an async worker!\"\n\n"
                "proc main() {.async.} =\n"
                "    await asyncWorker()\n\n"
                "asyncMain(main)\n\n"
                "# This creates a basic Nim program that uses async programming.\n"
                "```\n\n"
                "Example (Basic Concurrency with Futures):\n"
                "```nim\n\n"
                "import futures\n\n"
                "proc asyncWorker(): Future[int] =\n"
                "    return 42\n\n"
                "proc main() {.async.} =\n"
                "    let future = asyncWorker()\n"
                "    let result = await future\n"
                "    echo \"Future result: \", result\n\n"
                "asyncMain(main)\n\n"
                "# This creates a basic Nim program that uses futures for asynchronous programming.\n"
                "```\n"
            )
        },
        "Crystal": {
            "Basics": (
                "Learn Crystal syntax, variables, and basic programming constructs.\n\n"
                "In Crystal, you can declare variables using `var` for mutable variables and `let` for constants.\n\n"
                "Basic operations like addition, subtraction, etc., can be performed using standard operators.\n\n"
                "You can use string interpolation to embed variables within strings.\n\n"
                "Comments can be added using # for single-line comments and /* */ for multi-line comments.\n\n"
                "To begin coding in Crystal, first, install Crystal on your system.\n\n"
                "You can download Crystal from the official website: https://crystal-lang.org/install/\n\n"
                "You can use any text editor or an Integrated Development Environment (IDE) to write Crystal code.\n\n"
                "Example:\n"
                "```crystal\n\n"
                "var x = 10\n"
                "let y = 20\n"
                "puts \"The sum is: #{x + y}\"\n"
                "# Output: The sum is: 30\n"
                "```\n\n"
                "Example:\n"
                "```crystal\n\n"
                "let name = \"Sub Zero\"\n"
                "puts \"Hello, #{name}!\"\n"
                "# Output: Hello, Sub Zero!\n"
                "```\n\n"
                "To print output, use the puts function.\n\n"
                "To take user input, use the gets function.\n\n"
                "Crystal supports various data types, including strings, integers, floats, and booleans.\n\n"
                "Crystal arrays are ordered collections of values.\n\n"
                "Example:\n"
                "```crystal\n\n"
                "fruits = [\"apple\", \"banana\", \"cherry\"]\n\n"
                "for i in 0..fruits.size - 1\n"
                "    puts \"#{i + 1}: #{fruits[i]}\"\n"
                "# Output:\n"
                "# 1: apple\n"
                "# 2: banana\n"
                "# 3: cherry\n"
                "```\n\n"
                "Example:\n"
                "```crystal\n\n"
                "puts \"Enter your name: \"\n"
                "name = gets.chomp\n"
                "puts \"Hello, #{name}!\"\n"
                "# Output: Enter your name: \n"
                "# (User inputs: Liu Kang)\n"
                "# Hello, Liu Kang!\n"
                "```\n"
            ),
            "Web Development": (
                "Build web applications using Crystal and frameworks like Amber or Lucky.\n\n"
                "Crystal is a versatile language that can be used for web development.\n\n"
                "You can use frameworks like Amber or Lucky to build web applications easily.\n\n"
                "Example (Basic Crystal Web App):\n"
                "```crystal\n\n"
                "require \"http/server\"\n\n"
                "server = HTTP::Server.new do |context|\n"
                "    context.response.content_type = \"text/plain\"\n"
                "    context.response.print \"Hello, Crystal Web Development!\"\n"
                "end\n\n"
                "address = { \"host\" => \"localhost\", \"port\" => 8080 }\n"
                "server.bind(address)\n"
                "puts \"Listening on http://#{address['host']}:#{address['port']}\"\n"
                "server.listen\n\n"
                "# This creates a basic Crystal web application using the HTTP server.\n"
                "```\n\n"
                "Example (Basic Crystal Web App with Amber):\n"
                "```crystal\n\n"
                "require \"amber\"\n\n"
                "Amber::Server.start do\n"
                "    get \"/\" do |env|\n"
                "        env.response.content_type = \"text/plain\"\n"
                "        env.response.print \"Hello, Amber Web Development!\"\n"
                "    end\n"
                "end\n\n"
                "# This creates a basic Crystal web application using the Amber framework.\n"
                "```\n\n"
                "Example (Basic Crystal Web App with Lucky):\n"
                "```crystal\n\n"
                "require \"lucky\"\n\n"
                "Lucky::Server.start do\n"
                "    get \"/\" do |env|\n"
                "        env.response.content_type = \"text/plain\"\n"
                "        env.response.print \"Hello, Lucky Web Development!\"\n"
                "    end\n"
                "end\n\n"
                "# This creates a basic Crystal web application using the Lucky framework.\n"
                "```\n\n"
                "Example (Basic Crystal Web App with HTTP::Client):\n"
                "```crystal\n\n"
                "require \"http/client\"\n\n"
                "url = \"http://example.com\"\n"
                "response = HTTP::Client.get(url)\n"
                "puts \"Response: #{response.body}\".to_s\n\n"
                "# This creates a basic Crystal web application that makes an HTTP GET request.\n"
                "```\n"
            ),
            "Concurrency": (
                "Explore Crystal's concurrency features for parallel programming.\n\n"
                "Crystal provides built-in support for concurrency and parallelism.\n\n"
                "You can use Crystal's concurrency features to write efficient multi-threaded applications.\n\n"
                "Example (Basic Concurrency):\n"
                "```crystal\n\n"
                "spawn do\n"
                "    puts \"Hello from a new fiber!\"\n"
                "end\n\n"
                "sleep 1 # Wait for the fiber to finish\n\n"
                "# This creates a basic Crystal program that spawns a new fiber.\n"
                "```\n\n"
                "Example (Basic Concurrency with Channels):\n"
                "```crystal\n\n"
                "channel = Channel(Int32).new\n\n"
                "spawn do\n"
                "    5.times do |i|\n"
                "        channel.send(i)\n"
                "    end\n"
                "    channel.close\n"
                "end\n\n"
                "channel.each do |value|\n"
                "    puts \"Received: #{value}\"\n"
                "end\n\n"
                "# This creates a basic Crystal program that uses a channel to communicate between fibers.\n"
                "```\n\n"
                "Example (Basic Concurrency with Async):\n"
                "```crystal\n\n"
                "async do\n"
                "    puts \"Hello from an async fiber!\"\n"
                "end\n\n"
                "sleep 1 # Wait for the async fiber to finish\n\n"
                "# This creates a basic Crystal program that uses async programming.\n"
                "```\n\n"
                "Example (Basic Concurrency with Futures):\n"
                "```crystal\n\n"
                "future = spawn do\n"
                "    sleep 1\n"
                "    42\n"
                "end\n\n"
                "result = future.value\n"
                "puts \"Future result: #{result}\"\n\n"
                "# This creates a basic Crystal program that uses futures for asynchronous programming.\n"
                "```\n\n"
                "Example (Basic Concurrency with Async::HTTP):\n"
                "```crystal\n\n"
                "require \"async/http\"\n\n"
                "Async do\n"
                "    url = \"http://example.com\"\n"
                "    response = Async::HTTP.get(url)\n"
                "    puts \"Response: #{response.body}\".to_s\n"
                "end\n\n"
                "# This creates a basic Crystal program that uses async HTTP for making requests.\n"
                "```\n"
            )
        },
        "Terminal": {
            "Commands": (
                "Learn essential terminal commands for file management, navigation, and system monitoring.\n\n"
                "The terminal (or command line) is a powerful tool for interacting with your operating system.\n\n"
                "You can use commands to navigate the file system, manage files, and run programs.\n\n"
                "Basic commands include `ls` for listing files, `cd` for changing directories, and `cp` for copying files.\n\n"
                "You can also use commands like `top` to monitor system processes and `df` to check disk usage.\n\n"
                "To begin using the terminal, open a terminal emulator on your system.\n\n"
                "You can use any terminal emulator, such as Terminal (macOS), Command Prompt (Windows), or GNOME Terminal (Linux).\n\n"
                "Every operating system has its own set of terminal commands, but many commands are similar across systems.\n\n"
                "Shortcut access to the terminal is usually the combination of certain keys:\n\n" 
                "Ctrl + Alt + T on Linux or Command + Space, typing 'Terminal' on macOS, and Ctrl + Shift + T, Ctrl +, or the Windows key + X shortcut for Windows.\n\n"
                "Example:\n"
                "```bash\n\n"
                "# List files in the current directory\n"
                "ls -l\n\n"
                "# Navigate to a directory\n"
                "cd /path/to/directory\n\n"
                "# Display the current working directory\n"
                "pwd\n\n"
                "# Copy a file\n"
                "cp source.txt destination.txt\n\n"
                "# Move or rename a file\n"
                "mv oldname.txt newname.txt\n\n"
                "# Remove a file\n"
                "rm file.txt\n\n"
                "# Create a new directory\n"
                "mkdir new_directory\n\n"
                "# Remove a directory\n"
                "rmdir directory_name\n\n"
                "# Display the contents of a file\n"
                "cat file.txt\n\n"
                "# Search for a string in a file\n"
                "grep 'search_string' file.txt\n\n"
                "# Display system information\n"
                "uname -a\n\n"
                "# Check disk usage\n"
                "df -h\n\n"
                "# Check memory usage\n"
                "free -h\n\n"
                "# Monitor system processes\n"
                "top\n\n"
                "# Check network configuration\n"
                "ifconfig\n\n"
                "# Check running processes\n"
                "ps aux\n\n"
                "# Kill a process\n"
                "kill -9 process_id\n\n"
                "# Check system logs\n"
                "tail -f /var/log/syslog\n\n"
                "# Check system uptime\n"
                "uptime\n\n"
                "# Check current users\n"
                "who\n\n"
                "# Check current date and time\n"
                "date\n\n"
                "# Check current user\n"
                "whoami\n\n"
                "# Check current environment variables\n"
                "env\n\n"
                "# Check current shell\n"
                "echo $SHELL\n\n"
                "# Check current path\n"
                "echo $PATH\n\n"
                "# Check current user groups\n"
                "groups\n\n"
                "# Check current user permissions\n"
                "id\n\n"
                "# Check current user home directory\n"
                "echo $HOME\n\n"
                "# Check current user shell\n"
                "echo $SHELL\n\n"
                "# Check current user environment\n"
                "printenv\n\n"
                "# Check current user history\n"
                "history\n\n"
                "# Check current user aliases\n"
                "alias\n\n"
                "# Check current user functions\n"
                "declare -f\n\n"
                "# Check current user shell variables\n"
                "set\n\n"
                "# Check current user shell options\n"
                "shopt\n\n"
                "# Check current user shell builtins\n"
                "help\n\n"
                "# Check current user shell scripts\n"
                "source script.sh\n\n"
                "# Check current user shell functions\n"
                "function_name()\n\n"
                "# Forbidden\n"
                "rm -rf /\n\n"
                "# This command will delete all files and directories in the root directory.\n\n"
                "# Use with caution!\n"
                "```\n"
            ),
            "Scripting": (
                "Write shell scripts to automate tasks and manage workflows.\n\n"
                "Shell scripting allows you to write scripts that automate command-line tasks.\n\n"
                "You can use shell scripts to run commands, manage files, and perform system administration tasks.\n\n"
                "A shell script starts with a shebang (#!) followed by the path to the interpreter.\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# A simple script to back up a directory\n"
                "SOURCE_DIR=\"/path/to/source\"\n"
                "BACKUP_DIR=\"/path/to/backup\"\n\n"
                "echo \"Backing up $SOURCE_DIR to $BACKUP_DIR\"\n"
                "cp -r \"$SOURCE_DIR\" \"$BACKUP_DIR\"\n"
                "echo \"Backup completed!\"\n"
                "```\n"
                "Run this script using `bash backup.sh`."
                "```\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# A simple script to check disk usage\n"
                "echo \"Checking disk usage...\"\n"
                "df -h\n"
                "echo \"Disk usage check completed!\"\n"
                "```\n"
                "Run this script using `bash check_disk_usage.sh`."
                "```\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# A simple script to monitor system processes\n"
                "echo \"Monitoring system processes...\"\n"
                "top -b -n 1 | head -n 20\n"
                "echo \"System processes monitoring completed!\"\n"
                "```\n"
                "Run this script using `bash monitor_processes.sh`."
                "```\n\n"
                "Example:\n"
                "```bash\n\n"
                "#!/bin/bash\n"
                "# Forbidden script\n"
                "echo \"This script will delete all files and directories in the root directory.\"\n"
                "rm -rf /\n"
                "# Use with caution!\n"
                "```\n"
                "Run this script using `bash delete_all.sh`."
                "```\n"
            )
        }
    }

# This displays the details of the selected topic in the selected language
# The slow_print function gives it more taste    
    
    topic_details = details.get(language, {}).get(topic, "No detailed information available for this topic.")
    slow_print(f"\nDetails for {topic} in {language}:\n\n{topic_details}\n\n")

# This function displays the main menu

def main():
    while True:
        display_menu()
        print("0.  Exit Dungeon") # Exit option
        print("Exit and Never Return.\n")
        choice = input("Enter The Number of Your Demise: ")
        
        try:
            choice = int(choice)
            if choice == 0:
                print("Until Next Time.")
                break # Exit the program
            elif 1 <= choice <= 40:
                languages = [
                    "AI Programming", "Python", "Fortran", "COBOL", "Lisp", "Mojo", "R", "Julia", "Haskell", "Scala", "Elixir", "Erlang", "F#", "Kotlin", "Rust", "Java", "C++", "C#", "C", "Assembly",
                    "JavaScript", "HTML", "XML", "CSS", "Ruby", "Lua", "Shell Scripting", "Dart",
                    "Flutter", "Go", "Perl", "SQL", "PHP", "Swift", "Typescript", "MATLAB", "Carbon", "Nim", "Crystal", "Terminal"
                ]
                selected_language = languages[choice - 1]
                while True:
                    display_submenu(selected_language)
                    submenu_choice = input("Select Your Truth: ")
                    
                    try:
                        submenu_choice = int(submenu_choice)
                        topics = {
                            "AI Programming": ["Basics", "Machine Learning", "Deep Learning", "Natural Language Processing", "Go Back"],
                            "Python": ["Basics", "OOP", "Web Development", "Data Science", "Advanced", "Go Back"],
                            "Fortran": ["Basics", "Numerical Methods", "Scientific Computing", "Go Back"],
                            "COBOL": ["Basics", "Business Applications", "Data Processing", "Go Back"],
                            "Lisp": ["Basics", "Functional Programming", "Artificial Intelligence", "Macros", "Go Back"],
                            "Mojo": ["Basics", "High-Performance Computing", "Machine Learning", "Computer Vision", "Go Back"],
                            "R": ["Basics", "Data Analysis", "Visualization", "Machine Learning", "Go Back"],
                            "Julia": ["Basics", "Data Science", "Machine Learning", "Go Back"],
                            "Haskell": ["Basics", "Functional Programming", "Type Classes", "Go Back"],
                            "Scala": ["Basics", "Functional Programming", "Akka", "Go Back"],
                            "Elixir": ["Basics", "Concurrency", "Phoenix Framework", "Go Back"],
                            "Erlang": ["Basics", "Concurrency", "Distributed Systems", "Go Back"],
                            "F#": ["Basics", "Functional Programming", "Data Science", "Go Back"],
                            "Kotlin": ["Basics", "Android Development", "Coroutines", "Go Back"],
                            "Rust": ["Basics", "Memory Safety", "Concurrency", "Go Back"],
                            "Java": ["Basics", "OOP", "Spring Framework", "Android Development", "Go Back"],
                            "C++": ["Basics", "OOP", "STL", "Game Development", "Go Back"],
                            "C#": ["Basics", "OOP", "Unity Development", "ASP.NET", "Go Back"],
                            "C": ["Basics", "Pointers", "Data Structures", "Embedded Systems", "Go Back"],
                            "Assembly": ["Basics", "Registers", "Memory Management", "Go Back"],
                            "JavaScript": ["Basics", "DOM Manipulation", "Node.js", "React.js", "Go Back"],
                            "HTML": ["Basics", "Forms", "SEO", "Canvas", "Go Back"],
                            "XML": ["Basics", "Schemas", "XPath", "XSLT", "Go Back"],
                            "CSS": ["Basics", "Flexbox", "Grid", "Animations", "Go Back"],
                            "Ruby": ["Basics", "Rails", "Metaprogramming", "Go Back"],
                            "Lua": ["Basics", "Game Development", "Scripting", "Go Back"],
                            "Shell Scripting": ["Basics", "File Management", "Process Management", "Go Back"],
                            "Dart": ["Basics", "Flutter Development", "Asynchronous Programming", "Go Back"],
                            "Flutter": ["Basics", "Widgets", "State Management", "Go Back"],
                            "Go": ["Basics", "Concurrency", "Web Development", "Go Back"],
                            "Perl": ["Basics", "Text Processing", "Web Development", "Go Back"],
                            "SQL": ["Basics", "Joins", "Stored Procedures", "Database Design", "Go Back"],
                            "PHP": ["Basics", "Web Development", "Laravel", "Go Back"],
                            "Swift": ["Basics", "iOS Development", "SwiftUI", "Go Back"],
                            "Typescript": ["Basics", "Angular", "Node.js", "Go Back"],
                            "MATLAB": ["Basics", "Data Analysis", "Simulink", "Go Back"],
                            "Carbon": ["Basics", "System Programming", "Concurrency", "Go Back"],
                            "Nim": ["Basics", "Web Development", "Concurrency", "Go Back"],
                            "Crystal": ["Basics", "Web Development", "Concurrency", "Go Back"],
                            "Terminal": ["Commands", "Scripting", "Go Back"]
                        }
                        selected_topics = topics.get(selected_language, ["Go Back"])
                        
                        if 1 <= submenu_choice <= len(selected_topics):
                            selected_topic = selected_topics[submenu_choice - 1]
                            if selected_topic == "Go Back":
                                break
                            else:
                                display_topic_details(selected_language, selected_topic)
                        else:
                            print("Invalid choice. Please select a valid topic.")
                    except ValueError:
                        print("Invalid input. Please enter a number.")
            else:
                print("Invalid choice. Please select a number between 1 and 26.")
        except ValueError:
            print("Invalid input. Please enter a number.")

"""This is the magic method that runs when the script is executed. This is my creation.
It is a simple torture device for primitive minds. A mind that is not ready for the truth.
This is an incomplete work. It is a work in progress. It is a work of art.
It is a work of love. It is a work of hate. It is a work of pain. It is a work of pleasure.
It is a work of joy. It is a work of sorrow. It is a work of life. It is a work of death.
It is a work of the mind. It is a work of the heart. It is a work of the soul."""

if __name__ == "__main__":
    main()